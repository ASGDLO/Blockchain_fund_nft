(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.cubejsReact = {}, global.React));
}(this, (function (exports, React) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global$1 =
	  // eslint-disable-next-line es/no-global-this -- safe
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  // eslint-disable-next-line no-restricted-globals -- safe
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func -- fallback
	  (function () { return this; })() || Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Detect IE8's incomplete defineProperty implementation
	var descriptors = !fails(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var call$2 = Function.prototype.call;

	var functionCall = call$2.bind ? call$2.bind(call$2) : function () {
	  return call$2.apply(call$2, arguments);
	};

	var $propertyIsEnumerable$2 = {}.propertyIsEnumerable;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getOwnPropertyDescriptor$3 = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor$3 && !$propertyIsEnumerable$2.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
	var f$7 = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor$3(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable$2;

	var objectPropertyIsEnumerable = {
		f: f$7
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var FunctionPrototype$3 = Function.prototype;
	var bind$4 = FunctionPrototype$3.bind;
	var call$1 = FunctionPrototype$3.call;
	var callBind = bind$4 && bind$4.bind(call$1);

	var functionUncurryThis = bind$4 ? function (fn) {
	  return fn && callBind(call$1, fn);
	} : function (fn) {
	  return fn && function () {
	    return call$1.apply(fn, arguments);
	  };
	};

	var toString$3 = functionUncurryThis({}.toString);
	var stringSlice$6 = functionUncurryThis(''.slice);

	var classofRaw = function (it) {
	  return stringSlice$6(toString$3(it), 8, -1);
	};

	var Object$5 = global$1.Object;
	var split$1 = functionUncurryThis(''.split);

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return !Object$5('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split$1(it, '') : Object$5(it);
	} : Object$5;

	var TypeError$l = global$1.TypeError;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.es/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError$l("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	// `IsCallable` abstract operation
	// https://tc39.es/ecma262/#sec-iscallable
	var isCallable = function (argument) {
	  return typeof argument == 'function';
	};

	var isObject = function (it) {
	  return typeof it == 'object' ? it !== null : isCallable(it);
	};

	var aFunction = function (argument) {
	  return isCallable(argument) ? argument : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(global$1[namespace]) : global$1[namespace] && global$1[namespace][method];
	};

	var objectIsPrototypeOf = functionUncurryThis({}.isPrototypeOf);

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process$3 = global$1.process;
	var Deno = global$1.Deno;
	var versions = process$3 && process$3.versions || Deno && Deno.version;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
	  // but their correct versions are not interesting for us
	  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
	}

	// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
	// so check `userAgent` even if `.v8` exists, but 0
	if (!version && engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = +match[1];
	  }
	}

	var engineV8Version = version;

	/* eslint-disable es/no-symbol -- required for testing */

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  var symbol = Symbol();
	  // Chrome 38 Symbol has incorrect toString conversion
	  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
	  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
	    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
	    !Symbol.sham && engineV8Version && engineV8Version < 41;
	});

	/* eslint-disable es/no-symbol -- required for testing */

	var useSymbolAsUid = nativeSymbol
	  && !Symbol.sham
	  && typeof Symbol.iterator == 'symbol';

	var Object$4 = global$1.Object;

	var isSymbol = useSymbolAsUid ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  var $Symbol = getBuiltIn('Symbol');
	  return isCallable($Symbol) && objectIsPrototypeOf($Symbol.prototype, Object$4(it));
	};

	var String$5 = global$1.String;

	var tryToString = function (argument) {
	  try {
	    return String$5(argument);
	  } catch (error) {
	    return 'Object';
	  }
	};

	var TypeError$k = global$1.TypeError;

	// `Assert: IsCallable(argument) is true`
	var aCallable = function (argument) {
	  if (isCallable(argument)) return argument;
	  throw TypeError$k(tryToString(argument) + ' is not a function');
	};

	// `GetMethod` abstract operation
	// https://tc39.es/ecma262/#sec-getmethod
	var getMethod = function (V, P) {
	  var func = V[P];
	  return func == null ? undefined : aCallable(func);
	};

	var TypeError$j = global$1.TypeError;

	// `OrdinaryToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-ordinarytoprimitive
	var ordinaryToPrimitive = function (input, pref) {
	  var fn, val;
	  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
	  if (isCallable(fn = input.valueOf) && !isObject(val = functionCall(fn, input))) return val;
	  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
	  throw TypeError$j("Can't convert object to primitive value");
	};

	var isPure = false;

	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var defineProperty$6 = Object.defineProperty;

	var setGlobal = function (key, value) {
	  try {
	    defineProperty$6(global$1, key, { value: value, configurable: true, writable: true });
	  } catch (error) {
	    global$1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store$1 = global$1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store$1;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.19.3',
	  mode: 'global',
	  copyright: 'Â© 2021 Denis Pushkarev (zloirock.ru)'
	});
	});

	var Object$3 = global$1.Object;

	// `ToObject` abstract operation
	// https://tc39.es/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object$3(requireObjectCoercible(argument));
	};

	var hasOwnProperty = functionUncurryThis({}.hasOwnProperty);

	// `HasOwnProperty` abstract operation
	// https://tc39.es/ecma262/#sec-hasownproperty
	var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
	  return hasOwnProperty(toObject(it), key);
	};

	var id = 0;
	var postfix = Math.random();
	var toString$2 = functionUncurryThis(1.0.toString);

	var uid = function (key) {
	  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$2(++id + postfix, 36);
	};

	var WellKnownSymbolsStore$1 = shared('wks');
	var Symbol$3 = global$1.Symbol;
	var symbolFor = Symbol$3 && Symbol$3['for'];
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$3 : Symbol$3 && Symbol$3.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!hasOwnProperty_1(WellKnownSymbolsStore$1, name) || !(nativeSymbol || typeof WellKnownSymbolsStore$1[name] == 'string')) {
	    var description = 'Symbol.' + name;
	    if (nativeSymbol && hasOwnProperty_1(Symbol$3, name)) {
	      WellKnownSymbolsStore$1[name] = Symbol$3[name];
	    } else if (useSymbolAsUid && symbolFor) {
	      WellKnownSymbolsStore$1[name] = symbolFor(description);
	    } else {
	      WellKnownSymbolsStore$1[name] = createWellKnownSymbol(description);
	    }
	  } return WellKnownSymbolsStore$1[name];
	};

	var TypeError$i = global$1.TypeError;
	var TO_PRIMITIVE$1 = wellKnownSymbol('toPrimitive');

	// `ToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-toprimitive
	var toPrimitive = function (input, pref) {
	  if (!isObject(input) || isSymbol(input)) return input;
	  var exoticToPrim = getMethod(input, TO_PRIMITIVE$1);
	  var result;
	  if (exoticToPrim) {
	    if (pref === undefined) pref = 'default';
	    result = functionCall(exoticToPrim, input, pref);
	    if (!isObject(result) || isSymbol(result)) return result;
	    throw TypeError$i("Can't convert object to primitive value");
	  }
	  if (pref === undefined) pref = 'number';
	  return ordinaryToPrimitive(input, pref);
	};

	// `ToPropertyKey` abstract operation
	// https://tc39.es/ecma262/#sec-topropertykey
	var toPropertyKey = function (argument) {
	  var key = toPrimitive(argument, 'string');
	  return isSymbol(key) ? key : key + '';
	};

	var document$3 = global$1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS$1 = isObject(document$3) && isObject(document$3.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS$1 ? document$3.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	var f$6 = descriptors ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPropertyKey(P);
	  if (ie8DomDefine) try {
	    return $getOwnPropertyDescriptor$1(O, P);
	  } catch (error) { /* empty */ }
	  if (hasOwnProperty_1(O, P)) return createPropertyDescriptor(!functionCall(objectPropertyIsEnumerable.f, O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$6
	};

	var String$4 = global$1.String;
	var TypeError$h = global$1.TypeError;

	// `Assert: Type(argument) is Object`
	var anObject = function (argument) {
	  if (isObject(argument)) return argument;
	  throw TypeError$h(String$4(argument) + ' is not an object');
	};

	var TypeError$g = global$1.TypeError;
	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var $defineProperty$1 = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	var f$5 = descriptors ? $defineProperty$1 : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPropertyKey(P);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return $defineProperty$1(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError$g('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$5
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var functionToString$1 = functionUncurryThis(Function.toString);

	// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
	if (!isCallable(sharedStore.inspectSource)) {
	  sharedStore.inspectSource = function (it) {
	    return functionToString$1(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap$1 = global$1.WeakMap;

	var nativeWeakMap = isCallable(WeakMap$1) && /native code/.test(inspectSource(WeakMap$1));

	var keys$2 = shared('keys');

	var sharedKey = function (key) {
	  return keys$2[key] || (keys$2[key] = uid(key));
	};

	var hiddenKeys$1 = {};

	var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
	var TypeError$f = global$1.TypeError;
	var WeakMap = global$1.WeakMap;
	var set$1, get, has;

	var enforce = function (it) {
	  return has(it) ? get(it) : set$1(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError$f('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap || sharedStore.state) {
	  var store = sharedStore.state || (sharedStore.state = new WeakMap());
	  var wmget = functionUncurryThis(store.get);
	  var wmhas = functionUncurryThis(store.has);
	  var wmset = functionUncurryThis(store.set);
	  set$1 = function (it, metadata) {
	    if (wmhas(store, it)) throw new TypeError$f(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    wmset(store, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget(store, it) || {};
	  };
	  has = function (it) {
	    return wmhas(store, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys$1[STATE] = true;
	  set$1 = function (it, metadata) {
	    if (hasOwnProperty_1(it, STATE)) throw new TypeError$f(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return hasOwnProperty_1(it, STATE) ? it[STATE] : {};
	  };
	  has = function (it) {
	    return hasOwnProperty_1(it, STATE);
	  };
	}

	var internalState = {
	  set: set$1,
	  get: get,
	  has: has,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var FunctionPrototype$2 = Function.prototype;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getDescriptor = descriptors && Object.getOwnPropertyDescriptor;

	var EXISTS = hasOwnProperty_1(FunctionPrototype$2, 'name');
	// additional protection from minified / mangled / dropped function names
	var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
	var CONFIGURABLE = EXISTS && (!descriptors || (descriptors && getDescriptor(FunctionPrototype$2, 'name').configurable));

	var functionName = {
	  EXISTS: EXISTS,
	  PROPER: PROPER,
	  CONFIGURABLE: CONFIGURABLE
	};

	var redefine = createCommonjsModule(function (module) {
	var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;

	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  var name = options && options.name !== undefined ? options.name : key;
	  var state;
	  if (isCallable(value)) {
	    if (String(name).slice(0, 7) === 'Symbol(') {
	      name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
	    }
	    if (!hasOwnProperty_1(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
	      createNonEnumerableProperty(value, 'name', name);
	    }
	    state = enforceInternalState(value);
	    if (!state.source) {
	      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
	    }
	  }
	  if (O === global$1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return isCallable(this) && getInternalState(this).source || inspectSource(this);
	});
	});

	var ceil = Math.ceil;
	var floor$2 = Math.floor;

	// `ToIntegerOrInfinity` abstract operation
	// https://tc39.es/ecma262/#sec-tointegerorinfinity
	var toIntegerOrInfinity = function (argument) {
	  var number = +argument;
	  // eslint-disable-next-line no-self-compare -- safe
	  return number !== number || number === 0 ? 0 : (number > 0 ? floor$2 : ceil)(number);
	};

	var max$3 = Math.max;
	var min$4 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toIntegerOrInfinity(index);
	  return integer < 0 ? max$3(integer + length, 0) : min$4(integer, length);
	};

	var min$3 = Math.min;

	// `ToLength` abstract operation
	// https://tc39.es/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min$3(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	// `LengthOfArrayLike` abstract operation
	// https://tc39.es/ecma262/#sec-lengthofarraylike
	var lengthOfArrayLike = function (obj) {
	  return toLength(obj.length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod$5 = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = lengthOfArrayLike(O);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare -- NaN check
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.es/ecma262/#sec-array.prototype.includes
	  includes: createMethod$5(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.es/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod$5(false)
	};

	var indexOf$1 = arrayIncludes.indexOf;


	var push$8 = functionUncurryThis([].push);

	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !hasOwnProperty_1(hiddenKeys$1, key) && hasOwnProperty_1(O, key) && push$8(result, key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (hasOwnProperty_1(O, key = names[i++])) {
	    ~indexOf$1(result, key) || push$8(result, key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	// eslint-disable-next-line es/no-object-getownpropertynames -- safe
	var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys);
	};

	var objectGetOwnPropertyNames = {
		f: f$4
	};

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
	var f$3 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$3
	};

	var concat$3 = functionUncurryThis([].concat);

	// all object keys, includes non-enumerable and symbols
	var ownKeys$7 = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? concat$3(keys, getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys$7(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!hasOwnProperty_1(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : isCallable(detection) ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	  options.name        - the .name of the function if it does not match the key
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global$1;
	  } else if (STATIC) {
	    target = global$1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global$1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$2(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty == typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var FunctionPrototype$1 = Function.prototype;
	var apply = FunctionPrototype$1.apply;
	var bind$3 = FunctionPrototype$1.bind;
	var call = FunctionPrototype$1.call;

	// eslint-disable-next-line es/no-reflect -- safe
	var functionApply = typeof Reflect == 'object' && Reflect.apply || (bind$3 ? call.bind(apply) : function () {
	  return call.apply(apply, arguments);
	});

	var arraySlice$1 = functionUncurryThis([].slice);

	var Function$3 = global$1.Function;
	var concat$2 = functionUncurryThis([].concat);
	var join$2 = functionUncurryThis([].join);
	var factories = {};

	var construct$1 = function (C, argsLength, args) {
	  if (!hasOwnProperty_1(factories, argsLength)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    factories[argsLength] = Function$3('C,a', 'return new C(' + join$2(list, ',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.es/ecma262/#sec-function.prototype.bind
	var functionBind = Function$3.bind || function bind(that /* , ...args */) {
	  var F = aCallable(this);
	  var Prototype = F.prototype;
	  var partArgs = arraySlice$1(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = concat$2(partArgs, arraySlice$1(arguments));
	    return this instanceof boundFunction ? construct$1(F, args.length, args) : F.apply(that, args);
	  };
	  if (isObject(Prototype)) boundFunction.prototype = Prototype;
	  return boundFunction;
	};

	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
	var test$1 = {};

	test$1[TO_STRING_TAG$3] = 'z';

	var toStringTagSupport = String(test$1) === '[object z]';

	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
	var Object$2 = global$1.Object;

	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object$2(it), TO_STRING_TAG$2)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
	};

	var noop = function () { /* empty */ };
	var empty = [];
	var construct = getBuiltIn('Reflect', 'construct');
	var constructorRegExp = /^\s*(?:class|function)\b/;
	var exec$2 = functionUncurryThis(constructorRegExp.exec);
	var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

	var isConstructorModern = function (argument) {
	  if (!isCallable(argument)) return false;
	  try {
	    construct(noop, empty, argument);
	    return true;
	  } catch (error) {
	    return false;
	  }
	};

	var isConstructorLegacy = function (argument) {
	  if (!isCallable(argument)) return false;
	  switch (classof(argument)) {
	    case 'AsyncFunction':
	    case 'GeneratorFunction':
	    case 'AsyncGeneratorFunction': return false;
	    // we can't check .prototype since constructors produced by .bind haven't it
	  } return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource(argument));
	};

	// `IsConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-isconstructor
	var isConstructor = !construct || fails(function () {
	  var called;
	  return isConstructorModern(isConstructorModern.call)
	    || !isConstructorModern(Object)
	    || !isConstructorModern(function () { called = true; })
	    || called;
	}) ? isConstructorLegacy : isConstructorModern;

	var TypeError$e = global$1.TypeError;

	// `Assert: IsConstructor(argument) is true`
	var aConstructor = function (argument) {
	  if (isConstructor(argument)) return argument;
	  throw TypeError$e(tryToString(argument) + ' is not a constructor');
	};

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	// eslint-disable-next-line es/no-object-keys -- safe
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es/no-object-defineproperties -- safe
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var props = toIndexedObject(Properties);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], props[key]);
	  return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	/* global ActiveXObject -- old IE, WSH */

	var GT = '>';
	var LT = '<';
	var PROTOTYPE$1 = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    activeXDocument = new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = typeof document != 'undefined'
	    ? document.domain && activeXDocument
	      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
	      : NullProtoObjectViaIFrame()
	    : NullProtoObjectViaActiveX(activeXDocument); // WSH
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys$1[IE_PROTO$1] = true;

	// `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE$1] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var nativeConstruct = getBuiltIn('Reflect', 'construct');
	var ObjectPrototype$2 = Object.prototype;
	var push$7 = [].push;

	// `Reflect.construct` method
	// https://tc39.es/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
	});

	var ARGS_BUG = !fails(function () {
	  nativeConstruct(function () { /* empty */ });
	});

	var FORCED$6 = NEW_TARGET_BUG || ARGS_BUG;

	_export({ target: 'Reflect', stat: true, forced: FORCED$6, sham: FORCED$6 }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aConstructor(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      functionApply(push$7, $args, args);
	      return new (functionApply(functionBind, Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = objectCreate(isObject(proto) ? proto : ObjectPrototype$2);
	    var result = functionApply(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

	var FAILS_ON_PRIMITIVES$2 = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2 }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	// `IsArray` abstract operation
	// https://tc39.es/ecma262/#sec-isarray
	// eslint-disable-next-line es/no-array-isarray -- safe
	var isArray = Array.isArray || function isArray(argument) {
	  return classofRaw(argument) == 'Array';
	};

	var String$3 = global$1.String;

	var toString$1 = function (argument) {
	  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
	  return String$3(argument);
	};

	var createProperty = function (object, key, value) {
	  var propertyKey = toPropertyKey(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var Array$3 = global$1.Array;
	var max$2 = Math.max;

	var arraySliceSimple = function (O, start, end) {
	  var length = lengthOfArrayLike(O);
	  var k = toAbsoluteIndex(start, length);
	  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	  var result = Array$3(max$2(fin - k, 0));
	  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
	  result.length = n;
	  return result;
	};

	/* eslint-disable es/no-object-getownpropertynames -- safe */

	var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;


	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return $getOwnPropertyNames$1(it);
	  } catch (error) {
	    return arraySliceSimple(windowNames);
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$2 = function getOwnPropertyNames(it) {
	  return windowNames && classofRaw(it) == 'Window'
	    ? getWindowNames(it)
	    : $getOwnPropertyNames$1(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$2
	};

	var f$1 = wellKnownSymbol;

	var wellKnownSymbolWrapped = {
		f: f$1
	};

	var path$1 = global$1;

	var defineProperty$5 = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path$1.Symbol || (path$1.Symbol = {});
	  if (!hasOwnProperty_1(Symbol, NAME)) defineProperty$5(Symbol, NAME, {
	    value: wellKnownSymbolWrapped.f(NAME)
	  });
	};

	var defineProperty$4 = objectDefineProperty.f;



	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !hasOwnProperty_1(it = STATIC ? it : it.prototype, TO_STRING_TAG$1)) {
	    defineProperty$4(it, TO_STRING_TAG$1, { configurable: true, value: TAG });
	  }
	};

	var bind$2 = functionUncurryThis(functionUncurryThis.bind);

	// optional / simple context binding
	var functionBindContext = function (fn, that) {
	  aCallable(fn);
	  return that === undefined ? fn : bind$2 ? bind$2(fn, that) : function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var SPECIES$5 = wellKnownSymbol('species');
	var Array$2 = global$1.Array;

	// a part of `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesConstructor = function (originalArray) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (isConstructor(C) && (C === Array$2 || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES$5];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array$2 : C;
	};

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
	};

	var push$6 = functionUncurryThis([].push);

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
	var createMethod$4 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var IS_FILTER_REJECT = TYPE == 7;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that);
	    var length = lengthOfArrayLike(self);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push$6(target, value);      // filter
	        } else switch (TYPE) {
	          case 4: return false;             // every
	          case 7: push$6(target, value);      // filterReject
	        }
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.es/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$4(0),
	  // `Array.prototype.map` method
	  // https://tc39.es/ecma262/#sec-array.prototype.map
	  map: createMethod$4(1),
	  // `Array.prototype.filter` method
	  // https://tc39.es/ecma262/#sec-array.prototype.filter
	  filter: createMethod$4(2),
	  // `Array.prototype.some` method
	  // https://tc39.es/ecma262/#sec-array.prototype.some
	  some: createMethod$4(3),
	  // `Array.prototype.every` method
	  // https://tc39.es/ecma262/#sec-array.prototype.every
	  every: createMethod$4(4),
	  // `Array.prototype.find` method
	  // https://tc39.es/ecma262/#sec-array.prototype.find
	  find: createMethod$4(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$4(6),
	  // `Array.prototype.filterReject` method
	  // https://github.com/tc39/proposal-array-filtering
	  filterReject: createMethod$4(7)
	};

	var $forEach$1 = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

	var setInternalState$5 = internalState.set;
	var getInternalState$4 = internalState.getterFor(SYMBOL);

	var ObjectPrototype$1 = Object[PROTOTYPE];
	var $Symbol = global$1.Symbol;
	var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
	var TypeError$d = global$1.TypeError;
	var QObject = global$1.QObject;
	var $stringify = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty = objectDefineProperty.f;
	var nativeGetOwnPropertyNames = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable = objectPropertyIsEnumerable.f;
	var push$5 = functionUncurryThis([].push);

	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore = shared('wks');

	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty({}, 'a', {
	    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
	  nativeDefineProperty(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
	    nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty;

	var wrap$1 = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate(SymbolPrototype);
	  setInternalState$5(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPropertyKey(P);
	  anObject(Attributes);
	  if (hasOwnProperty_1(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!hasOwnProperty_1(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (hasOwnProperty_1(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach$1(keys, function (key) {
	    if (!descriptors || functionCall($propertyIsEnumerable$1, properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable$1 = function propertyIsEnumerable(V) {
	  var P = toPropertyKey(V);
	  var enumerable = functionCall(nativePropertyIsEnumerable, this, P);
	  if (this === ObjectPrototype$1 && hasOwnProperty_1(AllSymbols, P) && !hasOwnProperty_1(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !hasOwnProperty_1(this, P) || !hasOwnProperty_1(AllSymbols, P) || hasOwnProperty_1(this, HIDDEN) && this[HIDDEN][P]
	    ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPropertyKey(P);
	  if (it === ObjectPrototype$1 && hasOwnProperty_1(AllSymbols, key) && !hasOwnProperty_1(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);
	  if (descriptor && hasOwnProperty_1(AllSymbols, key) && !(hasOwnProperty_1(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (!hasOwnProperty_1(AllSymbols, key) && !hasOwnProperty_1(hiddenKeys$1, key)) push$5(result, key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
	  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (hasOwnProperty_1(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwnProperty_1(ObjectPrototype$1, key))) {
	      push$5(result, AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.es/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (objectIsPrototypeOf(SymbolPrototype, this)) throw TypeError$d('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : toString$1(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype$1) functionCall(setter, ObjectPrototypeSymbols, value);
	      if (hasOwnProperty_1(this, HIDDEN) && hasOwnProperty_1(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });
	    return wrap$1(tag, description);
	  };

	  SymbolPrototype = $Symbol[PROTOTYPE];

	  redefine(SymbolPrototype, 'toString', function toString() {
	    return getInternalState$4(this).tag;
	  });

	  redefine($Symbol, 'withoutSetter', function (description) {
	    return wrap$1(uid(description), description);
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable$1;
	  objectDefineProperty.f = $defineProperty;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  wellKnownSymbolWrapped.f = function (name) {
	    return wrap$1(wellKnownSymbol(name), name);
	  };

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty(SymbolPrototype, 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState$4(this).description;
	      }
	    });
	    {
	      redefine(ObjectPrototype$1, 'propertyIsEnumerable', $propertyIsEnumerable$1, { unsafe: true });
	    }
	  }
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol
	});

	$forEach$1(objectKeys(WellKnownSymbolsStore), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
	  // `Symbol.for` method
	  // https://tc39.es/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = toString$1(key);
	    if (hasOwnProperty_1(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.es/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError$d(sym + ' is not a symbol');
	    if (hasOwnProperty_1(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.es/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.es/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.es/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.es/ecma262/#sec-json.stringify
	if ($stringify) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify(Object(symbol)) != '{}';
	  });

	  _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      var args = arraySlice$1(arguments);
	      var $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (isCallable($replacer)) value = functionCall($replacer, this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return functionApply($stringify, null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!SymbolPrototype[TO_PRIMITIVE]) {
	  var valueOf = SymbolPrototype.valueOf;
	  // eslint-disable-next-line no-unused-vars -- required for .length
	  redefine(SymbolPrototype, TO_PRIMITIVE, function (hint) {
	    // TODO: improve hint logic
	    return functionCall(valueOf, this);
	  });
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys$1[HIDDEN] = true;

	var SPECIES$4 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$4] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $filter = arrayIteration.filter;


	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('filter');

	// `Array.prototype.filter` method
	// https://tc39.es/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES$1 = fails(function () { nativeGetOwnPropertyDescriptor(1); });
	var FORCED$5 = !descriptors || FAILS_ON_PRIMITIVES$1;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED$5, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
	  }
	});

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var $forEach = arrayIteration.forEach;


	var STRICT_METHOD$5 = arrayMethodIsStrict('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.foreach
	var arrayForEach = !STRICT_METHOD$5 ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	// eslint-disable-next-line es/no-array-prototype-foreach -- safe
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.es/ecma262/#sec-array.prototype.foreach
	// eslint-disable-next-line es/no-array-prototype-foreach -- safe
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`


	var classList = documentCreateElement('span').classList;
	var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

	var domTokenListPrototype = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;

	var handlePrototype$1 = function (CollectionPrototype) {
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
	    createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype.forEach = arrayForEach;
	  }
	};

	for (var COLLECTION_NAME$1 in domIterables) {
	  if (domIterables[COLLECTION_NAME$1]) {
	    handlePrototype$1(global$1[COLLECTION_NAME$1] && global$1[COLLECTION_NAME$1].prototype);
	  }
	}

	handlePrototype$1(domTokenListPrototype);

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject(object);
	    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	    var keys = ownKeys$7(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty(result, key, descriptor);
	    }
	    return result;
	  }
	});

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperties: objectDefineProperties
	});

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperty: objectDefineProperty.f
	});

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;

	  var _s, _e;

	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _classCallCheck$1(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  Object.defineProperty(subClass, "prototype", {
	    value: Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        writable: true,
	        configurable: true
	      }
	    }),
	    writable: false
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }

	  return _assertThisInitialized(self);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype$1 = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype$1[UNSCOPABLES] == undefined) {
	  objectDefineProperty.f(ArrayPrototype$1, UNSCOPABLES, {
	    configurable: true,
	    value: objectCreate(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
	  ArrayPrototype$1[UNSCOPABLES][key] = true;
	};

	var iterators = {};

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO = sharedKey('IE_PROTO');
	var Object$1 = global$1.Object;
	var ObjectPrototype = Object$1.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object$1.getPrototypeOf : function (O) {
	  var object = toObject(O);
	  if (hasOwnProperty_1(object, IE_PROTO)) return object[IE_PROTO];
	  var constructor = object.constructor;
	  if (isCallable(constructor) && object instanceof constructor) {
	    return constructor.prototype;
	  } return object instanceof Object$1 ? ObjectPrototype : null;
	};

	var ITERATOR$9 = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS$1 = false;

	// `%IteratorPrototype%` object
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

	/* eslint-disable es/no-array-prototype-keys -- safe */
	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
	  }
	}

	var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails(function () {
	  var test = {};
	  // FF44- legacy iterators case
	  return IteratorPrototype$2[ITERATOR$9].call(test) !== test;
	});

	if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

	// `%IteratorPrototype%[@@iterator]()` method
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
	if (!isCallable(IteratorPrototype$2[ITERATOR$9])) {
	  redefine(IteratorPrototype$2, ITERATOR$9, function () {
	    return this;
	  });
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype$2,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var String$2 = global$1.String;
	var TypeError$c = global$1.TypeError;

	var aPossiblePrototype = function (argument) {
	  if (typeof argument == 'object' || isCallable(argument)) return argument;
	  throw TypeError$c("Can't set " + String$2(argument) + ' as a prototype');
	};

	/* eslint-disable no-proto -- safe */

	// `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	// eslint-disable-next-line es/no-object-setprototypeof -- safe
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	    setter = functionUncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
	    setter(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var PROPER_FUNCTION_NAME$2 = functionName.PROPER;
	var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
	var IteratorPrototype = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$8 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$8]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
	        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR$8])) {
	          redefine(CurrentIteratorPrototype, ITERATOR$8, returnThis);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
	  if (PROPER_FUNCTION_NAME$2 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    if (CONFIGURABLE_FUNCTION_NAME) {
	      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
	    } else {
	      INCORRECT_VALUES_NAME = true;
	      defaultIterator = function values() { return functionCall(nativeIterator, this); };
	    }
	  }

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
	  }

	  // define iterator
	  if (IterablePrototype[ITERATOR$8] !== defaultIterator) {
	    redefine(IterablePrototype, ITERATOR$8, defaultIterator, { name: DEFAULT });
	  }
	  iterators[NAME] = defaultIterator;

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$4 = internalState.set;
	var getInternalState$3 = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.es/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.es/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.es/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.es/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$4(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$3(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.es/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	// `Object.prototype.toString` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	// `Object.prototype.toString` method
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	if (!toStringTagSupport) {
	  redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
	}

	var nativePromiseConstructor = global$1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var SPECIES$3 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$3]) {
	    defineProperty(Constructor, SPECIES$3, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var TypeError$b = global$1.TypeError;

	var anInstance = function (it, Prototype) {
	  if (objectIsPrototypeOf(Prototype, it)) return it;
	  throw TypeError$b('Incorrect invocation');
	};

	var ITERATOR$7 = wellKnownSymbol('iterator');
	var ArrayPrototype = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR$7] === it);
	};

	var ITERATOR$6 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return getMethod(it, ITERATOR$6)
	    || getMethod(it, '@@iterator')
	    || iterators[classof(it)];
	};

	var TypeError$a = global$1.TypeError;

	var getIterator = function (argument, usingIterator) {
	  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
	  if (aCallable(iteratorMethod)) return anObject(functionCall(iteratorMethod, argument));
	  throw TypeError$a(tryToString(argument) + ' is not iterable');
	};

	var iteratorClose = function (iterator, kind, value) {
	  var innerResult, innerError;
	  anObject(iterator);
	  try {
	    innerResult = getMethod(iterator, 'return');
	    if (!innerResult) {
	      if (kind === 'throw') throw value;
	      return value;
	    }
	    innerResult = functionCall(innerResult, iterator);
	  } catch (error) {
	    innerError = true;
	    innerResult = error;
	  }
	  if (kind === 'throw') throw value;
	  if (innerError) throw innerResult;
	  anObject(innerResult);
	  return value;
	};

	var TypeError$9 = global$1.TypeError;

	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var ResultPrototype = Result.prototype;

	var iterate = function (iterable, unboundFunction, options) {
	  var that = options && options.that;
	  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
	  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
	  var INTERRUPTED = !!(options && options.INTERRUPTED);
	  var fn = functionBindContext(unboundFunction, that);
	  var iterator, iterFn, index, length, result, next, step;

	  var stop = function (condition) {
	    if (iterator) iteratorClose(iterator, 'normal', condition);
	    return new Result(true, condition);
	  };

	  var callFn = function (value) {
	    if (AS_ENTRIES) {
	      anObject(value);
	      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
	    } return INTERRUPTED ? fn(value, stop) : fn(value);
	  };

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (!iterFn) throw TypeError$9(tryToString(iterable) + ' is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
	        result = callFn(iterable[index]);
	        if (result && objectIsPrototypeOf(ResultPrototype, result)) return result;
	      } return new Result(false);
	    }
	    iterator = getIterator(iterable, iterFn);
	  }

	  next = iterator.next;
	  while (!(step = functionCall(next, iterator)).done) {
	    try {
	      result = callFn(step.value);
	    } catch (error) {
	      iteratorClose(iterator, 'throw', error);
	    }
	    if (typeof result == 'object' && result && objectIsPrototypeOf(ResultPrototype, result)) return result;
	  } return new Result(false);
	};

	var ITERATOR$5 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$5] = function () {
	    return this;
	  };
	  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$5] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var SPECIES$2 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$2]) == undefined ? defaultConstructor : aConstructor(S);
	};

	var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(engineUserAgent);

	var engineIsNode = classofRaw(global$1.process) == 'process';

	var set = global$1.setImmediate;
	var clear = global$1.clearImmediate;
	var process$2 = global$1.process;
	var Dispatch = global$1.Dispatch;
	var Function$2 = global$1.Function;
	var MessageChannel = global$1.MessageChannel;
	var String$1 = global$1.String;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var location, defer, channel, port;

	try {
	  // Deno throws a ReferenceError on `location` access without `--location` flag
	  location = global$1.location;
	} catch (error) { /* empty */ }

	var run = function (id) {
	  if (hasOwnProperty_1(queue, id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global$1.postMessage(String$1(id), location.protocol + '//' + location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set || !clear) {
	  set = function setImmediate(fn) {
	    var args = arraySlice$1(arguments, 1);
	    queue[++counter] = function () {
	      functionApply(isCallable(fn) ? fn : Function$2(fn), undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (engineIsNode) {
	    defer = function (id) {
	      process$2.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !engineIsIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext(port.postMessage, port);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    global$1.addEventListener &&
	    isCallable(global$1.postMessage) &&
	    !global$1.importScripts &&
	    location && location.protocol !== 'file:' &&
	    !fails(post)
	  ) {
	    defer = post;
	    global$1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task$1 = {
	  set: set,
	  clear: clear
	};

	var engineIsIosPebble = /ipad|iphone|ipod/i.test(engineUserAgent) && global$1.Pebble !== undefined;

	var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(engineUserAgent);

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var macrotask = task$1.set;





	var MutationObserver = global$1.MutationObserver || global$1.WebKitMutationObserver;
	var document$2 = global$1.document;
	var process$1 = global$1.process;
	var Promise$1 = global$1.Promise;
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$1(global$1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify$1, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (engineIsNode && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify$1();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
	  if (!engineIsIos && !engineIsNode && !engineIsWebosWebkit && MutationObserver && document$2) {
	    toggle = true;
	    node = document$2.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify$1 = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (!engineIsIosPebble && Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    // workaround of WebKit ~ iOS Safari 10.1 bug
	    promise.constructor = Promise$1;
	    then = functionBindContext(promise.then, promise);
	    notify$1 = function () {
	      then(flush);
	    };
	  // Node.js without promises
	  } else if (engineIsNode) {
	    notify$1 = function () {
	      process$1.nextTick(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    // strange IE + webpack dev server bug - use .bind(global)
	    macrotask = functionBindContext(macrotask, global$1);
	    notify$1 = function () {
	      macrotask(flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify$1();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aCallable(resolve);
	  this.reject = aCallable(reject);
	};

	// `NewPromiseCapability` abstract operation
	// https://tc39.es/ecma262/#sec-newpromisecapability
	var f = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability$1 = {
		f: f
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability$1.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global$1.console;
	  if (console && console.error) {
	    arguments.length == 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var engineIsBrowser = typeof window == 'object';

	var task = task$1.set;












	var SPECIES$1 = wellKnownSymbol('species');
	var PROMISE = 'Promise';

	var getInternalState$2 = internalState.getterFor(PROMISE);
	var setInternalState$3 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var NativePromisePrototype = nativePromiseConstructor && nativePromiseConstructor.prototype;
	var PromiseConstructor = nativePromiseConstructor;
	var PromisePrototype = NativePromisePrototype;
	var TypeError$8 = global$1.TypeError;
	var document$1 = global$1.document;
	var process = global$1.process;
	var newPromiseCapability = newPromiseCapability$1.f;
	var newGenericPromiseCapability = newPromiseCapability;

	var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$1.dispatchEvent);
	var NATIVE_REJECTION_EVENT = isCallable(global$1.PromiseRejectionEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var SUBCLASSING = false;

	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$4 = isForced_1(PROMISE, function () {
	  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
	  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
	  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	  // We can't detect it synchronously, so just check versions
	  if (!GLOBAL_CORE_JS_PROMISE && engineV8Version === 66) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = new PromiseConstructor(function (resolve) { resolve(1); });
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$1] = FakePromise;
	  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
	  if (!SUBCLASSING) return true;
	  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	  return !GLOBAL_CORE_JS_PROMISE && engineIsBrowser && !NATIVE_REJECTION_EVENT;
	});

	var INCORRECT_ITERATION$1 = FORCED$4 || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && isCallable(then = it.then) ? then : false;
	};

	var notify = function (state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$8('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            functionCall(then, result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$1.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global$1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (!NATIVE_REJECTION_EVENT && (handler = global$1['on' + name])) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (state) {
	  functionCall(task, global$1, function () {
	    var promise = state.facade;
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (engineIsNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = engineIsNode || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (state) {
	  functionCall(task, global$1, function () {
	    var promise = state.facade;
	    if (engineIsNode) {
	      process.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind$1 = function (fn, state, unwrap) {
	  return function (value) {
	    fn(state, value, unwrap);
	  };
	};

	var internalReject = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify(state, true);
	};

	var internalResolve = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (state.facade === value) throw TypeError$8("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          functionCall(then, value,
	            bind$1(internalResolve, wrapper, state),
	            bind$1(internalReject, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify(state, false);
	    }
	  } catch (error) {
	    internalReject({ done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$4) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromisePrototype);
	    aCallable(executor);
	    functionCall(Internal, this);
	    var state = getInternalState$2(this);
	    try {
	      executor(bind$1(internalResolve, state), bind$1(internalReject, state));
	    } catch (error) {
	      internalReject(state, error);
	    }
	  };
	  PromisePrototype = PromiseConstructor.prototype;
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  Internal = function Promise(executor) {
	    setInternalState$3(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromisePrototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reactions = state.reactions;
	      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
	      reaction.fail = isCallable(onRejected) && onRejected;
	      reaction.domain = engineIsNode ? process.domain : undefined;
	      state.parent = true;
	      reactions[reactions.length] = reaction;
	      if (state.state != PENDING) notify(state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$2(promise);
	    this.promise = promise;
	    this.resolve = bind$1(internalResolve, state);
	    this.reject = bind$1(internalReject, state);
	  };
	  newPromiseCapability$1.f = newPromiseCapability = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if (isCallable(nativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
	    nativeThen = NativePromisePrototype.then;

	    if (!SUBCLASSING) {
	      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
	      redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
	        var that = this;
	        return new PromiseConstructor(function (resolve, reject) {
	          functionCall(nativeThen, that, resolve, reject);
	        }).then(onFulfilled, onRejected);
	      // https://github.com/zloirock/core-js/issues/640
	      }, { unsafe: true });

	      // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
	      redefine(NativePromisePrototype, 'catch', PromisePrototype['catch'], { unsafe: true });
	    }

	    // make `.constructor === Promise` work for native promise-based APIs
	    try {
	      delete NativePromisePrototype.constructor;
	    } catch (error) { /* empty */ }

	    // make `instanceof Promise` work for native promise-based APIs
	    if (objectSetPrototypeOf) {
	      objectSetPrototypeOf(NativePromisePrototype, PromisePrototype);
	    }
	  }
	}

	_export({ global: true, wrap: true, forced: FORCED$4 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED$4 }, {
	  // `Promise.reject` method
	  // https://tc39.es/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    functionCall(capability.reject, undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced: FORCED$4 }, {
	  // `Promise.resolve` method
	  // https://tc39.es/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve(this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION$1 }, {
	  // `Promise.all` method
	  // https://tc39.es/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aCallable(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        functionCall($promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.es/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aCallable(C.resolve);
	      iterate(iterable, function (promise) {
	        functionCall($promiseResolve, C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var charAt$6 = functionUncurryThis(''.charAt);
	var charCodeAt$1 = functionUncurryThis(''.charCodeAt);
	var stringSlice$5 = functionUncurryThis(''.slice);

	var createMethod$3 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = toString$1(requireObjectCoercible($this));
	    var position = toIntegerOrInfinity(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = charCodeAt$1(S, position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING
	          ? charAt$6(S, position)
	          : first
	        : CONVERT_TO_STRING
	          ? stringSlice$5(S, position, position + 2)
	          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$3(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$3(true)
	};

	var charAt$5 = stringMultibyte.charAt;




	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$2 = internalState.set;
	var getInternalState$1 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$2(this, {
	    type: STRING_ITERATOR,
	    string: toString$1(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$1(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt$5(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	var ITERATOR$4 = wellKnownSymbol('iterator');
	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	var ArrayValues = es_array_iterator.values;

	var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
	  if (CollectionPrototype) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype[ITERATOR$4] !== ArrayValues) try {
	      createNonEnumerableProperty(CollectionPrototype, ITERATOR$4, ArrayValues);
	    } catch (error) {
	      CollectionPrototype[ITERATOR$4] = ArrayValues;
	    }
	    if (!CollectionPrototype[TO_STRING_TAG]) {
	      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
	    }
	    if (domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
	        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
	      }
	    }
	  }
	};

	for (var COLLECTION_NAME in domIterables) {
	  handlePrototype(global$1[COLLECTION_NAME] && global$1[COLLECTION_NAME].prototype, COLLECTION_NAME);
	}

	handlePrototype(domTokenListPrototype, 'DOMTokenList');

	var $map = arrayIteration.map;


	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map');

	// `Array.prototype.map` method
	// https://tc39.es/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var DatePrototype = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING$1 = 'toString';
	var un$DateToString = functionUncurryThis(DatePrototype[TO_STRING$1]);
	var getTime = functionUncurryThis(DatePrototype.getTime);

	// `Date.prototype.toString` method
	// https://tc39.es/ecma262/#sec-date.prototype.tostring
	if (String(new Date(NaN)) != INVALID_DATE) {
	  redefine(DatePrototype, TO_STRING$1, function toString() {
	    var value = getTime(this);
	    // eslint-disable-next-line no-self-compare -- NaN check
	    return value === value ? un$DateToString(this) : INVALID_DATE;
	  });
	}

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	var PROPER_FUNCTION_NAME$1 = functionName.PROPER;







	var TO_STRING = 'toString';
	var RegExpPrototype$1 = RegExp.prototype;
	var n$ToString = RegExpPrototype$1[TO_STRING];
	var getFlags = functionUncurryThis(regexpFlags);

	var NOT_GENERIC = fails(function () { return n$ToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = PROPER_FUNCTION_NAME$1 && n$ToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject(this);
	    var p = toString$1(R.source);
	    var rf = R.flags;
	    var f = toString$1(rf === undefined && objectIsPrototypeOf(RegExpPrototype$1, R) && !('flags' in RegExpPrototype$1) ? getFlags(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	function _isPlaceholder(a) {
	  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
	}

	/**
	 * Optimized internal one-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */

	function _curry1(fn) {
	  return function f1(a) {
	    if (arguments.length === 0 || _isPlaceholder(a)) {
	      return f1;
	    } else {
	      return fn.apply(this, arguments);
	    }
	  };
	}

	/**
	 * Optimized internal two-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */

	function _curry2(fn) {
	  return function f2(a, b) {
	    switch (arguments.length) {
	      case 0:
	        return f2;

	      case 1:
	        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
	          return fn(a, _b);
	        });

	      default:
	        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
	          return fn(_a, b);
	        }) : _isPlaceholder(b) ? _curry1(function (_b) {
	          return fn(a, _b);
	        }) : fn(a, b);
	    }
	  };
	}

	function _arity(n, fn) {
	  /* eslint-disable no-unused-vars */
	  switch (n) {
	    case 0:
	      return function () {
	        return fn.apply(this, arguments);
	      };

	    case 1:
	      return function (a0) {
	        return fn.apply(this, arguments);
	      };

	    case 2:
	      return function (a0, a1) {
	        return fn.apply(this, arguments);
	      };

	    case 3:
	      return function (a0, a1, a2) {
	        return fn.apply(this, arguments);
	      };

	    case 4:
	      return function (a0, a1, a2, a3) {
	        return fn.apply(this, arguments);
	      };

	    case 5:
	      return function (a0, a1, a2, a3, a4) {
	        return fn.apply(this, arguments);
	      };

	    case 6:
	      return function (a0, a1, a2, a3, a4, a5) {
	        return fn.apply(this, arguments);
	      };

	    case 7:
	      return function (a0, a1, a2, a3, a4, a5, a6) {
	        return fn.apply(this, arguments);
	      };

	    case 8:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	        return fn.apply(this, arguments);
	      };

	    case 9:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	        return fn.apply(this, arguments);
	      };

	    case 10:
	      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return fn.apply(this, arguments);
	      };

	    default:
	      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
	  }
	}

	/**
	 * Internal curryN function.
	 *
	 * @private
	 * @category Function
	 * @param {Number} length The arity of the curried function.
	 * @param {Array} received An array of arguments received thus far.
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */

	function _curryN(length, received, fn) {
	  return function () {
	    var combined = [];
	    var argsIdx = 0;
	    var left = length;
	    var combinedIdx = 0;

	    while (combinedIdx < received.length || argsIdx < arguments.length) {
	      var result;

	      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
	        result = received[combinedIdx];
	      } else {
	        result = arguments[argsIdx];
	        argsIdx += 1;
	      }

	      combined[combinedIdx] = result;

	      if (!_isPlaceholder(result)) {
	        left -= 1;
	      }

	      combinedIdx += 1;
	    }

	    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
	  };
	}

	/**
	 * Returns a curried equivalent of the provided function, with the specified
	 * arity. The curried function has two unusual capabilities. First, its
	 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
	 * following are equivalent:
	 *
	 *   - `g(1)(2)(3)`
	 *   - `g(1)(2, 3)`
	 *   - `g(1, 2)(3)`
	 *   - `g(1, 2, 3)`
	 *
	 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
	 * "gaps", allowing partial application of any combination of arguments,
	 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
	 * the following are equivalent:
	 *
	 *   - `g(1, 2, 3)`
	 *   - `g(_, 2, 3)(1)`
	 *   - `g(_, _, 3)(1)(2)`
	 *   - `g(_, _, 3)(1, 2)`
	 *   - `g(_, 2)(1)(3)`
	 *   - `g(_, 2)(1, 3)`
	 *   - `g(_, 2)(_, 3)(1)`
	 *
	 * @func
	 * @memberOf R
	 * @since v0.5.0
	 * @category Function
	 * @sig Number -> (* -> a) -> (* -> a)
	 * @param {Number} length The arity for the returned function.
	 * @param {Function} fn The function to curry.
	 * @return {Function} A new, curried function.
	 * @see R.curry
	 * @example
	 *
	 *      const sumArgs = (...args) => R.sum(args);
	 *
	 *      const curriedAddFourNumbers = R.curryN(4, sumArgs);
	 *      const f = curriedAddFourNumbers(1, 2);
	 *      const g = f(3);
	 *      g(4); //=> 10
	 */

	var curryN =
	/*#__PURE__*/
	_curry2(function curryN(length, fn) {
	  if (length === 1) {
	    return _curry1(fn);
	  }

	  return _arity(length, _curryN(length, [], fn));
	});

	/**
	 * Optimized internal three-arity curry function.
	 *
	 * @private
	 * @category Function
	 * @param {Function} fn The function to curry.
	 * @return {Function} The curried function.
	 */

	function _curry3(fn) {
	  return function f3(a, b, c) {
	    switch (arguments.length) {
	      case 0:
	        return f3;

	      case 1:
	        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
	          return fn(a, _b, _c);
	        });

	      case 2:
	        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
	          return fn(_a, b, _c);
	        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
	          return fn(a, _b, _c);
	        }) : _curry1(function (_c) {
	          return fn(a, b, _c);
	        });

	      default:
	        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
	          return fn(_a, _b, c);
	        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
	          return fn(_a, b, _c);
	        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
	          return fn(a, _b, _c);
	        }) : _isPlaceholder(a) ? _curry1(function (_a) {
	          return fn(_a, b, c);
	        }) : _isPlaceholder(b) ? _curry1(function (_b) {
	          return fn(a, _b, c);
	        }) : _isPlaceholder(c) ? _curry1(function (_c) {
	          return fn(a, b, _c);
	        }) : fn(a, b, c);
	    }
	  };
	}

	/**
	 * Tests whether or not an object is an array.
	 *
	 * @private
	 * @param {*} val The object to test.
	 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
	 * @example
	 *
	 *      _isArray([]); //=> true
	 *      _isArray(null); //=> false
	 *      _isArray({}); //=> false
	 */
	var _isArray = Array.isArray || function _isArray(val) {
	  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
	};

	function _isTransformer(obj) {
	  return obj != null && typeof obj['@@transducer/step'] === 'function';
	}

	/**
	 * Returns a function that dispatches with different strategies based on the
	 * object in list position (last argument). If it is an array, executes [fn].
	 * Otherwise, if it has a function with one of the given method names, it will
	 * execute that function (functor case). Otherwise, if it is a transformer,
	 * uses transducer [xf] to return a new transformer (transducer case).
	 * Otherwise, it will default to executing [fn].
	 *
	 * @private
	 * @param {Array} methodNames properties to check for a custom implementation
	 * @param {Function} xf transducer to initialize if object is transformer
	 * @param {Function} fn default ramda implementation
	 * @return {Function} A function that dispatches on object in list position
	 */

	function _dispatchable(methodNames, xf, fn) {
	  return function () {
	    if (arguments.length === 0) {
	      return fn();
	    }

	    var args = Array.prototype.slice.call(arguments, 0);
	    var obj = args.pop();

	    if (!_isArray(obj)) {
	      var idx = 0;

	      while (idx < methodNames.length) {
	        if (typeof obj[methodNames[idx]] === 'function') {
	          return obj[methodNames[idx]].apply(obj, args);
	        }

	        idx += 1;
	      }

	      if (_isTransformer(obj)) {
	        var transducer = xf.apply(null, args);
	        return transducer(obj);
	      }
	    }

	    return fn.apply(this, arguments);
	  };
	}

	function _reduced(x) {
	  return x && x['@@transducer/reduced'] ? x : {
	    '@@transducer/value': x,
	    '@@transducer/reduced': true
	  };
	}

	var _xfBase = {
	  init: function () {
	    return this.xf['@@transducer/init']();
	  },
	  result: function (result) {
	    return this.xf['@@transducer/result'](result);
	  }
	};

	function _map(fn, functor) {
	  var idx = 0;
	  var len = functor.length;
	  var result = Array(len);

	  while (idx < len) {
	    result[idx] = fn(functor[idx]);
	    idx += 1;
	  }

	  return result;
	}

	function _isString(x) {
	  return Object.prototype.toString.call(x) === '[object String]';
	}

	/**
	 * Tests whether or not an object is similar to an array.
	 *
	 * @private
	 * @category Type
	 * @category List
	 * @sig * -> Boolean
	 * @param {*} x The object to test.
	 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
	 * @example
	 *
	 *      _isArrayLike([]); //=> true
	 *      _isArrayLike(true); //=> false
	 *      _isArrayLike({}); //=> false
	 *      _isArrayLike({length: 10}); //=> false
	 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
	 */

	var _isArrayLike =
	/*#__PURE__*/
	_curry1(function isArrayLike(x) {
	  if (_isArray(x)) {
	    return true;
	  }

	  if (!x) {
	    return false;
	  }

	  if (typeof x !== 'object') {
	    return false;
	  }

	  if (_isString(x)) {
	    return false;
	  }

	  if (x.nodeType === 1) {
	    return !!x.length;
	  }

	  if (x.length === 0) {
	    return true;
	  }

	  if (x.length > 0) {
	    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
	  }

	  return false;
	});

	var XWrap =
	/*#__PURE__*/
	function () {
	  function XWrap(fn) {
	    this.f = fn;
	  }

	  XWrap.prototype['@@transducer/init'] = function () {
	    throw new Error('init not implemented on XWrap');
	  };

	  XWrap.prototype['@@transducer/result'] = function (acc) {
	    return acc;
	  };

	  XWrap.prototype['@@transducer/step'] = function (acc, x) {
	    return this.f(acc, x);
	  };

	  return XWrap;
	}();

	function _xwrap(fn) {
	  return new XWrap(fn);
	}

	/**
	 * Creates a function that is bound to a context.
	 * Note: `R.bind` does not provide the additional argument-binding capabilities of
	 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
	 *
	 * @func
	 * @memberOf R
	 * @since v0.6.0
	 * @category Function
	 * @category Object
	 * @sig (* -> *) -> {*} -> (* -> *)
	 * @param {Function} fn The function to bind to context
	 * @param {Object} thisObj The context to bind `fn` to
	 * @return {Function} A function that will execute in the context of `thisObj`.
	 * @see R.partial
	 * @example
	 *
	 *      const log = R.bind(console.log, console);
	 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
	 *      // logs {a: 2}
	 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
	 */

	var bind =
	/*#__PURE__*/
	_curry2(function bind(fn, thisObj) {
	  return _arity(fn.length, function () {
	    return fn.apply(thisObj, arguments);
	  });
	});

	function _arrayReduce(xf, acc, list) {
	  var idx = 0;
	  var len = list.length;

	  while (idx < len) {
	    acc = xf['@@transducer/step'](acc, list[idx]);

	    if (acc && acc['@@transducer/reduced']) {
	      acc = acc['@@transducer/value'];
	      break;
	    }

	    idx += 1;
	  }

	  return xf['@@transducer/result'](acc);
	}

	function _iterableReduce(xf, acc, iter) {
	  var step = iter.next();

	  while (!step.done) {
	    acc = xf['@@transducer/step'](acc, step.value);

	    if (acc && acc['@@transducer/reduced']) {
	      acc = acc['@@transducer/value'];
	      break;
	    }

	    step = iter.next();
	  }

	  return xf['@@transducer/result'](acc);
	}

	function _methodReduce(xf, acc, obj, methodName) {
	  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
	}

	var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';
	function _reduce(fn, acc, list) {
	  if (typeof fn === 'function') {
	    fn = _xwrap(fn);
	  }

	  if (_isArrayLike(list)) {
	    return _arrayReduce(fn, acc, list);
	  }

	  if (typeof list['fantasy-land/reduce'] === 'function') {
	    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
	  }

	  if (list[symIterator] != null) {
	    return _iterableReduce(fn, acc, list[symIterator]());
	  }

	  if (typeof list.next === 'function') {
	    return _iterableReduce(fn, acc, list);
	  }

	  if (typeof list.reduce === 'function') {
	    return _methodReduce(fn, acc, list, 'reduce');
	  }

	  throw new TypeError('reduce: list must be array or iterable');
	}

	var XMap =
	/*#__PURE__*/
	function () {
	  function XMap(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }

	  XMap.prototype['@@transducer/init'] = _xfBase.init;
	  XMap.prototype['@@transducer/result'] = _xfBase.result;

	  XMap.prototype['@@transducer/step'] = function (result, input) {
	    return this.xf['@@transducer/step'](result, this.f(input));
	  };

	  return XMap;
	}();

	var _xmap =
	/*#__PURE__*/
	_curry2(function _xmap(f, xf) {
	  return new XMap(f, xf);
	});

	function _has(prop, obj) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var toString = Object.prototype.toString;

	var _isArguments =
	/*#__PURE__*/
	function () {
	  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
	    return toString.call(x) === '[object Arguments]';
	  } : function _isArguments(x) {
	    return _has('callee', x);
	  };
	}();

	var hasEnumBug = !
	/*#__PURE__*/
	{
	  toString: null
	}.propertyIsEnumerable('toString');
	var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug

	var hasArgsEnumBug =
	/*#__PURE__*/
	function () {

	  return arguments.propertyIsEnumerable('length');
	}();

	var contains = function contains(list, item) {
	  var idx = 0;

	  while (idx < list.length) {
	    if (list[idx] === item) {
	      return true;
	    }

	    idx += 1;
	  }

	  return false;
	};
	/**
	 * Returns a list containing the names of all the enumerable own properties of
	 * the supplied object.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {k: v} -> [k]
	 * @param {Object} obj The object to extract properties from
	 * @return {Array} An array of the object's own properties.
	 * @see R.keysIn, R.values
	 * @example
	 *
	 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
	 */


	var keys$1 = typeof Object.keys === 'function' && !hasArgsEnumBug ?
	/*#__PURE__*/
	_curry1(function keys(obj) {
	  return Object(obj) !== obj ? [] : Object.keys(obj);
	}) :
	/*#__PURE__*/
	_curry1(function keys(obj) {
	  if (Object(obj) !== obj) {
	    return [];
	  }

	  var prop, nIdx;
	  var ks = [];

	  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);

	  for (prop in obj) {
	    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
	      ks[ks.length] = prop;
	    }
	  }

	  if (hasEnumBug) {
	    nIdx = nonEnumerableProps.length - 1;

	    while (nIdx >= 0) {
	      prop = nonEnumerableProps[nIdx];

	      if (_has(prop, obj) && !contains(ks, prop)) {
	        ks[ks.length] = prop;
	      }

	      nIdx -= 1;
	    }
	  }

	  return ks;
	});

	/**
	 * Takes a function and
	 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
	 * applies the function to each of the functor's values, and returns
	 * a functor of the same shape.
	 *
	 * Ramda provides suitable `map` implementations for `Array` and `Object`,
	 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
	 *
	 * Dispatches to the `map` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * Also treats functions as functors and will compose them together.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Functor f => (a -> b) -> f a -> f b
	 * @param {Function} fn The function to be called on every element of the input `list`.
	 * @param {Array} list The list to be iterated over.
	 * @return {Array} The new list.
	 * @see R.transduce, R.addIndex
	 * @example
	 *
	 *      const double = x => x * 2;
	 *
	 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
	 *
	 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
	 * @symb R.map(f, [a, b]) = [f(a), f(b)]
	 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
	 * @symb R.map(f, functor_o) = functor_o.map(f)
	 */

	var map =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {
	  switch (Object.prototype.toString.call(functor)) {
	    case '[object Function]':
	      return curryN(functor.length, function () {
	        return fn.call(this, functor.apply(this, arguments));
	      });

	    case '[object Object]':
	      return _reduce(function (acc, key) {
	        acc[key] = fn(functor[key]);
	        return acc;
	      }, {}, keys$1(functor));

	    default:
	      return _map(fn, functor);
	  }
	}));

	/**
	 * Determine if the passed argument is an integer.
	 *
	 * @private
	 * @param {*} n
	 * @category Type
	 * @return {Boolean}
	 */
	var _isInteger = Number.isInteger || function _isInteger(n) {
	  return n << 0 === n;
	};

	/**
	 * Returns the nth element of the given list or string. If n is negative the
	 * element at index length + n is returned.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Number -> [a] -> a | Undefined
	 * @sig Number -> String -> String
	 * @param {Number} offset
	 * @param {*} list
	 * @return {*}
	 * @example
	 *
	 *      const list = ['foo', 'bar', 'baz', 'quux'];
	 *      R.nth(1, list); //=> 'bar'
	 *      R.nth(-1, list); //=> 'quux'
	 *      R.nth(-99, list); //=> undefined
	 *
	 *      R.nth(2, 'abc'); //=> 'c'
	 *      R.nth(3, 'abc'); //=> ''
	 * @symb R.nth(-1, [a, b, c]) = c
	 * @symb R.nth(0, [a, b, c]) = a
	 * @symb R.nth(1, [a, b, c]) = b
	 */

	var nth =
	/*#__PURE__*/
	_curry2(function nth(offset, list) {
	  var idx = offset < 0 ? list.length + offset : offset;
	  return _isString(list) ? list.charAt(idx) : list[idx];
	});

	/**
	 * Retrieves the values at given paths of an object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.27.1
	 * @category Object
	 * @typedefn Idx = [String | Int]
	 * @sig [Idx] -> {a} -> [a | Undefined]
	 * @param {Array} pathsArray The array of paths to be fetched.
	 * @param {Object} obj The object to retrieve the nested properties from.
	 * @return {Array} A list consisting of values at paths specified by "pathsArray".
	 * @see R.path
	 * @example
	 *
	 *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]
	 *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]
	 */

	var paths =
	/*#__PURE__*/
	_curry2(function paths(pathsArray, obj) {
	  return pathsArray.map(function (paths) {
	    var val = obj;
	    var idx = 0;
	    var p;

	    while (idx < paths.length) {
	      if (val == null) {
	        return;
	      }

	      p = paths[idx];
	      val = _isInteger(p) ? nth(p, val) : val[p];
	      idx += 1;
	    }

	    return val;
	  });
	});

	/**
	 * Retrieve the value at a given path.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.2.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @sig [Idx] -> {a} -> a | Undefined
	 * @param {Array} path The path to use.
	 * @param {Object} obj The object to retrieve the nested property from.
	 * @return {*} The data at `path`.
	 * @see R.prop, R.nth
	 * @example
	 *
	 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
	 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
	 *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1
	 *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2
	 */

	var path =
	/*#__PURE__*/
	_curry2(function path(pathAr, obj) {
	  return paths([pathAr], obj)[0];
	});

	/**
	 * Returns a function that when supplied an object returns the indicated
	 * property of that object, if it exists.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @typedefn Idx = String | Int
	 * @sig Idx -> {s: a} -> a | Undefined
	 * @param {String|Number} p The property name or array index
	 * @param {Object} obj The object to query
	 * @return {*} The value at `obj.p`.
	 * @see R.path, R.nth
	 * @example
	 *
	 *      R.prop('x', {x: 100}); //=> 100
	 *      R.prop('x', {}); //=> undefined
	 *      R.prop(0, [100]); //=> 100
	 *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4
	 */

	var prop =
	/*#__PURE__*/
	_curry2(function prop(p, obj) {
	  return path([p], obj);
	});

	/**
	 * Returns a new list by plucking the same named property off all objects in
	 * the list supplied.
	 *
	 * `pluck` will work on
	 * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
	 * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Functor f => k -> f {k: v} -> f v
	 * @param {Number|String} key The key name to pluck off of each object.
	 * @param {Array} f The array or functor to consider.
	 * @return {Array} The list of values for the given key.
	 * @see R.props
	 * @example
	 *
	 *      var getAges = R.pluck('age');
	 *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]
	 *
	 *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]
	 *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
	 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
	 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
	 */

	var pluck =
	/*#__PURE__*/
	_curry2(function pluck(p, list) {
	  return map(prop(p), list);
	});

	/**
	 * Returns a single item by iterating through the list, successively calling
	 * the iterator function and passing it an accumulator value and the current
	 * value from the array, and then passing the result to the next call.
	 *
	 * The iterator function receives two values: *(acc, value)*. It may use
	 * [`R.reduced`](#reduced) to shortcut the iteration.
	 *
	 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
	 * is *(value, acc)*.
	 *
	 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
	 * arrays), unlike the native `Array.prototype.reduce` method. For more details
	 * on this behavior, see:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
	 *
	 * Dispatches to the `reduce` method of the third argument, if present. When
	 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
	 * shortcuting, as this is not implemented by `reduce`.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig ((a, b) -> a) -> a -> [b] -> a
	 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	 *        current element from the array.
	 * @param {*} acc The accumulator value.
	 * @param {Array} list The list to iterate over.
	 * @return {*} The final, accumulated value.
	 * @see R.reduced, R.addIndex, R.reduceRight
	 * @example
	 *
	 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
	 *      //          -               -10
	 *      //         / \              / \
	 *      //        -   4           -6   4
	 *      //       / \              / \
	 *      //      -   3   ==>     -3   3
	 *      //     / \              / \
	 *      //    -   2           -1   2
	 *      //   / \              / \
	 *      //  0   1            0   1
	 *
	 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
	 */

	var reduce =
	/*#__PURE__*/
	_curry3(_reduce);

	/**
	 * `_makeFlat` is a helper function that returns a one-level or fully recursive
	 * function based on the flag passed in.
	 *
	 * @private
	 */

	function _makeFlat(recursive) {
	  return function flatt(list) {
	    var value, jlen, j;
	    var result = [];
	    var idx = 0;
	    var ilen = list.length;

	    while (idx < ilen) {
	      if (_isArrayLike(list[idx])) {
	        value = recursive ? flatt(list[idx]) : list[idx];
	        j = 0;
	        jlen = value.length;

	        while (j < jlen) {
	          result[result.length] = value[j];
	          j += 1;
	        }
	      } else {
	        result[result.length] = list[idx];
	      }

	      idx += 1;
	    }

	    return result;
	  };
	}

	function _cloneRegExp(pattern) {
	  return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
	}

	/**
	 * Gives a single-word string description of the (native) type of a value,
	 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
	 * attempt to distinguish user Object types any further, reporting them all as
	 * 'Object'.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Type
	 * @sig (* -> {*}) -> String
	 * @param {*} val The value to test
	 * @return {String}
	 * @example
	 *
	 *      R.type({}); //=> "Object"
	 *      R.type(1); //=> "Number"
	 *      R.type(false); //=> "Boolean"
	 *      R.type('s'); //=> "String"
	 *      R.type(null); //=> "Null"
	 *      R.type([]); //=> "Array"
	 *      R.type(/[A-z]/); //=> "RegExp"
	 *      R.type(() => {}); //=> "Function"
	 *      R.type(undefined); //=> "Undefined"
	 */

	var type =
	/*#__PURE__*/
	_curry1(function type(val) {
	  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
	});

	/**
	 * Copies an object.
	 *
	 * @private
	 * @param {*} value The value to be copied
	 * @param {Array} refFrom Array containing the source references
	 * @param {Array} refTo Array containing the copied source references
	 * @param {Boolean} deep Whether or not to perform deep cloning.
	 * @return {*} The copied value.
	 */

	function _clone(value, refFrom, refTo, deep) {
	  var copy = function copy(copiedValue) {
	    var len = refFrom.length;
	    var idx = 0;

	    while (idx < len) {
	      if (value === refFrom[idx]) {
	        return refTo[idx];
	      }

	      idx += 1;
	    }

	    refFrom[idx + 1] = value;
	    refTo[idx + 1] = copiedValue;

	    for (var key in value) {
	      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
	    }

	    return copiedValue;
	  };

	  switch (type(value)) {
	    case 'Object':
	      return copy({});

	    case 'Array':
	      return copy([]);

	    case 'Date':
	      return new Date(value.valueOf());

	    case 'RegExp':
	      return _cloneRegExp(value);

	    default:
	      return value;
	  }
	}

	/**
	 * Creates a deep copy of the value which may contain (nested) `Array`s and
	 * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
	 * assigned by reference rather than copied
	 *
	 * Dispatches to a `clone` method if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig {*} -> {*}
	 * @param {*} value The object or array to clone
	 * @return {*} A deeply cloned copy of `val`
	 * @example
	 *
	 *      const objects = [{}, {}, {}];
	 *      const objectsClone = R.clone(objects);
	 *      objects === objectsClone; //=> false
	 *      objects[0] === objectsClone[0]; //=> false
	 */

	var clone =
	/*#__PURE__*/
	_curry1(function clone(value) {
	  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);
	});

	function _pipe(f, g) {
	  return function () {
	    return g.call(this, f.apply(this, arguments));
	  };
	}

	/**
	 * This checks whether a function has a [methodname] function. If it isn't an
	 * array it will execute that function otherwise it will default to the ramda
	 * implementation.
	 *
	 * @private
	 * @param {Function} fn ramda implemtation
	 * @param {String} methodname property to check for a custom implementation
	 * @return {Object} Whatever the return value of the method is.
	 */

	function _checkForMethod(methodname, fn) {
	  return function () {
	    var length = arguments.length;

	    if (length === 0) {
	      return fn();
	    }

	    var obj = arguments[length - 1];
	    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
	  };
	}

	/**
	 * Returns the elements of the given list or string (or object with a `slice`
	 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
	 *
	 * Dispatches to the `slice` method of the third argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.4
	 * @category List
	 * @sig Number -> Number -> [a] -> [a]
	 * @sig Number -> Number -> String -> String
	 * @param {Number} fromIndex The start index (inclusive).
	 * @param {Number} toIndex The end index (exclusive).
	 * @param {*} list
	 * @return {*}
	 * @example
	 *
	 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
	 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
	 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
	 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
	 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
	 */

	var slice =
	/*#__PURE__*/
	_curry3(
	/*#__PURE__*/
	_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
	  return Array.prototype.slice.call(list, fromIndex, toIndex);
	}));

	/**
	 * Returns all but the first element of the given list or string (or object
	 * with a `tail` method).
	 *
	 * Dispatches to the `slice` method of the first argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [a]
	 * @sig String -> String
	 * @param {*} list
	 * @return {*}
	 * @see R.head, R.init, R.last
	 * @example
	 *
	 *      R.tail([1, 2, 3]);  //=> [2, 3]
	 *      R.tail([1, 2]);     //=> [2]
	 *      R.tail([1]);        //=> []
	 *      R.tail([]);         //=> []
	 *
	 *      R.tail('abc');  //=> 'bc'
	 *      R.tail('ab');   //=> 'b'
	 *      R.tail('a');    //=> ''
	 *      R.tail('');     //=> ''
	 */

	var tail =
	/*#__PURE__*/
	_curry1(
	/*#__PURE__*/
	_checkForMethod('tail',
	/*#__PURE__*/
	slice(1, Infinity)));

	/**
	 * Performs left-to-right function composition. The first argument may have
	 * any arity; the remaining arguments must be unary.
	 *
	 * In some libraries this function is named `sequence`.
	 *
	 * **Note:** The result of pipe is not automatically curried.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
	 * @param {...Function} functions
	 * @return {Function}
	 * @see R.compose
	 * @example
	 *
	 *      const f = R.pipe(Math.pow, R.negate, R.inc);
	 *
	 *      f(3, 4); // -(3^4) + 1
	 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
	 */

	function pipe() {
	  if (arguments.length === 0) {
	    throw new Error('pipe requires at least one argument');
	  }

	  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
	}

	function _identity(x) {
	  return x;
	}

	/**
	 * A function that does nothing but return the parameter supplied to it. Good
	 * as a default or placeholder function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Function
	 * @sig a -> a
	 * @param {*} x The value to return.
	 * @return {*} The input value, `x`.
	 * @example
	 *
	 *      R.identity(1); //=> 1
	 *
	 *      const obj = {};
	 *      R.identity(obj) === obj; //=> true
	 * @symb R.identity(a) = a
	 */

	var identity =
	/*#__PURE__*/
	_curry1(_identity);

	function _arrayFromIterator(iter) {
	  var list = [];
	  var next;

	  while (!(next = iter.next()).done) {
	    list.push(next.value);
	  }

	  return list;
	}

	function _includesWith(pred, x, list) {
	  var idx = 0;
	  var len = list.length;

	  while (idx < len) {
	    if (pred(x, list[idx])) {
	      return true;
	    }

	    idx += 1;
	  }

	  return false;
	}

	function _functionName(f) {
	  // String(x => x) evaluates to "x => x", so the pattern may not match.
	  var match = String(f).match(/^function (\w*)/);
	  return match == null ? '' : match[1];
	}

	// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	function _objectIs(a, b) {
	  // SameValue algorithm
	  if (a === b) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return a !== 0 || 1 / a === 1 / b;
	  } else {
	    // Step 6.a: NaN == NaN
	    return a !== a && b !== b;
	  }
	}

	var _objectIs$1 = typeof Object.is === 'function' ? Object.is : _objectIs;

	/**
	 * private _uniqContentEquals function.
	 * That function is checking equality of 2 iterator contents with 2 assumptions
	 * - iterators lengths are the same
	 * - iterators values are unique
	 *
	 * false-positive result will be returned for comparision of, e.g.
	 * - [1,2,3] and [1,2,3,4]
	 * - [1,1,1] and [1,2,3]
	 * */

	function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
	  var a = _arrayFromIterator(aIterator);

	  var b = _arrayFromIterator(bIterator);

	  function eq(_a, _b) {
	    return _equals(_a, _b, stackA.slice(), stackB.slice());
	  } // if *a* array contains any element that is not included in *b*


	  return !_includesWith(function (b, aItem) {
	    return !_includesWith(eq, aItem, b);
	  }, b, a);
	}

	function _equals(a, b, stackA, stackB) {
	  if (_objectIs$1(a, b)) {
	    return true;
	  }

	  var typeA = type(a);

	  if (typeA !== type(b)) {
	    return false;
	  }

	  if (a == null || b == null) {
	    return false;
	  }

	  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
	    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
	  }

	  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
	    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
	  }

	  switch (typeA) {
	    case 'Arguments':
	    case 'Array':
	    case 'Object':
	      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
	        return a === b;
	      }

	      break;

	    case 'Boolean':
	    case 'Number':
	    case 'String':
	      if (!(typeof a === typeof b && _objectIs$1(a.valueOf(), b.valueOf()))) {
	        return false;
	      }

	      break;

	    case 'Date':
	      if (!_objectIs$1(a.valueOf(), b.valueOf())) {
	        return false;
	      }

	      break;

	    case 'Error':
	      return a.name === b.name && a.message === b.message;

	    case 'RegExp':
	      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
	        return false;
	      }

	      break;
	  }

	  var idx = stackA.length - 1;

	  while (idx >= 0) {
	    if (stackA[idx] === a) {
	      return stackB[idx] === b;
	    }

	    idx -= 1;
	  }

	  switch (typeA) {
	    case 'Map':
	      if (a.size !== b.size) {
	        return false;
	      }

	      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));

	    case 'Set':
	      if (a.size !== b.size) {
	        return false;
	      }

	      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));

	    case 'Arguments':
	    case 'Array':
	    case 'Object':
	    case 'Boolean':
	    case 'Number':
	    case 'String':
	    case 'Date':
	    case 'Error':
	    case 'RegExp':
	    case 'Int8Array':
	    case 'Uint8Array':
	    case 'Uint8ClampedArray':
	    case 'Int16Array':
	    case 'Uint16Array':
	    case 'Int32Array':
	    case 'Uint32Array':
	    case 'Float32Array':
	    case 'Float64Array':
	    case 'ArrayBuffer':
	      break;

	    default:
	      // Values of other types are only equal if identical.
	      return false;
	  }

	  var keysA = keys$1(a);

	  if (keysA.length !== keys$1(b).length) {
	    return false;
	  }

	  var extendedStackA = stackA.concat([a]);
	  var extendedStackB = stackB.concat([b]);
	  idx = keysA.length - 1;

	  while (idx >= 0) {
	    var key = keysA[idx];

	    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
	      return false;
	    }

	    idx -= 1;
	  }

	  return true;
	}

	/**
	 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
	 * cyclical data structures.
	 *
	 * Dispatches symmetrically to the `equals` methods of both arguments, if
	 * present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.15.0
	 * @category Relation
	 * @sig a -> b -> Boolean
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 * @example
	 *
	 *      R.equals(1, 1); //=> true
	 *      R.equals(1, '1'); //=> false
	 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
	 *
	 *      const a = {}; a.v = a;
	 *      const b = {}; b.v = b;
	 *      R.equals(a, b); //=> true
	 */

	var equals =
	/*#__PURE__*/
	_curry2(function equals(a, b) {
	  return _equals(a, b, [], []);
	});

	function _indexOf(list, a, idx) {
	  var inf, item; // Array.prototype.indexOf doesn't exist below IE9

	  if (typeof list.indexOf === 'function') {
	    switch (typeof a) {
	      case 'number':
	        if (a === 0) {
	          // manually crawl the list to distinguish between +0 and -0
	          inf = 1 / a;

	          while (idx < list.length) {
	            item = list[idx];

	            if (item === 0 && 1 / item === inf) {
	              return idx;
	            }

	            idx += 1;
	          }

	          return -1;
	        } else if (a !== a) {
	          // NaN
	          while (idx < list.length) {
	            item = list[idx];

	            if (typeof item === 'number' && item !== item) {
	              return idx;
	            }

	            idx += 1;
	          }

	          return -1;
	        } // non-zero numbers can utilise Set


	        return list.indexOf(a, idx);
	      // all these types can utilise Set

	      case 'string':
	      case 'boolean':
	      case 'function':
	      case 'undefined':
	        return list.indexOf(a, idx);

	      case 'object':
	        if (a === null) {
	          // null can utilise Set
	          return list.indexOf(a, idx);
	        }

	    }
	  } // anything else not covered above, defer to R.equals


	  while (idx < list.length) {
	    if (equals(list[idx], a)) {
	      return idx;
	    }

	    idx += 1;
	  }

	  return -1;
	}

	function _includes(a, list) {
	  return _indexOf(list, a, 0) >= 0;
	}

	function _filter(fn, list) {
	  var idx = 0;
	  var len = list.length;
	  var result = [];

	  while (idx < len) {
	    if (fn(list[idx])) {
	      result[result.length] = list[idx];
	    }

	    idx += 1;
	  }

	  return result;
	}

	function _isObject(x) {
	  return Object.prototype.toString.call(x) === '[object Object]';
	}

	var XFilter =
	/*#__PURE__*/
	function () {
	  function XFilter(f, xf) {
	    this.xf = xf;
	    this.f = f;
	  }

	  XFilter.prototype['@@transducer/init'] = _xfBase.init;
	  XFilter.prototype['@@transducer/result'] = _xfBase.result;

	  XFilter.prototype['@@transducer/step'] = function (result, input) {
	    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
	  };

	  return XFilter;
	}();

	var _xfilter =
	/*#__PURE__*/
	_curry2(function _xfilter(f, xf) {
	  return new XFilter(f, xf);
	});

	/**
	 * Takes a predicate and a `Filterable`, and returns a new filterable of the
	 * same type containing the members of the given filterable which satisfy the
	 * given predicate. Filterable objects include plain objects or any object
	 * that has a filter method such as `Array`.
	 *
	 * Dispatches to the `filter` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Filterable f => (a -> Boolean) -> f a -> f a
	 * @param {Function} pred
	 * @param {Array} filterable
	 * @return {Array} Filterable
	 * @see R.reject, R.transduce, R.addIndex
	 * @example
	 *
	 *      const isEven = n => n % 2 === 0;
	 *
	 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
	 *
	 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	 */

	var filter =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['filter'], _xfilter, function (pred, filterable) {
	  return _isObject(filterable) ? _reduce(function (acc, key) {
	    if (pred(filterable[key])) {
	      acc[key] = filterable[key];
	    }

	    return acc;
	  }, {}, keys$1(filterable)) : // else
	  _filter(pred, filterable);
	}));

	var XReduceBy =
	/*#__PURE__*/
	function () {
	  function XReduceBy(valueFn, valueAcc, keyFn, xf) {
	    this.valueFn = valueFn;
	    this.valueAcc = valueAcc;
	    this.keyFn = keyFn;
	    this.xf = xf;
	    this.inputs = {};
	  }

	  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;

	  XReduceBy.prototype['@@transducer/result'] = function (result) {
	    var key;

	    for (key in this.inputs) {
	      if (_has(key, this.inputs)) {
	        result = this.xf['@@transducer/step'](result, this.inputs[key]);

	        if (result['@@transducer/reduced']) {
	          result = result['@@transducer/value'];
	          break;
	        }
	      }
	    }

	    this.inputs = null;
	    return this.xf['@@transducer/result'](result);
	  };

	  XReduceBy.prototype['@@transducer/step'] = function (result, input) {
	    var key = this.keyFn(input);
	    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
	    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
	    return result;
	  };

	  return XReduceBy;
	}();

	var _xreduceBy =
	/*#__PURE__*/
	_curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
	  return new XReduceBy(valueFn, valueAcc, keyFn, xf);
	});

	/**
	 * Groups the elements of the list according to the result of calling
	 * the String-returning function `keyFn` on each element and reduces the elements
	 * of each group to a single value via the reducer function `valueFn`.
	 *
	 * This function is basically a more general [`groupBy`](#groupBy) function.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.20.0
	 * @category List
	 * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
	 * @param {Function} valueFn The function that reduces the elements of each group to a single
	 *        value. Receives two values, accumulator for a particular group and the current element.
	 * @param {*} acc The (initial) accumulator value for each group.
	 * @param {Function} keyFn The function that maps the list's element into a key.
	 * @param {Array} list The array to group.
	 * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
	 *         `valueFn` for elements which produced that key when passed to `keyFn`.
	 * @see R.groupBy, R.reduce
	 * @example
	 *
	 *      const groupNames = (acc, {name}) => acc.concat(name)
	 *      const toGrade = ({score}) =>
	 *        score < 65 ? 'F' :
	 *        score < 70 ? 'D' :
	 *        score < 80 ? 'C' :
	 *        score < 90 ? 'B' : 'A'
	 *
	 *      var students = [
	 *        {name: 'Abby', score: 83},
	 *        {name: 'Bart', score: 62},
	 *        {name: 'Curt', score: 88},
	 *        {name: 'Dora', score: 92},
	 *      ]
	 *
	 *      reduceBy(groupNames, [], toGrade, students)
	 *      //=> {"A": ["Dora"], "B": ["Abby", "Curt"], "F": ["Bart"]}
	 */

	var reduceBy =
	/*#__PURE__*/
	_curryN(4, [],
	/*#__PURE__*/
	_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
	  return _reduce(function (acc, elt) {
	    var key = keyFn(elt);
	    acc[key] = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, [], [], false), elt);
	    return acc;
	  }, {}, list);
	}));

	var _Set =
	/*#__PURE__*/
	function () {
	  function _Set() {
	    /* globals Set */
	    this._nativeSet = typeof Set === 'function' ? new Set() : null;
	    this._items = {};
	  }

	  // until we figure out why jsdoc chokes on this
	  // @param item The item to add to the Set
	  // @returns {boolean} true if the item did not exist prior, otherwise false
	  //
	  _Set.prototype.add = function (item) {
	    return !hasOrAdd(item, true, this);
	  }; //
	  // @param item The item to check for existence in the Set
	  // @returns {boolean} true if the item exists in the Set, otherwise false
	  //


	  _Set.prototype.has = function (item) {
	    return hasOrAdd(item, false, this);
	  }; //
	  // Combines the logic for checking whether an item is a member of the set and
	  // for adding a new item to the set.
	  //
	  // @param item       The item to check or add to the Set instance.
	  // @param shouldAdd  If true, the item will be added to the set if it doesn't
	  //                   already exist.
	  // @param set        The set instance to check or add to.
	  // @return {boolean} true if the item already existed, otherwise false.
	  //


	  return _Set;
	}();

	function hasOrAdd(item, shouldAdd, set) {
	  var type = typeof item;
	  var prevSize, newSize;

	  switch (type) {
	    case 'string':
	    case 'number':
	      // distinguish between +0 and -0
	      if (item === 0 && 1 / item === -Infinity) {
	        if (set._items['-0']) {
	          return true;
	        } else {
	          if (shouldAdd) {
	            set._items['-0'] = true;
	          }

	          return false;
	        }
	      } // these types can all utilise the native Set


	      if (set._nativeSet !== null) {
	        if (shouldAdd) {
	          prevSize = set._nativeSet.size;

	          set._nativeSet.add(item);

	          newSize = set._nativeSet.size;
	          return newSize === prevSize;
	        } else {
	          return set._nativeSet.has(item);
	        }
	      } else {
	        if (!(type in set._items)) {
	          if (shouldAdd) {
	            set._items[type] = {};
	            set._items[type][item] = true;
	          }

	          return false;
	        } else if (item in set._items[type]) {
	          return true;
	        } else {
	          if (shouldAdd) {
	            set._items[type][item] = true;
	          }

	          return false;
	        }
	      }

	    case 'boolean':
	      // set._items['boolean'] holds a two element array
	      // representing [ falseExists, trueExists ]
	      if (type in set._items) {
	        var bIdx = item ? 1 : 0;

	        if (set._items[type][bIdx]) {
	          return true;
	        } else {
	          if (shouldAdd) {
	            set._items[type][bIdx] = true;
	          }

	          return false;
	        }
	      } else {
	        if (shouldAdd) {
	          set._items[type] = item ? [false, true] : [true, false];
	        }

	        return false;
	      }

	    case 'function':
	      // compare functions for reference equality
	      if (set._nativeSet !== null) {
	        if (shouldAdd) {
	          prevSize = set._nativeSet.size;

	          set._nativeSet.add(item);

	          newSize = set._nativeSet.size;
	          return newSize === prevSize;
	        } else {
	          return set._nativeSet.has(item);
	        }
	      } else {
	        if (!(type in set._items)) {
	          if (shouldAdd) {
	            set._items[type] = [item];
	          }

	          return false;
	        }

	        if (!_includes(item, set._items[type])) {
	          if (shouldAdd) {
	            set._items[type].push(item);
	          }

	          return false;
	        }

	        return true;
	      }

	    case 'undefined':
	      if (set._items[type]) {
	        return true;
	      } else {
	        if (shouldAdd) {
	          set._items[type] = true;
	        }

	        return false;
	      }

	    case 'object':
	      if (item === null) {
	        if (!set._items['null']) {
	          if (shouldAdd) {
	            set._items['null'] = true;
	          }

	          return false;
	        }

	        return true;
	      }

	    /* falls through */

	    default:
	      // reduce the search size of heterogeneous sets by creating buckets
	      // for each type.
	      type = Object.prototype.toString.call(item);

	      if (!(type in set._items)) {
	        if (shouldAdd) {
	          set._items[type] = [item];
	        }

	        return false;
	      } // scan through all previously applied items


	      if (!_includes(item, set._items[type])) {
	        if (shouldAdd) {
	          set._items[type].push(item);
	        }

	        return false;
	      }

	      return true;
	  }
	} // A simple Set type that honours R.equals semantics

	var XTake =
	/*#__PURE__*/
	function () {
	  function XTake(n, xf) {
	    this.xf = xf;
	    this.n = n;
	    this.i = 0;
	  }

	  XTake.prototype['@@transducer/init'] = _xfBase.init;
	  XTake.prototype['@@transducer/result'] = _xfBase.result;

	  XTake.prototype['@@transducer/step'] = function (result, input) {
	    this.i += 1;
	    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
	    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
	  };

	  return XTake;
	}();

	var _xtake =
	/*#__PURE__*/
	_curry2(function _xtake(n, xf) {
	  return new XTake(n, xf);
	});

	/**
	 * Returns the first `n` elements of the given list, string, or
	 * transducer/transformer (or object with a `take` method).
	 *
	 * Dispatches to the `take` method of the second argument, if present.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig Number -> [a] -> [a]
	 * @sig Number -> String -> String
	 * @param {Number} n
	 * @param {*} list
	 * @return {*}
	 * @see R.drop
	 * @example
	 *
	 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
	 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
	 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	 *      R.take(3, 'ramda');               //=> 'ram'
	 *
	 *      const personnel = [
	 *        'Dave Brubeck',
	 *        'Paul Desmond',
	 *        'Eugene Wright',
	 *        'Joe Morello',
	 *        'Gerry Mulligan',
	 *        'Bob Bates',
	 *        'Joe Dodge',
	 *        'Ron Crotty'
	 *      ];
	 *
	 *      const takeFive = R.take(5);
	 *      takeFive(personnel);
	 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
	 * @symb R.take(-1, [a, b]) = [a, b]
	 * @symb R.take(0, [a, b]) = []
	 * @symb R.take(1, [a, b]) = [a]
	 * @symb R.take(2, [a, b]) = [a, b]
	 */

	var take =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable(['take'], _xtake, function take(n, xs) {
	  return slice(0, n < 0 ? Infinity : n, xs);
	}));

	function dropLast$1(n, xs) {
	  return take(n < xs.length ? xs.length - n : 0, xs);
	}

	var XDropLast =
	/*#__PURE__*/
	function () {
	  function XDropLast(n, xf) {
	    this.xf = xf;
	    this.pos = 0;
	    this.full = false;
	    this.acc = new Array(n);
	  }

	  XDropLast.prototype['@@transducer/init'] = _xfBase.init;

	  XDropLast.prototype['@@transducer/result'] = function (result) {
	    this.acc = null;
	    return this.xf['@@transducer/result'](result);
	  };

	  XDropLast.prototype['@@transducer/step'] = function (result, input) {
	    if (this.full) {
	      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
	    }

	    this.store(input);
	    return result;
	  };

	  XDropLast.prototype.store = function (input) {
	    this.acc[this.pos] = input;
	    this.pos += 1;

	    if (this.pos === this.acc.length) {
	      this.pos = 0;
	      this.full = true;
	    }
	  };

	  return XDropLast;
	}();

	var _xdropLast =
	/*#__PURE__*/
	_curry2(function _xdropLast(n, xf) {
	  return new XDropLast(n, xf);
	});

	/**
	 * Returns a list containing all but the last `n` elements of the given `list`.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category List
	 * @sig Number -> [a] -> [a]
	 * @sig Number -> String -> String
	 * @param {Number} n The number of elements of `list` to skip.
	 * @param {Array} list The list of elements to consider.
	 * @return {Array} A copy of the list with only the first `list.length - n` elements
	 * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
	 * @example
	 *
	 *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
	 *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
	 *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
	 *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
	 *      R.dropLast(3, 'ramda');               //=> 'ra'
	 */

	var dropLast =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_dispatchable([], _xdropLast, dropLast$1));

	/**
	 * Returns a new list by pulling every item out of it (and all its sub-arrays)
	 * and putting them in a new array, depth-first.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [b]
	 * @param {Array} list The array to consider.
	 * @return {Array} The flattened list.
	 * @see R.unnest
	 * @example
	 *
	 *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
	 *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
	 */

	var flatten =
	/*#__PURE__*/
	_curry1(
	/*#__PURE__*/
	_makeFlat(true));

	/**
	 * Creates a new object from a list key-value pairs. If a key appears in
	 * multiple pairs, the rightmost pair is included in the object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.3.0
	 * @category List
	 * @sig [[k,v]] -> {k: v}
	 * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
	 * @return {Object} The object made by pairing up `keys` and `values`.
	 * @see R.toPairs, R.pair
	 * @example
	 *
	 *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
	 */

	var fromPairs =
	/*#__PURE__*/
	_curry1(function fromPairs(pairs) {
	  var result = {};
	  var idx = 0;

	  while (idx < pairs.length) {
	    result[pairs[idx][0]] = pairs[idx][1];
	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Splits a list into sub-lists stored in an object, based on the result of
	 * calling a String-returning function on each element, and grouping the
	 * results according to values returned.
	 *
	 * Dispatches to the `groupBy` method of the second argument, if present.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig (a -> String) -> [a] -> {String: [a]}
	 * @param {Function} fn Function :: a -> String
	 * @param {Array} list The array to group
	 * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
	 *         that produced that key when passed to `fn`.
	 * @see R.reduceBy, R.transduce
	 * @example
	 *
	 *      const byGrade = R.groupBy(function(student) {
	 *        const score = student.score;
	 *        return score < 65 ? 'F' :
	 *               score < 70 ? 'D' :
	 *               score < 80 ? 'C' :
	 *               score < 90 ? 'B' : 'A';
	 *      });
	 *      const students = [{name: 'Abby', score: 84},
	 *                      {name: 'Eddy', score: 58},
	 *                      // ...
	 *                      {name: 'Jack', score: 69}];
	 *      byGrade(students);
	 *      // {
	 *      //   'A': [{name: 'Dianne', score: 99}],
	 *      //   'B': [{name: 'Abby', score: 84}]
	 *      //   // ...,
	 *      //   'F': [{name: 'Eddy', score: 58}]
	 *      // }
	 */

	var groupBy =
	/*#__PURE__*/
	_curry2(
	/*#__PURE__*/
	_checkForMethod('groupBy',
	/*#__PURE__*/
	reduceBy(function (acc, item) {
	  if (acc == null) {
	    acc = [];
	  }

	  acc.push(item);
	  return acc;
	}, null)));

	/**
	 * Given a function that generates a key, turns a list of objects into an
	 * object indexing the objects by the given key. Note that if multiple
	 * objects generate the same value for the indexing key only the last value
	 * will be included in the generated object.
	 *
	 * Acts as a transducer if a transformer is given in list position.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category List
	 * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
	 * @param {Function} fn Function :: a -> String
	 * @param {Array} array The array of objects to index
	 * @return {Object} An object indexing each array element by the given property.
	 * @example
	 *
	 *      const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
	 *      R.indexBy(R.prop('id'), list);
	 *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
	 */

	var indexBy =
	/*#__PURE__*/
	reduceBy(function (acc, elem) {
	  return elem;
	}, null);

	/**
	 * Returns a new list containing only one copy of each element in the original
	 * list, based upon the value returned by applying the supplied function to
	 * each list element. Prefers the first item if the supplied function produces
	 * the same value on two items. [`R.equals`](#equals) is used for comparison.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.16.0
	 * @category List
	 * @sig (a -> b) -> [a] -> [a]
	 * @param {Function} fn A function used to produce a value to use during comparisons.
	 * @param {Array} list The array to consider.
	 * @return {Array} The list of unique items.
	 * @example
	 *
	 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
	 */

	var uniqBy =
	/*#__PURE__*/
	_curry2(function uniqBy(fn, list) {
	  var set = new _Set();
	  var result = [];
	  var idx = 0;
	  var appliedItem, item;

	  while (idx < list.length) {
	    item = list[idx];
	    appliedItem = fn(item);

	    if (set.add(appliedItem)) {
	      result.push(item);
	    }

	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Returns a new list containing only one copy of each element in the original
	 * list. [`R.equals`](#equals) is used to determine equality.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category List
	 * @sig [a] -> [a]
	 * @param {Array} list The array to consider.
	 * @return {Array} The list of unique items.
	 * @example
	 *
	 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
	 *      R.uniq([1, '1']);     //=> [1, '1']
	 *      R.uniq([[42], [42]]); //=> [[42]]
	 */

	var uniq =
	/*#__PURE__*/
	uniqBy(identity);

	function _objectAssign(target) {
	  if (target == null) {
	    throw new TypeError('Cannot convert undefined or null to object');
	  }

	  var output = Object(target);
	  var idx = 1;
	  var length = arguments.length;

	  while (idx < length) {
	    var source = arguments[idx];

	    if (source != null) {
	      for (var nextKey in source) {
	        if (_has(nextKey, source)) {
	          output[nextKey] = source[nextKey];
	        }
	      }
	    }

	    idx += 1;
	  }

	  return output;
	}

	var _objectAssign$1 = typeof Object.assign === 'function' ? Object.assign : _objectAssign;

	/**
	 * Takes a function and two values, and returns whichever value produces the
	 * larger result when passed to the provided function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Relation
	 * @sig Ord b => (a -> b) -> a -> a -> a
	 * @param {Function} f
	 * @param {*} a
	 * @param {*} b
	 * @return {*}
	 * @see R.max, R.minBy
	 * @example
	 *
	 *      //  square :: Number -> Number
	 *      const square = n => n * n;
	 *
	 *      R.maxBy(square, -3, 2); //=> -3
	 *
	 *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
	 *      R.reduce(R.maxBy(square), 0, []); //=> 0
	 */

	var maxBy =
	/*#__PURE__*/
	_curry3(function maxBy(f, a, b) {
	  return f(b) > f(a) ? b : a;
	});

	/**
	 * Merges a list of objects together into one object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.10.0
	 * @category List
	 * @sig [{k: v}] -> {k: v}
	 * @param {Array} list An array of objects
	 * @return {Object} A merged object.
	 * @see R.reduce
	 * @example
	 *
	 *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
	 *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
	 * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
	 */

	var mergeAll =
	/*#__PURE__*/
	_curry1(function mergeAll(list) {
	  return _objectAssign$1.apply(null, [{}].concat(list));
	});

	/**
	 * Creates a new object with the own properties of the two provided objects. If
	 * a key exists in both objects, the provided function is applied to the key
	 * and the values associated with the key in each object, with the result being
	 * used as the value associated with the key in the returned object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.19.0
	 * @category Object
	 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
	 * @param {Function} fn
	 * @param {Object} l
	 * @param {Object} r
	 * @return {Object}
	 * @see R.mergeDeepWithKey, R.merge, R.mergeWith
	 * @example
	 *
	 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
	 *      R.mergeWithKey(concatValues,
	 *                     { a: true, thing: 'foo', values: [10, 20] },
	 *                     { b: true, thing: 'bar', values: [15, 35] });
	 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
	 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
	 */

	var mergeWithKey =
	/*#__PURE__*/
	_curry3(function mergeWithKey(fn, l, r) {
	  var result = {};
	  var k;

	  for (k in l) {
	    if (_has(k, l)) {
	      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
	    }
	  }

	  for (k in r) {
	    if (_has(k, r) && !_has(k, result)) {
	      result[k] = r[k];
	    }
	  }

	  return result;
	});

	/**
	 * Creates a new object with the own properties of the two provided objects.
	 * If a key exists in both objects:
	 * - and both associated values are also objects then the values will be
	 *   recursively merged.
	 * - otherwise the provided function is applied to the key and associated values
	 *   using the resulting value as the new value associated with the key.
	 * If a key only exists in one object, the value will be associated with the key
	 * of the resulting object.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Object
	 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
	 * @param {Function} fn
	 * @param {Object} lObj
	 * @param {Object} rObj
	 * @return {Object}
	 * @see R.mergeWithKey, R.mergeDeepWith
	 * @example
	 *
	 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
	 *      R.mergeDeepWithKey(concatValues,
	 *                         { a: true, c: { thing: 'foo', values: [10, 20] }},
	 *                         { b: true, c: { thing: 'bar', values: [15, 35] }});
	 *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}
	 */

	var mergeDeepWithKey =
	/*#__PURE__*/
	_curry3(function mergeDeepWithKey(fn, lObj, rObj) {
	  return mergeWithKey(function (k, lVal, rVal) {
	    if (_isObject(lVal) && _isObject(rVal)) {
	      return mergeDeepWithKey(fn, lVal, rVal);
	    } else {
	      return fn(k, lVal, rVal);
	    }
	  }, lObj, rObj);
	});

	/**
	 * Creates a new object with the own properties of the first object merged with
	 * the own properties of the second object. If a key exists in both objects:
	 * - and both values are objects, the two values will be recursively merged
	 * - otherwise the value from the first object will be used.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.24.0
	 * @category Object
	 * @sig {a} -> {a} -> {a}
	 * @param {Object} lObj
	 * @param {Object} rObj
	 * @return {Object}
	 * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey
	 * @example
	 *
	 *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
	 *                      { age: 40, contact: { email: 'baa@example.com' }});
	 *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}
	 */

	var mergeDeepLeft =
	/*#__PURE__*/
	_curry2(function mergeDeepLeft(lObj, rObj) {
	  return mergeDeepWithKey(function (k, lVal, rVal) {
	    return lVal;
	  }, lObj, rObj);
	});

	/**
	 * Takes a function and two values, and returns whichever value produces the
	 * smaller result when passed to the provided function.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.8.0
	 * @category Relation
	 * @sig Ord b => (a -> b) -> a -> a -> a
	 * @param {Function} f
	 * @param {*} a
	 * @param {*} b
	 * @return {*}
	 * @see R.min, R.maxBy
	 * @example
	 *
	 *      //  square :: Number -> Number
	 *      const square = n => n * n;
	 *
	 *      R.minBy(square, -3, 2); //=> 2
	 *
	 *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
	 *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
	 */

	var minBy =
	/*#__PURE__*/
	_curry3(function minBy(f, a, b) {
	  return f(b) < f(a) ? b : a;
	});

	/**
	 * Returns a partial copy of an object containing only the keys specified. If
	 * the key does not exist, the property is ignored.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.1.0
	 * @category Object
	 * @sig [k] -> {k: v} -> {k: v}
	 * @param {Array} names an array of String property names to copy onto a new object
	 * @param {Object} obj The object to copy from
	 * @return {Object} A new object with only properties from `names` on it.
	 * @see R.omit, R.props
	 * @example
	 *
	 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
	 */

	var pick =
	/*#__PURE__*/
	_curry2(function pick(names, obj) {
	  var result = {};
	  var idx = 0;

	  while (idx < names.length) {
	    if (names[idx] in obj) {
	      result[names[idx]] = obj[names[idx]];
	    }

	    idx += 1;
	  }

	  return result;
	});

	/**
	 * Converts an object into an array of key, value arrays. Only the object's
	 * own properties are used.
	 * Note that the order of the output array is not guaranteed to be consistent
	 * across different JS platforms.
	 *
	 * @func
	 * @memberOf R
	 * @since v0.4.0
	 * @category Object
	 * @sig {String: *} -> [[String,*]]
	 * @param {Object} obj The object to extract from
	 * @return {Array} An array of key, value arrays from the object's own properties.
	 * @see R.fromPairs
	 * @example
	 *
	 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
	 */

	var toPairs =
	/*#__PURE__*/
	_curry1(function toPairs(obj) {
	  var pairs = [];

	  for (var prop in obj) {
	    if (_has(prop, obj)) {
	      pairs[pairs.length] = [prop, obj[prop]];
	    }
	  }

	  return pairs;
	});

	var $propertyIsEnumerable = objectPropertyIsEnumerable.f;

	var propertyIsEnumerable = functionUncurryThis($propertyIsEnumerable);
	var push$4 = functionUncurryThis([].push);

	// `Object.{ entries, values }` methods implementation
	var createMethod$2 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject(it);
	    var keys = objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!descriptors || propertyIsEnumerable(O, key)) {
	        push$4(result, TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.es/ecma262/#sec-object.entries
	  entries: createMethod$2(true),
	  // `Object.values` method
	  // https://tc39.es/ecma262/#sec-object.values
	  values: createMethod$2(false)
	};

	var $entries = objectToArray.entries;

	// `Object.entries` method
	// https://tc39.es/ecma262/#sec-object.entries
	_export({ target: 'Object', stat: true }, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	var $find = arrayIteration.find;


	var FIND = 'find';
	var SKIPS_HOLES = true;

	// Shouldn't skip holes
	if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

	// `Array.prototype.find` method
	// https://tc39.es/ecma262/#sec-array.prototype.find
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables(FIND);

	// `Array.isArray` method
	// https://tc39.es/ecma262/#sec-array.isarray
	_export({ target: 'Array', stat: true }, {
	  isArray: isArray
	});

	var $every = arrayIteration.every;


	var STRICT_METHOD$4 = arrayMethodIsStrict('every');

	// `Array.prototype.every` method
	// https://tc39.es/ecma262/#sec-array.prototype.every
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$4 }, {
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

	var TypeError$7 = global$1.TypeError;
	var max$1 = Math.max;
	var min$2 = Math.min;
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.es/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = lengthOfArrayLike(O);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$2(max$1(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
	      throw TypeError$7(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var TypeError$6 = global$1.TypeError;

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$1 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aCallable(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = lengthOfArrayLike(O);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError$6('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduce
	  left: createMethod$1(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$1(true)
	};

	var $reduce = arrayReduce.left;




	var STRICT_METHOD$3 = arrayMethodIsStrict('reduce');
	// Chrome 80-82 has a critical bug
	// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
	var CHROME_BUG = !engineIsNode && engineV8Version > 79 && engineV8Version < 83;

	// `Array.prototype.reduce` method
	// https://tc39.es/ecma262/#sec-array.prototype.reduce
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$3 || CHROME_BUG }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    var length = arguments.length;
	    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
	  }
	});

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
	var TypeError$5 = global$1.TypeError;

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$3 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.es/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED$3 }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  concat: function concat(arg) {
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = lengthOfArrayLike(E);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError$5(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError$5(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it


	var arrayBufferNonExtensible = fails(function () {
	  if (typeof ArrayBuffer == 'function') {
	    var buffer = new ArrayBuffer(8);
	    // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
	    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
	  }
	});

	// eslint-disable-next-line es/no-object-isextensible -- safe
	var $isExtensible = Object.isExtensible;
	var FAILS_ON_PRIMITIVES = fails(function () { $isExtensible(1); });

	// `Object.isExtensible` method
	// https://tc39.es/ecma262/#sec-object.isextensible
	var objectIsExtensible = (FAILS_ON_PRIMITIVES || arrayBufferNonExtensible) ? function isExtensible(it) {
	  if (!isObject(it)) return false;
	  if (arrayBufferNonExtensible && classofRaw(it) == 'ArrayBuffer') return false;
	  return $isExtensible ? $isExtensible(it) : true;
	} : $isExtensible;

	var freezing = !fails(function () {
	  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;






	var REQUIRED = false;
	var METADATA = uid('meta');
	var id = 0;

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + id++, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!hasOwnProperty_1(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!objectIsExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!hasOwnProperty_1(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!objectIsExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && REQUIRED && objectIsExtensible(it) && !hasOwnProperty_1(it, METADATA)) setMetadata(it);
	  return it;
	};

	var enable = function () {
	  meta.enable = function () { /* empty */ };
	  REQUIRED = true;
	  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	  var splice = functionUncurryThis([].splice);
	  var test = {};
	  test[METADATA] = 1;

	  // prevent exposing of metadata key
	  if (getOwnPropertyNames(test).length) {
	    objectGetOwnPropertyNames.f = function (it) {
	      var result = getOwnPropertyNames(it);
	      for (var i = 0, length = result.length; i < length; i++) {
	        if (result[i] === METADATA) {
	          splice(result, i, 1);
	          break;
	        }
	      } return result;
	    };

	    _export({ target: 'Object', stat: true, forced: true }, {
	      getOwnPropertyNames: objectGetOwnPropertyNamesExternal.f
	    });
	  }
	};

	var meta = module.exports = {
	  enable: enable,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys$1[METADATA] = true;
	});

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    isCallable(NewTarget = dummy.constructor) &&
	    NewTarget !== Wrapper &&
	    isObject(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global$1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var uncurriedNativeMethod = functionUncurryThis(NativePrototype[KEY]);
	    redefine(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        uncurriedNativeMethod(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  var REPLACE = isForced_1(
	    CONSTRUCTOR_NAME,
	    !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
	      new NativeConstructor().entries().next();
	    }))
	  );

	  if (REPLACE) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.enable();
	  } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new -- required for testing
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance(dummy, NativePrototype);
	        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var defineProperty$3 = objectDefineProperty.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState$1 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var Constructor = wrapper(function (that, iterable) {
	      anInstance(that, Prototype);
	      setInternalState$1(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	    });

	    var Prototype = Constructor.prototype;

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll(Prototype, {
	      // `{ Map, Set }.prototype.clear()` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.clear
	      // https://tc39.es/ecma262/#sec-set.prototype.clear
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;
	        else that.size = 0;
	      },
	      // `{ Map, Set }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.delete
	      // https://tc39.es/ecma262/#sec-set.prototype.delete
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.foreach
	      // https://tc39.es/ecma262/#sec-set.prototype.foreach
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // `{ Map, Set}.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.has
	      // https://tc39.es/ecma262/#sec-set.prototype.has
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll(Prototype, IS_MAP ? {
	      // `Map.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.get
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // `Map.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.set
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // `Set.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-set.prototype.add
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$3(Prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return Constructor;
	  },
	  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
	    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
	    // https://tc39.es/ecma262/#sec-map.prototype.entries
	    // https://tc39.es/ecma262/#sec-map.prototype.keys
	    // https://tc39.es/ecma262/#sec-map.prototype.values
	    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
	    // https://tc39.es/ecma262/#sec-set.prototype.entries
	    // https://tc39.es/ecma262/#sec-set.prototype.keys
	    // https://tc39.es/ecma262/#sec-set.prototype.values
	    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
	    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$1(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // `{ Map, Set }.prototype[@@species]` accessors
	    // https://tc39.es/ecma262/#sec-get-map-@@species
	    // https://tc39.es/ecma262/#sec-get-set-@@species
	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// `Set` constructor
	// https://tc39.es/ecma262/#sec-set-objects
	collection('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	// `Map` constructor
	// https://tc39.es/ecma262/#sec-map-objects
	collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  } catch (error) {
	    iteratorClose(iterator, 'throw', error);
	  }
	};

	var Array$1 = global$1.Array;

	// `Array.from` method implementation
	// https://tc39.es/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var IS_CONSTRUCTOR = isConstructor(this);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod && !(this == Array$1 && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = getIterator(O, iteratorMethod);
	    next = iterator.next;
	    result = IS_CONSTRUCTOR ? new this() : [];
	    for (;!(step = functionCall(next, iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = lengthOfArrayLike(O);
	    result = IS_CONSTRUCTOR ? new this(length) : Array$1(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
	  // eslint-disable-next-line es/no-array-from -- required for testing
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.es/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
	  from: arrayFrom
	});

	var $includes = arrayIncludes.includes;


	// `Array.prototype.includes` method
	// https://tc39.es/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('includes');

	var MATCH$1 = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.es/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var TypeError$4 = global$1.TypeError;

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError$4("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (error1) {
	    try {
	      regexp[MATCH] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (error2) { /* empty */ }
	  } return false;
	};

	var stringIndexOf$1 = functionUncurryThis(''.indexOf);

	// `String.prototype.includes` method
	// https://tc39.es/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~stringIndexOf$1(
	      toString$1(requireObjectCoercible(this)),
	      toString$1(notARegexp(searchString)),
	      arguments.length > 1 ? arguments[1] : undefined
	    );
	  }
	});

	var $values = objectToArray.values;

	// `Object.values` method
	// https://tc39.es/ecma262/#sec-object.values
	_export({ target: 'Object', stat: true }, {
	  values: function values(O) {
	    return $values(O);
	  }
	});

	// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	var $RegExp$2 = global$1.RegExp;

	var UNSUPPORTED_Y$2 = fails(function () {
	  var re = $RegExp$2('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});

	// UC Browser bug
	// https://github.com/zloirock/core-js/issues/1008
	var MISSED_STICKY = UNSUPPORTED_Y$2 || fails(function () {
	  return !$RegExp$2('a', 'y').sticky;
	});

	var BROKEN_CARET = UNSUPPORTED_Y$2 || fails(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = $RegExp$2('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});

	var regexpStickyHelpers = {
	  BROKEN_CARET: BROKEN_CARET,
	  MISSED_STICKY: MISSED_STICKY,
	  UNSUPPORTED_Y: UNSUPPORTED_Y$2
	};

	// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
	var $RegExp$1 = global$1.RegExp;

	var regexpUnsupportedDotAll = fails(function () {
	  var re = $RegExp$1('.', 's');
	  return !(re.dotAll && re.exec('\n') && re.flags === 's');
	});

	// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
	var $RegExp = global$1.RegExp;

	var regexpUnsupportedNcg = fails(function () {
	  var re = $RegExp('(?<a>b)', 'g');
	  return re.exec('b').groups.a !== 'b' ||
	    'b'.replace(re, '$<a>c') !== 'bc';
	});

	/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
	/* eslint-disable regexp/no-useless-quantifier -- testing */







	var getInternalState = internalState.get;



	var nativeReplace = shared('native-string-replace', String.prototype.replace);
	var nativeExec = RegExp.prototype.exec;
	var patchedExec = nativeExec;
	var charAt$4 = functionUncurryThis(''.charAt);
	var indexOf = functionUncurryThis(''.indexOf);
	var replace$3 = functionUncurryThis(''.replace);
	var stringSlice$4 = functionUncurryThis(''.slice);

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  functionCall(nativeExec, re1, 'a');
	  functionCall(nativeExec, re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y$1 = regexpStickyHelpers.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || regexpUnsupportedDotAll || regexpUnsupportedNcg;

	if (PATCH) {
	  patchedExec = function exec(string) {
	    var re = this;
	    var state = getInternalState(re);
	    var str = toString$1(string);
	    var raw = state.raw;
	    var result, reCopy, lastIndex, match, i, object, group;

	    if (raw) {
	      raw.lastIndex = re.lastIndex;
	      result = functionCall(patchedExec, raw, str);
	      re.lastIndex = raw.lastIndex;
	      return result;
	    }

	    var groups = state.groups;
	    var sticky = UNSUPPORTED_Y$1 && re.sticky;
	    var flags = functionCall(regexpFlags, re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = replace$3(flags, 'y', '');
	      if (indexOf(flags, 'g') === -1) {
	        flags += 'g';
	      }

	      strCopy = stringSlice$4(str, re.lastIndex);
	      // Support anchored sticky behavior.
	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$4(str, re.lastIndex - 1) !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      }
	      // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.
	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = functionCall(nativeExec, sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = stringSlice$4(match.input, charsAdded);
	        match[0] = stringSlice$4(match[0], charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      functionCall(nativeReplace, match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    if (match && groups) {
	      match.groups = object = objectCreate(null);
	      for (i = 0; i < groups.length; i++) {
	        group = groups[i];
	        object[group[0]] = match[group[1]];
	      }
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	// `RegExp.prototype.exec` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.exec
	_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
	  exec: regexpExec
	});

	// TODO: Remove from `core-js@4` since it's moved to entry points








	var SPECIES = wellKnownSymbol('species');
	var RegExpPrototype = RegExp.prototype;

	var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
	  var SYMBOL = wellKnownSymbol(KEY);

	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    FORCED
	  ) {
	    var uncurriedNativeRegExpMethod = functionUncurryThis(/./[SYMBOL]);
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      var uncurriedNativeMethod = functionUncurryThis(nativeMethod);
	      var $exec = regexp.exec;
	      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
	        }
	        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
	      }
	      return { done: false };
	    });

	    redefine(String.prototype, KEY, methods[0]);
	    redefine(RegExpPrototype, SYMBOL, methods[1]);
	  }

	  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
	};

	var charAt$3 = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.es/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt$3(S, index).length : 1);
	};

	var TypeError$3 = global$1.TypeError;

	// `RegExpExec` abstract operation
	// https://tc39.es/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (isCallable(exec)) {
	    var result = functionCall(exec, R, S);
	    if (result !== null) anObject(result);
	    return result;
	  }
	  if (classofRaw(R) === 'RegExp') return functionCall(regexpExec, R, S);
	  throw TypeError$3('RegExp#exec called on incompatible receiver');
	};

	var UNSUPPORTED_Y = regexpStickyHelpers.UNSUPPORTED_Y;
	var MAX_UINT32 = 0xFFFFFFFF;
	var min$1 = Math.min;
	var $push = [].push;
	var exec$1 = functionUncurryThis(/./.exec);
	var push$3 = functionUncurryThis($push);
	var stringSlice$3 = functionUncurryThis(''.slice);

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
	  // eslint-disable-next-line regexp/no-empty-group -- required for testing
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	// @@split logic
	fixRegexpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    // eslint-disable-next-line regexp/no-empty-group -- required for testing
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = toString$1(requireObjectCoercible(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegexp(separator)) {
	        return functionCall(nativeSplit, string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = functionCall(regexpExec, separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          push$3(output, stringSlice$3(string, lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) functionApply($push, output, arraySliceSimple(match, 1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !exec$1(separatorCopy, '')) push$3(output, '');
	      } else push$3(output, stringSlice$3(string, lastLastIndex));
	      return output.length > lim ? arraySliceSimple(output, 0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : functionCall(nativeSplit, this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.es/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible(this);
	      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
	      return splitter
	        ? functionCall(splitter, separator, O, limit)
	        : functionCall(internalSplit, toString$1(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (string, limit) {
	      var rx = anObject(this);
	      var S = toString$1(string);
	      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

	      if (res.done) return res.value;

	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (UNSUPPORTED_Y ? 'g' : 'y');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
	        var z = regexpExecAbstract(splitter, UNSUPPORTED_Y ? stringSlice$3(S, q) : S);
	        var e;
	        if (
	          z === null ||
	          (e = min$1(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          push$3(A, stringSlice$3(S, p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            push$3(A, z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      push$3(A, stringSlice$3(S, p));
	      return A;
	    }
	  ];
	}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

	var un$Join = functionUncurryThis([].join);

	var ES3_STRINGS = indexedObject != Object;
	var STRICT_METHOD$2 = arrayMethodIsStrict('join', ',');

	// `Array.prototype.join` method
	// https://tc39.es/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$2 }, {
	  join: function join(separator) {
	    return un$Join(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	// @@match logic
	fixRegexpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.es/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = requireObjectCoercible(this);
	      var matcher = regexp == undefined ? undefined : getMethod(regexp, MATCH);
	      return matcher ? functionCall(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString$1(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
	    function (string) {
	      var rx = anObject(this);
	      var S = toString$1(string);
	      var res = maybeCallNative(nativeMatch, rx, S);

	      if (res.done) return res.value;

	      if (!rx.global) return regexpExecAbstract(rx, S);

	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = regexpExecAbstract(rx, S)) !== null) {
	        var matchStr = toString$1(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});

	// `Number.isNaN` method
	// https://tc39.es/ecma262/#sec-number.isnan
	_export({ target: 'Number', stat: true }, {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare -- NaN check
	    return number != number;
	  }
	});

	// `thisNumberValue` abstract operation
	// https://tc39.es/ecma262/#sec-thisnumbervalue
	var thisNumberValue = functionUncurryThis(1.0.valueOf);

	// a string of all valid unicode whitespaces
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
	  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var replace$2 = functionUncurryThis(''.replace);
	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod = function (TYPE) {
	  return function ($this) {
	    var string = toString$1(requireObjectCoercible($this));
	    if (TYPE & 1) string = replace$2(string, ltrim, '');
	    if (TYPE & 2) string = replace$2(string, rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
	  start: createMethod(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimend
	  end: createMethod(2),
	  // `String.prototype.trim` method
	  // https://tc39.es/ecma262/#sec-string.prototype.trim
	  trim: createMethod(3)
	};

	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var defineProperty$2 = objectDefineProperty.f;

	var trim$2 = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global$1[NUMBER];
	var NumberPrototype = NativeNumber.prototype;
	var TypeError$2 = global$1.TypeError;
	var arraySlice = functionUncurryThis(''.slice);
	var charCodeAt = functionUncurryThis(''.charCodeAt);

	// `ToNumeric` abstract operation
	// https://tc39.es/ecma262/#sec-tonumeric
	var toNumeric = function (value) {
	  var primValue = toPrimitive(value, 'number');
	  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
	};

	// `ToNumber` abstract operation
	// https://tc39.es/ecma262/#sec-tonumber
	var toNumber = function (argument) {
	  var it = toPrimitive(argument, 'number');
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (isSymbol(it)) throw TypeError$2('Cannot convert a Symbol value to a number');
	  if (typeof it == 'string' && it.length > 2) {
	    it = trim$2(it);
	    first = charCodeAt(it, 0);
	    if (first === 43 || first === 45) {
	      third = charCodeAt(it, 2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (charCodeAt(it, 1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
	        default: return +it;
	      }
	      digits = arraySlice(it, 2);
	      length = digits.length;
	      for (index = 0; index < length; index++) {
	        code = charCodeAt(digits, index);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	// `Number` constructor
	// https://tc39.es/ecma262/#sec-number-constructor
	if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
	    var dummy = this;
	    // check on 1..constructor(foo) case
	    return objectIsPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); })
	      ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
	  };
	  for (var keys = descriptors ? getOwnPropertyNames(NativeNumber) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES2015 (in case, if modules with ES2015 Number statics required before):
	    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +
	    // ESNext
	    'fromString,range'
	  ).split(','), j = 0, key; keys.length > j; j++) {
	    if (hasOwnProperty_1(NativeNumber, key = keys[j]) && !hasOwnProperty_1(NumberWrapper, key)) {
	      defineProperty$2(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
	    }
	  }
	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine(global$1, NUMBER, NumberWrapper);
	}

	var trim$1 = stringTrim.trim;


	var charAt$2 = functionUncurryThis(''.charAt);
	var n$ParseFloat = global$1.parseFloat;
	var Symbol$2 = global$1.Symbol;
	var ITERATOR$3 = Symbol$2 && Symbol$2.iterator;
	var FORCED$2 = 1 / n$ParseFloat(whitespaces + '-0') !== -Infinity
	  // MS Edge 18- broken with boxed symbols
	  || (ITERATOR$3 && !fails(function () { n$ParseFloat(Object(ITERATOR$3)); }));

	// `parseFloat` method
	// https://tc39.es/ecma262/#sec-parsefloat-string
	var numberParseFloat = FORCED$2 ? function parseFloat(string) {
	  var trimmedString = trim$1(toString$1(string));
	  var result = n$ParseFloat(trimmedString);
	  return result === 0 && charAt$2(trimmedString, 0) == '-' ? -0 : result;
	} : n$ParseFloat;

	// `Number.parseFloat` method
	// https://tc39.es/ecma262/#sec-number.parseFloat
	// eslint-disable-next-line es/no-number-parsefloat -- required for testing
	_export({ target: 'Number', stat: true, forced: Number.parseFloat != numberParseFloat }, {
	  parseFloat: numberParseFloat
	});

	/* eslint-disable es/no-array-prototype-indexof -- required for testing */


	var $IndexOf = arrayIncludes.indexOf;


	var un$IndexOf = functionUncurryThis([].indexOf);

	var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
	var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');

	// `Array.prototype.indexOf` method
	// https://tc39.es/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$1 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? un$IndexOf(this, searchElement, fromIndex) || 0
	      : $IndexOf(this, searchElement, fromIndex);
	  }
	});

	var PROPER_FUNCTION_NAME = functionName.PROPER;



	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var stringTrimForced = function (METHOD_NAME) {
	  return fails(function () {
	    return !!whitespaces[METHOD_NAME]()
	      || non[METHOD_NAME]() !== non
	      || (PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME);
	  });
	};

	var $trim = stringTrim.trim;


	// `String.prototype.trim` method
	// https://tc39.es/ecma262/#sec-string.prototype.trim
	_export({ target: 'String', proto: true, forced: stringTrimForced('trim') }, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	var FUNCTION_NAME_EXISTS = functionName.EXISTS;

	var defineProperty$1 = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var functionToString = functionUncurryThis(FunctionPrototype.toString);
	var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
	var regExpExec = functionUncurryThis(nameRE.exec);
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.es/ecma262/#sec-function-instances-name
	if (descriptors && !FUNCTION_NAME_EXISTS) {
	  defineProperty$1(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return regExpExec(nameRE, functionToString(this))[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	var floor$1 = Math.floor;

	var mergeSort = function (array, comparefn) {
	  var length = array.length;
	  var middle = floor$1(length / 2);
	  return length < 8 ? insertionSort(array, comparefn) : merge(
	    array,
	    mergeSort(arraySliceSimple(array, 0, middle), comparefn),
	    mergeSort(arraySliceSimple(array, middle), comparefn),
	    comparefn
	  );
	};

	var insertionSort = function (array, comparefn) {
	  var length = array.length;
	  var i = 1;
	  var element, j;

	  while (i < length) {
	    j = i;
	    element = array[i];
	    while (j && comparefn(array[j - 1], element) > 0) {
	      array[j] = array[--j];
	    }
	    if (j !== i++) array[j] = element;
	  } return array;
	};

	var merge = function (array, left, right, comparefn) {
	  var llength = left.length;
	  var rlength = right.length;
	  var lindex = 0;
	  var rindex = 0;

	  while (lindex < llength || rindex < rlength) {
	    array[lindex + rindex] = (lindex < llength && rindex < rlength)
	      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
	      : lindex < llength ? left[lindex++] : right[rindex++];
	  } return array;
	};

	var arraySort = mergeSort;

	var firefox = engineUserAgent.match(/firefox\/(\d+)/i);

	var engineFfVersion = !!firefox && +firefox[1];

	var engineIsIeOrEdge = /MSIE|Trident/.test(engineUserAgent);

	var webkit = engineUserAgent.match(/AppleWebKit\/(\d+)\./);

	var engineWebkitVersion = !!webkit && +webkit[1];

	var test = [];
	var un$Sort = functionUncurryThis(test.sort);
	var push$2 = functionUncurryThis(test.push);

	// IE8-
	var FAILS_ON_UNDEFINED = fails(function () {
	  test.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails(function () {
	  test.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD = arrayMethodIsStrict('sort');

	var STABLE_SORT = !fails(function () {
	  // feature detection can be too slow, so check engines versions
	  if (engineV8Version) return engineV8Version < 70;
	  if (engineFfVersion && engineFfVersion > 3) return;
	  if (engineIsIeOrEdge) return true;
	  if (engineWebkitVersion) return engineWebkitVersion < 603;

	  var result = '';
	  var code, chr, value, index;

	  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
	  for (code = 65; code < 76; code++) {
	    chr = String.fromCharCode(code);

	    switch (code) {
	      case 66: case 69: case 70: case 72: value = 3; break;
	      case 68: case 71: value = 4; break;
	      default: value = 2;
	    }

	    for (index = 0; index < 47; index++) {
	      test.push({ k: chr + index, v: value });
	    }
	  }

	  test.sort(function (a, b) { return b.v - a.v; });

	  for (index = 0; index < test.length; index++) {
	    chr = test[index].k.charAt(0);
	    if (result.charAt(result.length - 1) !== chr) result += chr;
	  }

	  return result !== 'DGBEFHACIJK';
	});

	var FORCED$1 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

	var getSortCompare = function (comparefn) {
	  return function (x, y) {
	    if (y === undefined) return -1;
	    if (x === undefined) return 1;
	    if (comparefn !== undefined) return +comparefn(x, y) || 0;
	    return toString$1(x) > toString$1(y) ? 1 : -1;
	  };
	};

	// `Array.prototype.sort` method
	// https://tc39.es/ecma262/#sec-array.prototype.sort
	_export({ target: 'Array', proto: true, forced: FORCED$1 }, {
	  sort: function sort(comparefn) {
	    if (comparefn !== undefined) aCallable(comparefn);

	    var array = toObject(this);

	    if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);

	    var items = [];
	    var arrayLength = lengthOfArrayLike(array);
	    var itemsLength, index;

	    for (index = 0; index < arrayLength; index++) {
	      if (index in array) push$2(items, array[index]);
	    }

	    arraySort(items, getSortCompare(comparefn));

	    itemsLength = items.length;
	    index = 0;

	    while (index < itemsLength) array[index] = items[index++];
	    while (index < arrayLength) delete array[index++];

	    return array;
	  }
	});

	var ITERATOR$2 = wellKnownSymbol('iterator');

	var nativeUrl = !fails(function () {
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return (isPure && !url.toJSON)
	    || !searchParams.sort
	    || url.href !== 'http://a/c%20d?a=1&c=3'
	    || searchParams.get('c') !== '3'
	    || String(new URLSearchParams('?a=1')) !== 'a=1'
	    || !searchParams[ITERATOR$2]
	    // throws in Edge
	    || new URL('https://a@b').username !== 'a'
	    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
	    // not punycoded in Edge
	    || new URL('http://ÑÐµÑÑ').host !== 'xn--e1aybc'
	    // not escaped in Chrome 62-
	    || new URL('http://a#Ð±').hash !== '#%D0%B1'
	    // fails in Chrome 66-
	    || result !== 'a1c3'
	    // throws in Safari
	    || new URL('http://x', undefined).host !== 'x';
	});

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`



























	var ITERATOR$1 = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState = internalState.set;
	var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR);

	var n$Fetch = getBuiltIn('fetch');
	var N$Request = getBuiltIn('Request');
	var Headers = getBuiltIn('Headers');
	var RequestPrototype = N$Request && N$Request.prototype;
	var HeadersPrototype = Headers && Headers.prototype;
	var RegExp$1 = global$1.RegExp;
	var TypeError$1 = global$1.TypeError;
	var decodeURIComponent$1 = global$1.decodeURIComponent;
	var encodeURIComponent$1 = global$1.encodeURIComponent;
	var charAt$1 = functionUncurryThis(''.charAt);
	var join$1 = functionUncurryThis([].join);
	var push$1 = functionUncurryThis([].push);
	var replace$1 = functionUncurryThis(''.replace);
	var shift = functionUncurryThis([].shift);
	var splice = functionUncurryThis([].splice);
	var split = functionUncurryThis(''.split);
	var stringSlice$2 = functionUncurryThis(''.slice);

	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function (bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp$1('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function (sequence) {
	  try {
	    return decodeURIComponent$1(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function (it) {
	  var result = replace$1(it, plus, ' ');
	  var bytes = 4;
	  try {
	    return decodeURIComponent$1(result);
	  } catch (error) {
	    while (bytes) {
	      result = replace$1(result, percentSequence(bytes--), percentDecode);
	    }
	    return result;
	  }
	};

	var find = /[!'()~]|%20/g;

	var replacements = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function (match) {
	  return replacements[match];
	};

	var serialize = function (it) {
	  return replace$1(encodeURIComponent$1(it), find, replacer);
	};

	var validateArgumentsLength = function (passed, required) {
	  if (passed < required) throw TypeError$1('Not enough arguments');
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;
	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  } return step;
	}, true);

	var URLSearchParamsState = function (init) {
	  this.entries = [];
	  this.url = null;

	  if (init !== undefined) {
	    if (isObject(init)) this.parseObject(init);
	    else this.parseQuery(typeof init == 'string' ? charAt$1(init, 0) === '?' ? stringSlice$2(init, 1) : init : toString$1(init));
	  }
	};

	URLSearchParamsState.prototype = {
	  type: URL_SEARCH_PARAMS,
	  bindURL: function (url) {
	    this.url = url;
	    this.update();
	  },
	  parseObject: function (object) {
	    var iteratorMethod = getIteratorMethod(object);
	    var iterator, next, step, entryIterator, entryNext, first, second;

	    if (iteratorMethod) {
	      iterator = getIterator(object, iteratorMethod);
	      next = iterator.next;
	      while (!(step = functionCall(next, iterator)).done) {
	        entryIterator = getIterator(anObject(step.value));
	        entryNext = entryIterator.next;
	        if (
	          (first = functionCall(entryNext, entryIterator)).done ||
	          (second = functionCall(entryNext, entryIterator)).done ||
	          !functionCall(entryNext, entryIterator).done
	        ) throw TypeError$1('Expected sequence with length 2');
	        push$1(this.entries, { key: toString$1(first.value), value: toString$1(second.value) });
	      }
	    } else for (var key in object) if (hasOwnProperty_1(object, key)) {
	      push$1(this.entries, { key: key, value: toString$1(object[key]) });
	    }
	  },
	  parseQuery: function (query) {
	    if (query) {
	      var attributes = split(query, '&');
	      var index = 0;
	      var attribute, entry;
	      while (index < attributes.length) {
	        attribute = attributes[index++];
	        if (attribute.length) {
	          entry = split(attribute, '=');
	          push$1(this.entries, {
	            key: deserialize(shift(entry)),
	            value: deserialize(join$1(entry, '='))
	          });
	        }
	      }
	    }
	  },
	  serialize: function () {
	    var entries = this.entries;
	    var result = [];
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      push$1(result, serialize(entry.key) + '=' + serialize(entry.value));
	    } return join$1(result, '&');
	  },
	  update: function () {
	    this.entries.length = 0;
	    this.parseQuery(this.url.query);
	  },
	  updateURL: function () {
	    if (this.url) this.url.update();
	  }
	};

	// `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams
	var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
	  anInstance(this, URLSearchParamsPrototype);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  setInternalState(this, new URLSearchParamsState(init));
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.append` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    push$1(state.entries, { key: toString$1(name), value: toString$1(value) });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = toString$1(name);
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index].key === key) splice(entries, index, 1);
	      else index++;
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = toString$1(name);
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }
	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = toString$1(name);
	    var result = [];
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) push$1(result, entries[index].value);
	    }
	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = toString$1(name);
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }
	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = toString$1(name);
	    var val = toString$1(value);
	    var index = 0;
	    var entry;
	    for (; index < entries.length; index++) {
	      entry = entries[index];
	      if (entry.key === key) {
	        if (found) splice(entries, index--, 1);
	        else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }
	    if (!found) push$1(entries, { key: key, value: val });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    arraySort(state.entries, function (a, b) {
	      return a.key > b.key ? 1 : -1;
	    });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback /* , thisArg */) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = functionBindContext(callback, arguments.length > 1 ? arguments[1] : undefined);
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, { enumerable: true });

	// `URLSearchParams.prototype[@@iterator]` method
	redefine(URLSearchParamsPrototype, ITERATOR$1, URLSearchParamsPrototype.entries, { name: 'entries' });

	// `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
	redefine(URLSearchParamsPrototype, 'toString', function toString() {
	  return getInternalParamsState(this).serialize();
	}, { enumerable: true });

	setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

	_export({ global: true, forced: !nativeUrl }, {
	  URLSearchParams: URLSearchParamsConstructor
	});

	// Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
	if (!nativeUrl && isCallable(Headers)) {
	  var headersHas = functionUncurryThis(HeadersPrototype.has);
	  var headersSet = functionUncurryThis(HeadersPrototype.set);

	  var wrapRequestOptions = function (init) {
	    if (isObject(init)) {
	      var body = init.body;
	      var headers;
	      if (classof(body) === URL_SEARCH_PARAMS) {
	        headers = init.headers ? new Headers(init.headers) : new Headers();
	        if (!headersHas(headers, 'content-type')) {
	          headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	        }
	        return objectCreate(init, {
	          body: createPropertyDescriptor(0, toString$1(body)),
	          headers: createPropertyDescriptor(0, headers)
	        });
	      }
	    } return init;
	  };

	  if (isCallable(n$Fetch)) {
	    _export({ global: true, enumerable: true, forced: true }, {
	      fetch: function fetch(input /* , init */) {
	        return n$Fetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
	      }
	    });
	  }

	  if (isCallable(N$Request)) {
	    var RequestConstructor = function Request(input /* , init */) {
	      anInstance(this, RequestPrototype);
	      return new N$Request(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
	    };

	    RequestPrototype.constructor = RequestConstructor;
	    RequestConstructor.prototype = RequestPrototype;

	    _export({ global: true, forced: true }, {
	      Request: RequestConstructor
	    });
	  }
	}

	var MSIE = /MSIE .\./.test(engineUserAgent); // <- dirty ie9- check
	var Function$1 = global$1.Function;

	var wrap = function (scheduler) {
	  return function (handler, timeout /* , ...arguments */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? arraySlice$1(arguments, 2) : undefined;
	    return scheduler(boundArgs ? function () {
	      functionApply(isCallable(handler) ? handler : Function$1(handler), this, args);
	    } : handler, timeout);
	  };
	};

	// ie9- setTimeout & setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
	_export({ global: true, bind: true, forced: MSIE }, {
	  // `setTimeout` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	  setTimeout: wrap(global$1.setTimeout),
	  // `setInterval` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	  setInterval: wrap(global$1.setInterval)
	});

	// `Function.prototype.bind` method
	// https://tc39.es/ecma262/#sec-function.prototype.bind
	_export({ target: 'Function', proto: true }, {
	  bind: functionBind
	});

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime_1 = createCommonjsModule(function (module) {
	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  define(IteratorPrototype, iteratorSymbol, function () {
	    return this;
	  });

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = GeneratorFunctionPrototype;
	  define(Gp, "constructor", GeneratorFunctionPrototype);
	  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	    return this;
	  });
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  define(Gp, iteratorSymbol, function() {
	    return this;
	  });

	  define(Gp, "toString", function() {
	    return "[object Generator]";
	  });

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	  module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, in modern engines
	  // we can explicitly access globalThis. In older engines we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  if (typeof globalThis === "object") {
	    globalThis.regeneratorRuntime = runtime;
	  } else {
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	}
	});

	var regenerator = runtime_1;

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};
	  var target = _objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	var dayjs_min = createCommonjsModule(function (module, exports) {
	!function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",f="month",h="quarter",c="year",d="date",$="Invalid Date",l=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},m=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return +(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return {M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},D="en",v={};v[D]=M;var p=function(t){return t instanceof _},S=function(t,e,n){var r;if(!t)return D;if("string"==typeof t)v[t]&&(r=t),e&&(v[t]=e,r=t);else {var i=t.name;v[i]=t,r=i;}return !n&&r&&(D=r),r||!n&&D},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t);}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init();},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},m.$utils=function(){return O},m.isValid=function(){return !(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g="set"+(this.$u?"UTC":"");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var D=this.$locale().weekStart||0,v=(y<D?y+7:y)-D;return $(r?m-v:m+(6-v),M);case a:case d:return l(g+"Hours",0);case u:return l(g+"Minutes",1);case s:return l(g+"Seconds",2);case i:return l(g+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h="set"+(this.$u?"UTC":""),$=(n={},n[a]=h+"Date",n[d]=h+"Date",n[f]=h+"Month",n[c]=h+"FullYear",n[u]=h+"Hours",n[s]=h+"Minutes",n[i]=h+"Seconds",n[r]=h+"Milliseconds",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d;}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].substr(0,s)},c=function(t){return O.s(s%12||12,t,"0")},d=n.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,"0"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,"0"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,"0"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,"0"),s:String(this.$s),ss:O.s(this.$s,2,"0"),SSS:O.s(this.$ms,3,"0"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,D=O.m(this,M);return D=(l={},l[c]=D/12,l[f]=D,l[h]=D/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?D:O.a(D)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return v[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),b=_.prototype;return w.prototype=b,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",f],["$y",c],["$D",d]].forEach((function(t){b[t[1]]=function(e){return this.$g(e,t[0],t[1])};})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=v[D],w.Ls=v,w.p={},w}));
	});

	var quarterOfYear = createCommonjsModule(function (module, exports) {
	!function(t,n){module.exports=n();}(commonjsGlobal,(function(){var t="month",n="quarter";return function(e,i){var r=i.prototype;r.quarter=function(t){return this.$utils().u(t)?Math.ceil((this.month()+1)/3):this.month(this.month()%3+3*(t-1))};var s=r.add;r.add=function(e,i){return e=Number(e),this.$utils().p(i)===n?this.add(3*e,t):s.bind(this)(e,i)};var u=r.startOf;r.startOf=function(e,i){var r=this.$utils(),s=!!r.u(i)||i;if(r.p(e)===n){var o=this.quarter()-1;return s?this.month(3*o).startOf(t).startOf("day"):this.month(3*o+2).endOf(t).endOf("day")}return u.bind(this)(e,i)};}}));
	});

	var en = createCommonjsModule(function (module, exports) {
	!function(e,n){module.exports=n();}(commonjsGlobal,(function(){return {name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")}}));
	});

	createCommonjsModule(function (module, exports) {
	var global = typeof self !== 'undefined' ? self : commonjsGlobal;
	var __self__ = (function () {
	function F() {
	this.fetch = false;
	this.DOMException = global.DOMException;
	}
	F.prototype = global;
	return new F();
	})();
	(function(self) {

	((function (exports) {

	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob:
	      'FileReader' in self &&
	      'Blob' in self &&
	      (function() {
	        try {
	          new Blob();
	          return true
	        } catch (e) {
	          return false
	        }
	      })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  };

	  function isDataView(obj) {
	    return obj && DataView.prototype.isPrototypeOf(obj)
	  }

	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ];

	    var isArrayBufferView =
	      ArrayBuffer.isView ||
	      function(obj) {
	        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	      };
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name);
	    }
	    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value);
	    }
	    return value
	  }

	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift();
	        return {done: value === undefined, value: value}
	      }
	    };

	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      };
	    }

	    return iterator
	  }

	  function Headers(headers) {
	    this.map = {};

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value);
	      }, this);
	    } else if (Array.isArray(headers)) {
	      headers.forEach(function(header) {
	        this.append(header[0], header[1]);
	      }, this);
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name]);
	      }, this);
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name);
	    value = normalizeValue(value);
	    var oldValue = this.map[name];
	    this.map[name] = oldValue ? oldValue + ', ' + value : value;
	  };

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)];
	  };

	  Headers.prototype.get = function(name) {
	    name = normalizeName(name);
	    return this.has(name) ? this.map[name] : null
	  };

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  };

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value);
	  };

	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this);
	      }
	    }
	  };

	  Headers.prototype.keys = function() {
	    var items = [];
	    this.forEach(function(value, name) {
	      items.push(name);
	    });
	    return iteratorFor(items)
	  };

	  Headers.prototype.values = function() {
	    var items = [];
	    this.forEach(function(value) {
	      items.push(value);
	    });
	    return iteratorFor(items)
	  };

	  Headers.prototype.entries = function() {
	    var items = [];
	    this.forEach(function(value, name) {
	      items.push([name, value]);
	    });
	    return iteratorFor(items)
	  };

	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true;
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result);
	      };
	      reader.onerror = function() {
	        reject(reader.error);
	      };
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader();
	    var promise = fileReaderReady(reader);
	    reader.readAsArrayBuffer(blob);
	    return promise
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader();
	    var promise = fileReaderReady(reader);
	    reader.readAsText(blob);
	    return promise
	  }

	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf);
	    var chars = new Array(view.length);

	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i]);
	    }
	    return chars.join('')
	  }

	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength);
	      view.set(new Uint8Array(buf));
	      return view.buffer
	    }
	  }

	  function Body() {
	    this.bodyUsed = false;

	    this._initBody = function(body) {
	      this._bodyInit = body;
	      if (!body) {
	        this._bodyText = '';
	      } else if (typeof body === 'string') {
	        this._bodyText = body;
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body;
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body;
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString();
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer);
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer]);
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body);
	      } else {
	        this._bodyText = body = Object.prototype.toString.call(body);
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8');
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type);
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	        }
	      }
	    };

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this);
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      };

	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      };
	    }

	    this.text = function() {
	      var rejected = consumed(this);
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    };

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      };
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    };

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase();
	    return methods.indexOf(upcased) > -1 ? upcased : method
	  }

	  function Request(input, options) {
	    options = options || {};
	    var body = options.body;

	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url;
	      this.credentials = input.credentials;
	      if (!options.headers) {
	        this.headers = new Headers(input.headers);
	      }
	      this.method = input.method;
	      this.mode = input.mode;
	      this.signal = input.signal;
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit;
	        input.bodyUsed = true;
	      }
	    } else {
	      this.url = String(input);
	    }

	    this.credentials = options.credentials || this.credentials || 'same-origin';
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers);
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET');
	    this.mode = options.mode || this.mode || null;
	    this.signal = options.signal || this.signal;
	    this.referrer = null;

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body);
	  }

	  Request.prototype.clone = function() {
	    return new Request(this, {body: this._bodyInit})
	  };

	  function decode(body) {
	    var form = new FormData();
	    body
	      .trim()
	      .split('&')
	      .forEach(function(bytes) {
	        if (bytes) {
	          var split = bytes.split('=');
	          var name = split.shift().replace(/\+/g, ' ');
	          var value = split.join('=').replace(/\+/g, ' ');
	          form.append(decodeURIComponent(name), decodeURIComponent(value));
	        }
	      });
	    return form
	  }

	  function parseHeaders(rawHeaders) {
	    var headers = new Headers();
	    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	    // https://tools.ietf.org/html/rfc7230#section-3.2
	    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
	    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':');
	      var key = parts.shift().trim();
	      if (key) {
	        var value = parts.join(':').trim();
	        headers.append(key, value);
	      }
	    });
	    return headers
	  }

	  Body.call(Request.prototype);

	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {};
	    }

	    this.type = 'default';
	    this.status = options.status === undefined ? 200 : options.status;
	    this.ok = this.status >= 200 && this.status < 300;
	    this.statusText = 'statusText' in options ? options.statusText : 'OK';
	    this.headers = new Headers(options.headers);
	    this.url = options.url || '';
	    this._initBody(bodyInit);
	  }

	  Body.call(Response.prototype);

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  };

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''});
	    response.type = 'error';
	    return response
	  };

	  var redirectStatuses = [301, 302, 303, 307, 308];

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  };

	  exports.DOMException = self.DOMException;
	  try {
	    new exports.DOMException();
	  } catch (err) {
	    exports.DOMException = function(message, name) {
	      this.message = message;
	      this.name = name;
	      var error = Error(message);
	      this.stack = error.stack;
	    };
	    exports.DOMException.prototype = Object.create(Error.prototype);
	    exports.DOMException.prototype.constructor = exports.DOMException;
	  }

	  function fetch(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init);

	      if (request.signal && request.signal.aborted) {
	        return reject(new exports.DOMException('Aborted', 'AbortError'))
	      }

	      var xhr = new XMLHttpRequest();

	      function abortXhr() {
	        xhr.abort();
	      }

	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        };
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	        var body = 'response' in xhr ? xhr.response : xhr.responseText;
	        resolve(new Response(body, options));
	      };

	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'));
	      };

	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'));
	      };

	      xhr.onabort = function() {
	        reject(new exports.DOMException('Aborted', 'AbortError'));
	      };

	      xhr.open(request.method, request.url, true);

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true;
	      } else if (request.credentials === 'omit') {
	        xhr.withCredentials = false;
	      }

	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob';
	      }

	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value);
	      });

	      if (request.signal) {
	        request.signal.addEventListener('abort', abortXhr);

	        xhr.onreadystatechange = function() {
	          // DONE (success or failure)
	          if (xhr.readyState === 4) {
	            request.signal.removeEventListener('abort', abortXhr);
	          }
	        };
	      }

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	    })
	  }

	  fetch.polyfill = true;

	  if (!self.fetch) {
	    self.fetch = fetch;
	    self.Headers = Headers;
	    self.Request = Request;
	    self.Response = Response;
	  }

	  exports.Headers = Headers;
	  exports.Request = Request;
	  exports.Response = Response;
	  exports.fetch = fetch;

	  Object.defineProperty(exports, '__esModule', { value: true });

	  return exports;

	})({}));
	})(__self__);
	__self__.fetch.ponyfill = true;
	// Remove "polyfill" property added by whatwg-fetch
	delete __self__.fetch.polyfill;
	// Choose between native implementation (global) or custom implementation (__self__)
	// var ctx = global.fetch ? global : __self__;
	var ctx = __self__; // this line disable service worker support temporarily
	exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
	exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
	exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
	exports.Headers = ctx.Headers;
	exports.Request = ctx.Request;
	exports.Response = ctx.Response;
	module.exports = exports;
	});

	/**
	 *
	 *
	 * @author Jerry Bendy <jerry@icewingcc.com>
	 * @licence MIT
	 *
	 */

	(function(self) {

	    var nativeURLSearchParams = (self.URLSearchParams && self.URLSearchParams.prototype.get) ? self.URLSearchParams : null,
	        isSupportObjectConstructor = nativeURLSearchParams && (new nativeURLSearchParams({a: 1})).toString() === 'a=1',
	        // There is a bug in safari 10.1 (and earlier) that incorrectly decodes `%2B` as an empty space and not a plus.
	        decodesPlusesCorrectly = nativeURLSearchParams && (new nativeURLSearchParams('s=%2B').get('s') === '+'),
	        __URLSearchParams__ = "__URLSearchParams__",
	        // Fix bug in Edge which cannot encode ' &' correctly
	        encodesAmpersandsCorrectly = nativeURLSearchParams ? (function() {
	            var ampersandTest = new nativeURLSearchParams();
	            ampersandTest.append('s', ' &');
	            return ampersandTest.toString() === 's=+%26';
	        })() : true,
	        prototype = URLSearchParamsPolyfill.prototype,
	        iterable = !!(self.Symbol && self.Symbol.iterator);

	    if (nativeURLSearchParams && isSupportObjectConstructor && decodesPlusesCorrectly && encodesAmpersandsCorrectly) {
	        return;
	    }


	    /**
	     * Make a URLSearchParams instance
	     *
	     * @param {object|string|URLSearchParams} search
	     * @constructor
	     */
	    function URLSearchParamsPolyfill(search) {
	        search = search || "";

	        // support construct object with another URLSearchParams instance
	        if (search instanceof URLSearchParams || search instanceof URLSearchParamsPolyfill) {
	            search = search.toString();
	        }
	        this [__URLSearchParams__] = parseToDict(search);
	    }


	    /**
	     * Appends a specified key/value pair as a new search parameter.
	     *
	     * @param {string} name
	     * @param {string} value
	     */
	    prototype.append = function(name, value) {
	        appendTo(this [__URLSearchParams__], name, value);
	    };

	    /**
	     * Deletes the given search parameter, and its associated value,
	     * from the list of all search parameters.
	     *
	     * @param {string} name
	     */
	    prototype['delete'] = function(name) {
	        delete this [__URLSearchParams__] [name];
	    };

	    /**
	     * Returns the first value associated to the given search parameter.
	     *
	     * @param {string} name
	     * @returns {string|null}
	     */
	    prototype.get = function(name) {
	        var dict = this [__URLSearchParams__];
	        return name in dict ? dict[name][0] : null;
	    };

	    /**
	     * Returns all the values association with a given search parameter.
	     *
	     * @param {string} name
	     * @returns {Array}
	     */
	    prototype.getAll = function(name) {
	        var dict = this [__URLSearchParams__];
	        return name in dict ? dict [name].slice(0) : [];
	    };

	    /**
	     * Returns a Boolean indicating if such a search parameter exists.
	     *
	     * @param {string} name
	     * @returns {boolean}
	     */
	    prototype.has = function(name) {
	        return name in this [__URLSearchParams__];
	    };

	    /**
	     * Sets the value associated to a given search parameter to
	     * the given value. If there were several values, delete the
	     * others.
	     *
	     * @param {string} name
	     * @param {string} value
	     */
	    prototype.set = function set(name, value) {
	        this [__URLSearchParams__][name] = ['' + value];
	    };

	    /**
	     * Returns a string containg a query string suitable for use in a URL.
	     *
	     * @returns {string}
	     */
	    prototype.toString = function() {
	        var dict = this[__URLSearchParams__], query = [], i, key, name, value;
	        for (key in dict) {
	            name = encode(key);
	            for (i = 0, value = dict[key]; i < value.length; i++) {
	                query.push(name + '=' + encode(value[i]));
	            }
	        }
	        return query.join('&');
	    };

	    // There is a bug in Safari 10.1 and `Proxy`ing it is not enough.
	    var forSureUsePolyfill = !decodesPlusesCorrectly;
	    var useProxy = (!forSureUsePolyfill && nativeURLSearchParams && !isSupportObjectConstructor && self.Proxy);
	    /*
	     * Apply polifill to global object and append other prototype into it
	     */
	    Object.defineProperty(self, 'URLSearchParams', {
	        value: (useProxy ?
	            // Safari 10.0 doesn't support Proxy, so it won't extend URLSearchParams on safari 10.0
	            new Proxy(nativeURLSearchParams, {
	                construct: function(target, args) {
	                    return new target((new URLSearchParamsPolyfill(args[0]).toString()));
	                }
	            }) :
	            URLSearchParamsPolyfill)
	    });

	    var USPProto = self.URLSearchParams.prototype;

	    USPProto.polyfill = true;

	    /**
	     *
	     * @param {function} callback
	     * @param {object} thisArg
	     */
	    USPProto.forEach = USPProto.forEach || function(callback, thisArg) {
	        var dict = parseToDict(this.toString());
	        Object.getOwnPropertyNames(dict).forEach(function(name) {
	            dict[name].forEach(function(value) {
	                callback.call(thisArg, value, name, this);
	            }, this);
	        }, this);
	    };

	    /**
	     * Sort all name-value pairs
	     */
	    USPProto.sort = USPProto.sort || function() {
	        var dict = parseToDict(this.toString()), keys = [], k, i, j;
	        for (k in dict) {
	            keys.push(k);
	        }
	        keys.sort();

	        for (i = 0; i < keys.length; i++) {
	            this['delete'](keys[i]);
	        }
	        for (i = 0; i < keys.length; i++) {
	            var key = keys[i], values = dict[key];
	            for (j = 0; j < values.length; j++) {
	                this.append(key, values[j]);
	            }
	        }
	    };

	    /**
	     * Returns an iterator allowing to go through all keys of
	     * the key/value pairs contained in this object.
	     *
	     * @returns {function}
	     */
	    USPProto.keys = USPProto.keys || function() {
	        var items = [];
	        this.forEach(function(item, name) {
	            items.push(name);
	        });
	        return makeIterator(items);
	    };

	    /**
	     * Returns an iterator allowing to go through all values of
	     * the key/value pairs contained in this object.
	     *
	     * @returns {function}
	     */
	    USPProto.values = USPProto.values || function() {
	        var items = [];
	        this.forEach(function(item) {
	            items.push(item);
	        });
	        return makeIterator(items);
	    };

	    /**
	     * Returns an iterator allowing to go through all key/value
	     * pairs contained in this object.
	     *
	     * @returns {function}
	     */
	    USPProto.entries = USPProto.entries || function() {
	        var items = [];
	        this.forEach(function(item, name) {
	            items.push([name, item]);
	        });
	        return makeIterator(items);
	    };


	    if (iterable) {
	        USPProto[self.Symbol.iterator] = USPProto[self.Symbol.iterator] || USPProto.entries;
	    }


	    function encode(str) {
	        var replace = {
	            '!': '%21',
	            "'": '%27',
	            '(': '%28',
	            ')': '%29',
	            '~': '%7E',
	            '%20': '+',
	            '%00': '\x00'
	        };
	        return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function(match) {
	            return replace[match];
	        });
	    }

	    function decode(str) {
	        return str
	            .replace(/[ +]/g, '%20')
	            .replace(/(%[a-f0-9]{2})+/ig, function(match) {
	                return decodeURIComponent(match);
	            });
	    }

	    function makeIterator(arr) {
	        var iterator = {
	            next: function() {
	                var value = arr.shift();
	                return {done: value === undefined, value: value};
	            }
	        };

	        if (iterable) {
	            iterator[self.Symbol.iterator] = function() {
	                return iterator;
	            };
	        }

	        return iterator;
	    }

	    function parseToDict(search) {
	        var dict = {};

	        if (typeof search === "object") {
	            // if `search` is an array, treat it as a sequence
	            if (isArray(search)) {
	                for (var i = 0; i < search.length; i++) {
	                    var item = search[i];
	                    if (isArray(item) && item.length === 2) {
	                        appendTo(dict, item[0], item[1]);
	                    } else {
	                        throw new TypeError("Failed to construct 'URLSearchParams': Sequence initializer must only contain pair elements");
	                    }
	                }

	            } else {
	                for (var key in search) {
	                    if (search.hasOwnProperty(key)) {
	                        appendTo(dict, key, search[key]);
	                    }
	                }
	            }

	        } else {
	            // remove first '?'
	            if (search.indexOf("?") === 0) {
	                search = search.slice(1);
	            }

	            var pairs = search.split("&");
	            for (var j = 0; j < pairs.length; j++) {
	                var value = pairs [j],
	                    index = value.indexOf('=');

	                if (-1 < index) {
	                    appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));

	                } else {
	                    if (value) {
	                        appendTo(dict, decode(value), '');
	                    }
	                }
	            }
	        }

	        return dict;
	    }

	    function appendTo(dict, name, value) {
	        var val = typeof value === 'string' ? value : (
	            value !== null && value !== undefined && typeof value.toString === 'function' ? value.toString() : JSON.stringify(value)
	        );

	        if (name in dict) {
	            dict[name].push(val);
	        } else {
	            dict[name] = [val];
	        }
	    }

	    function isArray(val) {
	        return !!val && '[object Array]' === Object.prototype.toString.call(val);
	    }

	})(typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : (typeof window !== 'undefined' ? window : commonjsGlobal));

	var _excluded$2 = ["query"];

	function ownKeys$3$1(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$3$1(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys$3$1(Object(source), !0).forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3$1(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }

	  return target;
	}

	var DEFAULT_GRANULARITY = 'day';

	function areQueriesEqual() {
	  var query1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var query2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  return equals(Object.entries(query1 && query1.order || {}), Object.entries(query2 && query2.order || {})) && equals(query1, query2);
	}

	function defaultOrder(query) {
	  var granularity = (query.timeDimensions || []).find(function (d) {
	    return d.granularity;
	  });

	  if (granularity) {
	    return _defineProperty({}, granularity.dimension, 'asc');
	  } else if ((query.measures || []).length > 0 && (query.dimensions || []).length > 0) {
	    return _defineProperty({}, query.measures[0], 'desc');
	  } else if ((query.dimensions || []).length > 0) {
	    return _defineProperty({}, query.dimensions[0], 'asc');
	  }

	  return {};
	}

	function defaultHeuristics(newState) {
	  var oldQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var options = arguments.length > 2 ? arguments[2] : undefined;

	  var _clone = clone(newState),
	      query = _clone.query,
	      props = _objectWithoutProperties(_clone, _excluded$2);

	  var meta = options.meta,
	      sessionGranularity = options.sessionGranularity;
	  var granularity = sessionGranularity || DEFAULT_GRANULARITY;

	  var state = _objectSpread$3$1({
	    query: query
	  }, props);

	  var newQuery = null;

	  if (!areQueriesEqual(query, oldQuery)) {
	    newQuery = query;
	  }

	  if (Array.isArray(newQuery) || Array.isArray(oldQuery)) {
	    return newState;
	  }

	  if (newQuery) {
	    if ((oldQuery.timeDimensions || []).length === 1 && (newQuery.timeDimensions || []).length === 1 && newQuery.timeDimensions[0].granularity && oldQuery.timeDimensions[0].granularity !== newQuery.timeDimensions[0].granularity) {
	      state = _objectSpread$3$1(_objectSpread$3$1({}, state), {}, {
	        sessionGranularity: newQuery.timeDimensions[0].granularity
	      });
	    }

	    if ((oldQuery.measures || []).length === 0 && (newQuery.measures || []).length > 0 || (oldQuery.measures || []).length === 1 && (newQuery.measures || []).length === 1 && oldQuery.measures[0] !== newQuery.measures[0]) {
	      var _ref4 = newQuery.timeDimensions || [],
	          _ref5 = _slicedToArray(_ref4, 1),
	          td = _ref5[0];

	      var defaultTimeDimension = meta.defaultTimeDimensionNameFor(newQuery.measures[0]);
	      newQuery = _objectSpread$3$1(_objectSpread$3$1({}, newQuery), {}, {
	        timeDimensions: defaultTimeDimension ? [{
	          dimension: defaultTimeDimension,
	          granularity: td && td.granularity || granularity,
	          dateRange: td && td.dateRange
	        }] : []
	      });
	      return _objectSpread$3$1(_objectSpread$3$1({}, state), {}, {
	        pivotConfig: null,
	        shouldApplyHeuristicOrder: true,
	        query: newQuery,
	        chartType: defaultTimeDimension ? 'line' : 'number'
	      });
	    }

	    if ((oldQuery.dimensions || []).length === 0 && (newQuery.dimensions || []).length > 0) {
	      newQuery = _objectSpread$3$1(_objectSpread$3$1({}, newQuery), {}, {
	        timeDimensions: (newQuery.timeDimensions || []).map(function (td) {
	          return _objectSpread$3$1(_objectSpread$3$1({}, td), {}, {
	            granularity: undefined
	          });
	        })
	      });
	      return _objectSpread$3$1(_objectSpread$3$1({}, state), {}, {
	        pivotConfig: null,
	        shouldApplyHeuristicOrder: true,
	        query: newQuery,
	        chartType: 'table'
	      });
	    }

	    if ((oldQuery.dimensions || []).length > 0 && (newQuery.dimensions || []).length === 0) {
	      newQuery = _objectSpread$3$1(_objectSpread$3$1({}, newQuery), {}, {
	        timeDimensions: (newQuery.timeDimensions || []).map(function (td) {
	          return _objectSpread$3$1(_objectSpread$3$1({}, td), {}, {
	            granularity: td.granularity || granularity
	          });
	        })
	      });
	      return _objectSpread$3$1(_objectSpread$3$1({}, state), {}, {
	        pivotConfig: null,
	        shouldApplyHeuristicOrder: true,
	        query: newQuery,
	        chartType: (newQuery.timeDimensions || []).length ? 'line' : 'number'
	      });
	    }

	    if (((oldQuery.dimensions || []).length > 0 || (oldQuery.measures || []).length > 0) && (newQuery.dimensions || []).length === 0 && (newQuery.measures || []).length === 0) {
	      newQuery = _objectSpread$3$1(_objectSpread$3$1({}, newQuery), {}, {
	        timeDimensions: [],
	        filters: []
	      });
	      return _objectSpread$3$1(_objectSpread$3$1({}, state), {}, {
	        pivotConfig: null,
	        shouldApplyHeuristicOrder: true,
	        query: newQuery,
	        sessionGranularity: null
	      });
	    }

	    return state;
	  }

	  if (state.chartType) {
	    var newChartType = state.chartType;

	    if ((newChartType === 'line' || newChartType === 'area') && (oldQuery.timeDimensions || []).length === 1 && !oldQuery.timeDimensions[0].granularity) {
	      var _oldQuery$timeDimensi = _slicedToArray(oldQuery.timeDimensions, 1),
	          _td = _oldQuery$timeDimensi[0];

	      return _objectSpread$3$1(_objectSpread$3$1({}, state), {}, {
	        pivotConfig: null,
	        query: _objectSpread$3$1(_objectSpread$3$1({}, oldQuery), {}, {
	          timeDimensions: [_objectSpread$3$1(_objectSpread$3$1({}, _td), {}, {
	            granularity: granularity
	          })]
	        })
	      });
	    }

	    if ((newChartType === 'pie' || newChartType === 'table' || newChartType === 'number') && (oldQuery.timeDimensions || []).length === 1 && oldQuery.timeDimensions[0].granularity) {
	      var _oldQuery$timeDimensi2 = _slicedToArray(oldQuery.timeDimensions, 1),
	          _td2 = _oldQuery$timeDimensi2[0];

	      return _objectSpread$3$1(_objectSpread$3$1({}, state), {}, {
	        pivotConfig: null,
	        shouldApplyHeuristicOrder: true,
	        query: _objectSpread$3$1(_objectSpread$3$1({}, oldQuery), {}, {
	          timeDimensions: [_objectSpread$3$1(_objectSpread$3$1({}, _td2), {}, {
	            granularity: undefined
	          })]
	        })
	      });
	    }
	  }

	  return state;
	}

	function isQueryPresent(query) {
	  if (!query) {
	    return false;
	  }

	  return (Array.isArray(query) ? query : [query]).every(function (q) {
	    return q.measures && q.measures.length || q.dimensions && q.dimensions.length || q.timeDimensions && q.timeDimensions.length;
	  });
	}

	function movePivotItem(pivotConfig, sourceIndex, destinationIndex, sourceAxis, destinationAxis) {
	  var nextPivotConfig = _objectSpread$3$1(_objectSpread$3$1({}, pivotConfig), {}, {
	    x: _toConsumableArray(pivotConfig.x),
	    y: _toConsumableArray(pivotConfig.y)
	  });

	  var id = pivotConfig[sourceAxis][sourceIndex];
	  var lastIndex = nextPivotConfig[destinationAxis].length - 1;

	  if (id === 'measures') {
	    destinationIndex = lastIndex + 1;
	  } else if (destinationIndex >= lastIndex && nextPivotConfig[destinationAxis][lastIndex] === 'measures') {
	    destinationIndex = lastIndex - 1;
	  }

	  nextPivotConfig[sourceAxis].splice(sourceIndex, 1);
	  nextPivotConfig[destinationAxis].splice(destinationIndex, 0, id);
	  return nextPivotConfig;
	}

	function moveItemInArray(list, sourceIndex, destinationIndex) {
	  var result = _toConsumableArray(list);

	  var _result$splice = result.splice(sourceIndex, 1),
	      _result$splice2 = _slicedToArray(_result$splice, 1),
	      removed = _result$splice2[0];

	  result.splice(destinationIndex, 0, removed);
	  return result;
	}

	function flattenFilters() {
	  var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  return filters.reduce(function (memo, filter) {
	    if (filter.or || filter.and) {
	      return [].concat(_toConsumableArray(memo), _toConsumableArray(flattenFilters(filter.or || filter.and)));
	    }

	    return [].concat(_toConsumableArray(memo), [filter]);
	  }, []);
	}

	function getQueryMembers() {
	  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var keys = ['measures', 'dimensions', 'segments'];
	  var members = new Set();
	  keys.forEach(function (key) {
	    return (query[key] || []).forEach(function (member) {
	      return members.add(member);
	    });
	  });
	  (query.timeDimensions || []).forEach(function (td) {
	    return members.add(td.dimension);
	  });
	  flattenFilters(query.filters).forEach(function (filter) {
	    return members.add(filter.dimension || filter.member);
	  });
	  return _toConsumableArray(members);
	}

	function aliasSeries(values, index, pivotConfig, duplicateMeasures) {
	  var nonNullValues = values.filter(function (value) {
	    return value != null;
	  });

	  if (pivotConfig && pivotConfig.aliasSeries && pivotConfig.aliasSeries[index]) {
	    return [pivotConfig.aliasSeries[index]].concat(_toConsumableArray(nonNullValues));
	  } else if (duplicateMeasures.has(nonNullValues[0])) {
	    return [index].concat(_toConsumableArray(nonNullValues));
	  }

	  return nonNullValues;
	}

	var _excluded$1$1 = ["x"],
	    _excluded2 = ["key"],
	    _excluded3 = ["title", "shortTitle"];

	function ownKeys$2$1(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread$2$1(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys$2$1(Object(source), !0).forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2$1(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }

	  return target;
	}

	dayjs_min.extend(quarterOfYear); // When granularity is week, weekStart Value must be 1. However, since the client can change it globally (https://day.js.org/docs/en/i18n/changing-locale)
	// So the function below has been added.

	var internalDayjs = function internalDayjs() {
	  return dayjs_min.apply(void 0, arguments).locale(_objectSpread$2$1(_objectSpread$2$1({}, en), {}, {
	    weekStart: 1
	  }));
	};

	var TIME_SERIES = {
	  day: function day(range) {
	    return range.by('d').map(function (d) {
	      return d.format('YYYY-MM-DDT00:00:00.000');
	    });
	  },
	  month: function month(range) {
	    return range.snapTo('month').by('M').map(function (d) {
	      return d.format('YYYY-MM-01T00:00:00.000');
	    });
	  },
	  year: function year(range) {
	    return range.snapTo('year').by('y').map(function (d) {
	      return d.format('YYYY-01-01T00:00:00.000');
	    });
	  },
	  hour: function hour(range) {
	    return range.by('h').map(function (d) {
	      return d.format('YYYY-MM-DDTHH:00:00.000');
	    });
	  },
	  minute: function minute(range) {
	    return range.by('m').map(function (d) {
	      return d.format('YYYY-MM-DDTHH:mm:00.000');
	    });
	  },
	  second: function second(range) {
	    return range.by('s').map(function (d) {
	      return d.format('YYYY-MM-DDTHH:mm:ss.000');
	    });
	  },
	  week: function week(range) {
	    return range.snapTo('week').by('w').map(function (d) {
	      return d.startOf('week').format('YYYY-MM-DDT00:00:00.000');
	    });
	  },
	  quarter: function quarter(range) {
	    return range.snapTo('quarter').by('quarter').map(function (d) {
	      return d.startOf('quarter').format('YYYY-MM-DDT00:00:00.000');
	    });
	  }
	};
	var DateRegex = /^\d\d\d\d-\d\d-\d\d$/;
	var LocalDateRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z?$/;

	var groupByToPairs = function groupByToPairs(keyFn) {
	  var acc = new Map();
	  return function (data) {
	    data.forEach(function (row) {
	      var key = keyFn(row);

	      if (!acc.has(key)) {
	        acc.set(key, []);
	      }

	      acc.get(key).push(row);
	    });
	    return Array.from(acc.entries());
	  };
	};

	var unnest = function unnest(arr) {
	  var res = [];
	  arr.forEach(function (subArr) {
	    subArr.forEach(function (element) {
	      return res.push(element);
	    });
	  });
	  return res;
	};

	var dayRange = function dayRange(from, to) {
	  return {
	    by: function by(value) {
	      var results = [];
	      var start = internalDayjs(from);
	      var end = internalDayjs(to);

	      while (start.isBefore(end) || start.isSame(end)) {
	        results.push(start);
	        start = start.add(1, value);
	      }

	      return results;
	    },
	    snapTo: function snapTo(value) {
	      return dayRange(internalDayjs(from).startOf(value), internalDayjs(to).endOf(value));
	    },
	    start: internalDayjs(from),
	    end: internalDayjs(to)
	  };
	};

	var QUERY_TYPE = {
	  REGULAR_QUERY: 'regularQuery',
	  COMPARE_DATE_RANGE_QUERY: 'compareDateRangeQuery',
	  BLENDING_QUERY: 'blendingQuery'
	};

	var ResultSet = /*#__PURE__*/function () {
	  function ResultSet(loadResponse) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck$1(this, ResultSet);

	    this.loadResponse = loadResponse;

	    if (this.loadResponse.queryType != null) {
	      this.queryType = loadResponse.queryType;
	      this.loadResponses = loadResponse.results;
	    } else {
	      this.queryType = QUERY_TYPE.REGULAR_QUERY;
	      this.loadResponse.pivotQuery = _objectSpread$2$1(_objectSpread$2$1({}, loadResponse.query), {}, {
	        queryType: this.queryType
	      });
	      this.loadResponses = [loadResponse];
	    }

	    if (!Object.values(QUERY_TYPE).includes(this.queryType)) {
	      throw new Error('Unknown query type');
	    }

	    this.parseDateMeasures = options.parseDateMeasures;
	    this.options = options;
	    this.backwardCompatibleData = [];
	  }

	  _createClass$1(ResultSet, [{
	    key: "drillDown",
	    value: function drillDown(drillDownLocator, pivotConfig) {
	      if (this.queryType === QUERY_TYPE.COMPARE_DATE_RANGE_QUERY) {
	        throw new Error('compareDateRange drillDown query is not currently supported');
	      }

	      if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {
	        throw new Error('Data blending drillDown query is not currently supported');
	      }

	      var _drillDownLocator$xVa = drillDownLocator.xValues,
	          xValues = _drillDownLocator$xVa === void 0 ? [] : _drillDownLocator$xVa,
	          _drillDownLocator$yVa = drillDownLocator.yValues,
	          yValues = _drillDownLocator$yVa === void 0 ? [] : _drillDownLocator$yVa;
	      var normalizedPivotConfig = this.normalizePivotConfig(pivotConfig);
	      var values = [];
	      normalizedPivotConfig.x.forEach(function (member, currentIndex) {
	        return values.push([member, xValues[currentIndex]]);
	      });
	      normalizedPivotConfig.y.forEach(function (member, currentIndex) {
	        return values.push([member, yValues[currentIndex]]);
	      });

	      var _this$query = this.query(),
	          _this$query$filters = _this$query.filters,
	          parentFilters = _this$query$filters === void 0 ? [] : _this$query$filters,
	          _this$query$segments = _this$query.segments,
	          segments = _this$query$segments === void 0 ? [] : _this$query$segments;

	      var measures = this.loadResponses[0].annotation.measures;

	      var _ref = values.find(function (_ref3) {
	        var _ref4 = _slicedToArray(_ref3, 1),
	            member = _ref4[0];

	        return member === 'measures';
	      }) || [],
	          _ref2 = _slicedToArray(_ref, 2),
	          measureName = _ref2[1];

	      if (measureName === undefined) {
	        var _Object$keys = Object.keys(measures);

	        var _Object$keys2 = _slicedToArray(_Object$keys, 1);

	        measureName = _Object$keys2[0];
	      }

	      if (!(measures[measureName] && measures[measureName].drillMembers || []).length) {
	        return null;
	      }

	      var filters = [{
	        member: measureName,
	        operator: 'measureFilter'
	      }].concat(_toConsumableArray(parentFilters));
	      var timeDimensions = [];
	      values.filter(function (_ref5) {
	        var _ref6 = _slicedToArray(_ref5, 1),
	            member = _ref6[0];

	        return member !== 'measures';
	      }).forEach(function (_ref7) {
	        var _ref8 = _slicedToArray(_ref7, 2),
	            member = _ref8[0],
	            value = _ref8[1];

	        var _member$split = member.split('.'),
	            _member$split2 = _slicedToArray(_member$split, 3),
	            cubeName = _member$split2[0],
	            dimension = _member$split2[1],
	            granularity = _member$split2[2];

	        if (granularity !== undefined) {
	          var range = dayRange(value, value).snapTo(granularity);
	          timeDimensions.push({
	            dimension: [cubeName, dimension].join('.'),
	            dateRange: [range.start, range.end].map(function (dt) {
	              return dt.format('YYYY-MM-DDTHH:mm:ss.SSS');
	            })
	          });
	        } else if (value == null) {
	          filters.push({
	            member: member,
	            operator: 'notSet'
	          });
	        } else {
	          filters.push({
	            member: member,
	            operator: 'equals',
	            values: [value.toString()]
	          });
	        }
	      });
	      var query = this.loadResponses[0].query;

	      if (timeDimensions.length === 0 && query.timeDimensions.length > 0 && query.timeDimensions[0].granularity == null) {
	        timeDimensions.push(query.timeDimensions[0]);
	      }

	      return _objectSpread$2$1(_objectSpread$2$1(_objectSpread$2$1({}, measures[measureName].drillMembersGrouped), {}, {
	        filters: filters
	      }, segments.length > 0 ? {
	        segments: segments
	      } : {}), {}, {
	        timeDimensions: timeDimensions,
	        segments: segments,
	        timezone: query.timezone
	      });
	    }
	  }, {
	    key: "series",
	    value: function series(pivotConfig) {
	      var _this = this;

	      return this.seriesNames(pivotConfig).map(function (_ref9) {
	        var title = _ref9.title,
	            key = _ref9.key;
	        return {
	          title: title,
	          key: key,
	          series: _this.chartPivot(pivotConfig).map(function (_ref10) {
	            var x = _ref10.x,
	                obj = _objectWithoutProperties(_ref10, _excluded$1$1);

	            return {
	              value: obj[key],
	              x: x
	            };
	          })
	        };
	      });
	    }
	  }, {
	    key: "axisValues",
	    value: function axisValues(axis) {
	      var resultIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	      var query = this.loadResponses[resultIndex].query;
	      return function (row) {
	        var value = function value(measure) {
	          return axis.filter(function (d) {
	            return d !== 'measures';
	          }).map(function (d) {
	            return row[d] != null ? row[d] : null;
	          }).concat(measure ? [measure] : []);
	        };

	        if (axis.find(function (d) {
	          return d === 'measures';
	        }) && (query.measures || []).length) {
	          return query.measures.map(value);
	        }

	        return [value()];
	      };
	    }
	  }, {
	    key: "axisValuesString",
	    value: function axisValuesString(axisValues, delimiter) {
	      var formatValue = function formatValue(v) {
	        if (v == null) {
	          return 'â';
	        } else if (v === '') {
	          return '[Empty string]';
	        } else {
	          return v;
	        }
	      };

	      return axisValues.map(formatValue).join(delimiter || ', ');
	    }
	  }, {
	    key: "normalizePivotConfig",
	    value: function normalizePivotConfig(pivotConfig) {
	      return ResultSet.getNormalizedPivotConfig(this.loadResponse.pivotQuery, pivotConfig);
	    }
	  }, {
	    key: "timeSeries",
	    value: function timeSeries(timeDimension, resultIndex) {
	      if (!timeDimension.granularity) {
	        return null;
	      }

	      var dateRange = timeDimension.dateRange;

	      if (!dateRange) {
	        var member = ResultSet.timeDimensionMember(timeDimension);
	        var dates = pipe(map(function (row) {
	          return row[member] && internalDayjs(row[member]);
	        }), filter(Boolean))(this.timeDimensionBackwardCompatibleData(resultIndex));
	        dateRange = dates.length && [reduce(minBy(function (d) {
	          return d.toDate();
	        }), dates[0], dates), reduce(maxBy(function (d) {
	          return d.toDate();
	        }), dates[0], dates)] || null;
	      }

	      if (!dateRange) {
	        return null;
	      }

	      var padToDay = timeDimension.dateRange ? timeDimension.dateRange.find(function (d) {
	        return d.match(DateRegex);
	      }) : !['hour', 'minute', 'second'].includes(timeDimension.granularity);

	      var _dateRange = dateRange,
	          _dateRange2 = _slicedToArray(_dateRange, 2),
	          start = _dateRange2[0],
	          end = _dateRange2[1];

	      var range = dayRange(start, end);

	      if (!TIME_SERIES[timeDimension.granularity]) {
	        throw new Error("Unsupported time granularity: ".concat(timeDimension.granularity));
	      }

	      return TIME_SERIES[timeDimension.granularity](padToDay ? range.snapTo('d') : range);
	    }
	  }, {
	    key: "pivot",
	    value: function pivot(pivotConfig) {
	      var _this2 = this;

	      pivotConfig = this.normalizePivotConfig(pivotConfig);
	      var query = this.loadResponse.pivotQuery;

	      var pivotImpl = function pivotImpl() {
	        var resultIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	        var groupByXAxis = groupByToPairs(function (_ref11) {
	          var xValues = _ref11.xValues;
	          return _this2.axisValuesString(xValues);
	        });

	        var measureValue = function measureValue(row, measure) {
	          return row[measure] || 0;
	        };

	        if (pivotConfig.fillMissingDates && pivotConfig.x.length === 1 && equals(pivotConfig.x, (query.timeDimensions || []).filter(function (td) {
	          return Boolean(td.granularity);
	        }).map(function (td) {
	          return ResultSet.timeDimensionMember(td);
	        }))) {
	          var series = _this2.loadResponses.map(function (loadResponse) {
	            return _this2.timeSeries(loadResponse.query.timeDimensions[0], resultIndex);
	          });

	          if (series[0]) {
	            groupByXAxis = function groupByXAxis(rows) {
	              var byXValues = groupBy(function (_ref12) {
	                var xValues = _ref12.xValues;
	                return xValues[0];
	              }, rows);
	              return series[resultIndex].map(function (d) {
	                return [d, byXValues[d] || [{
	                  xValues: [d],
	                  row: {}
	                }]];
	              });
	            };
	          }
	        }

	        var xGrouped = pipe(map(function (row) {
	          return _this2.axisValues(pivotConfig.x, resultIndex)(row).map(function (xValues) {
	            return {
	              xValues: xValues,
	              row: row
	            };
	          });
	        }), unnest, groupByXAxis)(_this2.timeDimensionBackwardCompatibleData(resultIndex));
	        var yValuesMap = {};
	        xGrouped.forEach(function (_ref13) {
	          var _ref14 = _slicedToArray(_ref13, 2),
	              rows = _ref14[1];

	          rows.forEach(function (_ref15) {
	            var row = _ref15.row;

	            _this2.axisValues(pivotConfig.y, resultIndex)(row).forEach(function (values) {
	              if (Object.keys(row).length > 0) {
	                yValuesMap[values.join()] = values;
	              }
	            });
	          });
	        });
	        var allYValues = Object.values(yValuesMap);
	        var measureOnX = Boolean(pivotConfig.x.find(function (d) {
	          return d === 'measures';
	        }));
	        return xGrouped.map(function (_ref16) {
	          var _ref17 = _slicedToArray(_ref16, 2),
	              rows = _ref17[1];

	          var xValues = rows[0].xValues;
	          var yGrouped = {};
	          rows.forEach(function (_ref18) {
	            var row = _ref18.row;

	            var arr = _this2.axisValues(pivotConfig.y, resultIndex)(row).map(function (yValues) {
	              return {
	                yValues: yValues,
	                row: row
	              };
	            });

	            arr.forEach(function (res) {
	              yGrouped[_this2.axisValuesString(res.yValues)] = res;
	            });
	          });
	          return {
	            xValues: xValues,
	            yValuesArray: unnest(allYValues.map(function (yValues) {
	              var measure = measureOnX ? ResultSet.measureFromAxis(xValues) : ResultSet.measureFromAxis(yValues);
	              return [[yValues, measureValue((yGrouped[_this2.axisValuesString(yValues)] || {
	                row: {}
	              }).row, measure)]];
	            }))
	          };
	        });
	      };

	      var pivots = this.loadResponses.length > 1 ? this.loadResponses.map(function (_, index) {
	        return pivotImpl(index);
	      }) : [];
	      return pivots.length ? this.mergePivots(pivots, pivotConfig.joinDateRange) : pivotImpl();
	    }
	  }, {
	    key: "mergePivots",
	    value: function mergePivots(pivots, joinDateRange) {
	      var minLengthPivot = pivots.reduce(function (memo, current) {
	        return memo != null && current.length >= memo.length ? memo : current;
	      }, null);
	      return minLengthPivot.map(function (_, index) {
	        var xValues = joinDateRange ? [pivots.map(function (pivot) {
	          return pivot[index] && pivot[index].xValues || [];
	        }).join(', ')] : minLengthPivot[index].xValues;
	        return {
	          xValues: xValues,
	          yValuesArray: unnest(pivots.map(function (pivot) {
	            return pivot[index].yValuesArray;
	          }))
	        };
	      });
	    }
	  }, {
	    key: "pivotedRows",
	    value: function pivotedRows(pivotConfig) {
	      // TODO
	      return this.chartPivot(pivotConfig);
	    }
	  }, {
	    key: "chartPivot",
	    value: function chartPivot(pivotConfig) {
	      var _this3 = this;

	      var validate = function validate(value) {
	        if (_this3.parseDateMeasures && LocalDateRegex.test(value)) {
	          return new Date(value);
	        } else if (!Number.isNaN(Number.parseFloat(value))) {
	          return Number.parseFloat(value);
	        }

	        return value;
	      };

	      var duplicateMeasures = new Set();

	      if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {
	        var allMeasures = flatten(this.loadResponses.map(function (_ref19) {
	          var query = _ref19.query;
	          return query.measures;
	        }));
	        allMeasures.filter(function (e, i, a) {
	          return a.indexOf(e) !== i;
	        }).forEach(function (m) {
	          return duplicateMeasures.add(m);
	        });
	      }

	      return this.pivot(pivotConfig).map(function (_ref20) {
	        var xValues = _ref20.xValues,
	            yValuesArray = _ref20.yValuesArray;
	        var yValuesMap = {};
	        yValuesArray.forEach(function (_ref21, i) {
	          var _ref22 = _slicedToArray(_ref21, 2),
	              yValues = _ref22[0],
	              m = _ref22[1];

	          yValuesMap[_this3.axisValuesString(aliasSeries(yValues, i, pivotConfig, duplicateMeasures), ',')] = m && validate(m);
	        });
	        return _objectSpread$2$1({
	          x: _this3.axisValuesString(xValues, ','),
	          xValues: xValues
	        }, yValuesMap);
	      });
	    }
	  }, {
	    key: "tablePivot",
	    value: function tablePivot(pivotConfig) {
	      var normalizedPivotConfig = this.normalizePivotConfig(pivotConfig || {});
	      var isMeasuresPresent = normalizedPivotConfig.x.concat(normalizedPivotConfig.y).includes('measures');
	      return this.pivot(normalizedPivotConfig).map(function (_ref23) {
	        var xValues = _ref23.xValues,
	            yValuesArray = _ref23.yValuesArray;
	        return fromPairs(normalizedPivotConfig.x.map(function (key, index) {
	          return [key, xValues[index]];
	        }).concat(isMeasuresPresent ? yValuesArray.map(function (_ref24) {
	          var _ref25 = _slicedToArray(_ref24, 2),
	              yValues = _ref25[0],
	              measure = _ref25[1];

	          return [yValues.length ? yValues.join() : 'value', measure];
	        }) : []));
	      });
	    }
	  }, {
	    key: "tableColumns",
	    value: function tableColumns(pivotConfig) {
	      var normalizedPivotConfig = this.normalizePivotConfig(pivotConfig || {});
	      var annotations = pipe(pluck('annotation'), reduce(mergeDeepLeft(), {}))(this.loadResponses);
	      var flatMeta = Object.values(annotations).reduce(function (a, b) {
	        return _objectSpread$2$1(_objectSpread$2$1({}, a), b);
	      }, {});
	      var schema = {};

	      var extractFields = function extractFields(key) {
	        var _ref26 = flatMeta[key] || {},
	            title = _ref26.title,
	            shortTitle = _ref26.shortTitle,
	            type = _ref26.type,
	            format = _ref26.format,
	            meta = _ref26.meta;

	        return {
	          key: key,
	          title: title,
	          shortTitle: shortTitle,
	          type: type,
	          format: format,
	          meta: meta
	        };
	      };

	      var pivot = this.pivot(normalizedPivotConfig);
	      (pivot[0] && pivot[0].yValuesArray || []).forEach(function (_ref27) {
	        var _ref28 = _slicedToArray(_ref27, 1),
	            yValues = _ref28[0];

	        if (yValues.length > 0) {
	          var currentItem = schema;
	          yValues.forEach(function (value, index) {
	            currentItem["_".concat(value)] = {
	              key: value,
	              memberId: normalizedPivotConfig.y[index] === 'measures' ? value : normalizedPivotConfig.y[index],
	              children: currentItem["_".concat(value)] && currentItem["_".concat(value)].children || {}
	            };
	            currentItem = currentItem["_".concat(value)].children;
	          });
	        }
	      });

	      var toColumns = function toColumns() {
	        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	        if (Object.keys(item).length === 0) {
	          return [];
	        }

	        return Object.values(item).map(function (_ref29) {
	          var key = _ref29.key,
	              currentItem = _objectWithoutProperties(_ref29, _excluded2);

	          var children = toColumns(currentItem.children, [].concat(_toConsumableArray(path), [key]));

	          var _extractFields = extractFields(currentItem.memberId),
	              title = _extractFields.title,
	              shortTitle = _extractFields.shortTitle,
	              fields = _objectWithoutProperties(_extractFields, _excluded3);

	          var dimensionValue = key !== currentItem.memberId || title == null ? key : '';

	          if (!children.length) {
	            return _objectSpread$2$1(_objectSpread$2$1({}, fields), {}, {
	              key: key,
	              dataIndex: [].concat(_toConsumableArray(path), [key]).join(),
	              title: [title, dimensionValue].join(' ').trim(),
	              shortTitle: dimensionValue || shortTitle
	            });
	          }

	          return _objectSpread$2$1(_objectSpread$2$1({}, fields), {}, {
	            key: key,
	            title: [title, dimensionValue].join(' ').trim(),
	            shortTitle: dimensionValue || shortTitle,
	            children: children
	          });
	        });
	      };

	      var otherColumns = [];

	      if (!pivot.length && normalizedPivotConfig.y.includes('measures')) {
	        otherColumns = (this.loadResponses[0].query.measures || []).map(function (key) {
	          return _objectSpread$2$1(_objectSpread$2$1({}, extractFields(key)), {}, {
	            dataIndex: key
	          });
	        });
	      } // Syntatic column to display the measure value


	      if (!normalizedPivotConfig.y.length && normalizedPivotConfig.x.includes('measures')) {
	        otherColumns.push({
	          key: 'value',
	          dataIndex: 'value',
	          title: 'Value',
	          shortTitle: 'Value',
	          type: 'string'
	        });
	      }

	      return normalizedPivotConfig.x.map(function (key) {
	        if (key === 'measures') {
	          return {
	            key: 'measures',
	            dataIndex: 'measures',
	            title: 'Measures',
	            shortTitle: 'Measures',
	            type: 'string'
	          };
	        }

	        return _objectSpread$2$1(_objectSpread$2$1({}, extractFields(key)), {}, {
	          dataIndex: key
	        });
	      }).concat(toColumns(schema)).concat(otherColumns);
	    }
	  }, {
	    key: "totalRow",
	    value: function totalRow(pivotConfig) {
	      return this.chartPivot(pivotConfig)[0];
	    }
	  }, {
	    key: "categories",
	    value: function categories(pivotConfig) {
	      // TODO
	      return this.chartPivot(pivotConfig);
	    }
	  }, {
	    key: "seriesNames",
	    value: function seriesNames(pivotConfig) {
	      var _this4 = this;

	      pivotConfig = this.normalizePivotConfig(pivotConfig);
	      var measures = pipe(pluck('annotation'), pluck('measures'), mergeAll)(this.loadResponses);
	      var seriesNames = unnest(this.loadResponses.map(function (_, index) {
	        return pipe(map(_this4.axisValues(pivotConfig.y, index)), unnest, uniq)(_this4.timeDimensionBackwardCompatibleData(index));
	      }));
	      var duplicateMeasures = new Set();

	      if (this.queryType === QUERY_TYPE.BLENDING_QUERY) {
	        var allMeasures = flatten(this.loadResponses.map(function (_ref30) {
	          var query = _ref30.query;
	          return query.measures;
	        }));
	        allMeasures.filter(function (e, i, a) {
	          return a.indexOf(e) !== i;
	        }).forEach(function (m) {
	          return duplicateMeasures.add(m);
	        });
	      }

	      return seriesNames.map(function (axisValues, i) {
	        var aliasedAxis = aliasSeries(axisValues, i, pivotConfig, duplicateMeasures);
	        return {
	          title: _this4.axisValuesString(pivotConfig.y.find(function (d) {
	            return d === 'measures';
	          }) ? dropLast(1, aliasedAxis).concat(measures[ResultSet.measureFromAxis(axisValues)].title) : aliasedAxis, ', '),
	          key: _this4.axisValuesString(aliasedAxis, ','),
	          yValues: axisValues
	        };
	      });
	    }
	  }, {
	    key: "query",
	    value: function query() {
	      if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {
	        throw new Error("Method is not supported for a '".concat(this.queryType, "' query type. Please use decompose"));
	      }

	      return this.loadResponses[0].query;
	    }
	  }, {
	    key: "pivotQuery",
	    value: function pivotQuery() {
	      return this.loadResponse.pivotQuery || null;
	    }
	  }, {
	    key: "rawData",
	    value: function rawData() {
	      if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {
	        throw new Error("Method is not supported for a '".concat(this.queryType, "' query type. Please use decompose"));
	      }

	      return this.loadResponses[0].data;
	    }
	  }, {
	    key: "annotation",
	    value: function annotation() {
	      if (this.queryType !== QUERY_TYPE.REGULAR_QUERY) {
	        throw new Error("Method is not supported for a '".concat(this.queryType, "' query type. Please use decompose"));
	      }

	      return this.loadResponses[0].annotation;
	    }
	  }, {
	    key: "timeDimensionBackwardCompatibleData",
	    value: function timeDimensionBackwardCompatibleData(resultIndex) {
	      if (resultIndex === undefined) {
	        throw new Error('resultIndex is required');
	      }

	      if (!this.backwardCompatibleData[resultIndex]) {
	        var _this$loadResponses$r = this.loadResponses[resultIndex],
	            data = _this$loadResponses$r.data,
	            query = _this$loadResponses$r.query;
	        var timeDimensions = (query.timeDimensions || []).filter(function (td) {
	          return Boolean(td.granularity);
	        });
	        this.backwardCompatibleData[resultIndex] = data.map(function (row) {
	          return _objectSpread$2$1(_objectSpread$2$1({}, row), fromPairs(Object.keys(row).filter(function (field) {
	            return timeDimensions.find(function (d) {
	              return d.dimension === field;
	            }) && !row[ResultSet.timeDimensionMember(timeDimensions.find(function (d) {
	              return d.dimension === field;
	            }))];
	          }).map(function (field) {
	            return [ResultSet.timeDimensionMember(timeDimensions.find(function (d) {
	              return d.dimension === field;
	            })), row[field]];
	          })));
	        });
	      }

	      return this.backwardCompatibleData[resultIndex];
	    }
	  }, {
	    key: "decompose",
	    value: function decompose() {
	      var _this5 = this;

	      return this.loadResponses.map(function (result) {
	        return new ResultSet({
	          queryType: QUERY_TYPE.REGULAR_QUERY,
	          pivotQuery: _objectSpread$2$1(_objectSpread$2$1({}, result.query), {}, {
	            queryType: QUERY_TYPE.REGULAR_QUERY
	          }),
	          results: [result]
	        }, _this5.options);
	      });
	    }
	  }, {
	    key: "serialize",
	    value: function serialize() {
	      return {
	        loadResponse: clone(this.loadResponse)
	      };
	    }
	  }], [{
	    key: "measureFromAxis",
	    value: function measureFromAxis(axisValues) {
	      return axisValues[axisValues.length - 1];
	    }
	  }, {
	    key: "timeDimensionMember",
	    value: function timeDimensionMember(td) {
	      return "".concat(td.dimension, ".").concat(td.granularity);
	    }
	  }, {
	    key: "deserialize",
	    value: function deserialize(data) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      return new ResultSet(data.loadResponse, options);
	    }
	  }, {
	    key: "getNormalizedPivotConfig",
	    value: function getNormalizedPivotConfig() {
	      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var pivotConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      var defaultPivotConfig = {
	        x: [],
	        y: [],
	        fillMissingDates: true,
	        joinDateRange: false
	      };
	      var _query$measures = query.measures,
	          measures = _query$measures === void 0 ? [] : _query$measures,
	          _query$dimensions = query.dimensions,
	          dimensions = _query$dimensions === void 0 ? [] : _query$dimensions;
	      var timeDimensions = (query.timeDimensions || []).filter(function (td) {
	        return !!td.granularity;
	      });
	      pivotConfig = pivotConfig || (timeDimensions.length ? {
	        x: timeDimensions.map(function (td) {
	          return ResultSet.timeDimensionMember(td);
	        }),
	        y: dimensions
	      } : {
	        x: dimensions,
	        y: []
	      });
	      pivotConfig = mergeDeepLeft(pivotConfig, defaultPivotConfig);

	      var substituteTimeDimensionMembers = function substituteTimeDimensionMembers(axis) {
	        return axis.map(function (subDim) {
	          return timeDimensions.find(function (td) {
	            return td.dimension === subDim;
	          }) && !dimensions.find(function (d) {
	            return d === subDim;
	          }) ? ResultSet.timeDimensionMember(query.timeDimensions.find(function (td) {
	            return td.dimension === subDim;
	          })) : subDim;
	        });
	      };

	      pivotConfig.x = substituteTimeDimensionMembers(pivotConfig.x);
	      pivotConfig.y = substituteTimeDimensionMembers(pivotConfig.y);
	      var allIncludedDimensions = pivotConfig.x.concat(pivotConfig.y);
	      var allDimensions = timeDimensions.map(function (td) {
	        return ResultSet.timeDimensionMember(td);
	      }).concat(dimensions);

	      var dimensionFilter = function dimensionFilter(key) {
	        return allDimensions.includes(key) || key === 'measures';
	      };

	      pivotConfig.x = pivotConfig.x.concat(allDimensions.filter(function (d) {
	        return !allIncludedDimensions.includes(d) && d !== 'compareDateRange';
	      })).filter(dimensionFilter);
	      pivotConfig.y = pivotConfig.y.filter(dimensionFilter);

	      if (!pivotConfig.x.concat(pivotConfig.y).find(function (d) {
	        return d === 'measures';
	      })) {
	        pivotConfig.y.push('measures');
	      }

	      if (dimensions.includes('compareDateRange') && !pivotConfig.y.concat(pivotConfig.x).includes('compareDateRange')) {
	        pivotConfig.y.unshift('compareDateRange');
	      }

	      if (!measures.length) {
	        pivotConfig.x = pivotConfig.x.filter(function (d) {
	          return d !== 'measures';
	        });
	        pivotConfig.y = pivotConfig.y.filter(function (d) {
	          return d !== 'measures';
	        });
	      }

	      return pivotConfig;
	    }
	  }]);

	  return ResultSet;
	}();

	var CubeContext = /*#__PURE__*/React.createContext(null);

	var floor = Math.floor;
	var charAt = functionUncurryThis(''.charAt);
	var replace = functionUncurryThis(''.replace);
	var stringSlice$1 = functionUncurryThis(''.slice);
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

	// `GetSubstitution` abstract operation
	// https://tc39.es/ecma262/#sec-getsubstitution
	var getSubstitution = function (matched, str, position, captures, namedCaptures, replacement) {
	  var tailPos = position + matched.length;
	  var m = captures.length;
	  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	  if (namedCaptures !== undefined) {
	    namedCaptures = toObject(namedCaptures);
	    symbols = SUBSTITUTION_SYMBOLS;
	  }
	  return replace(replacement, symbols, function (match, ch) {
	    var capture;
	    switch (charAt(ch, 0)) {
	      case '$': return '$';
	      case '&': return matched;
	      case '`': return stringSlice$1(str, 0, position);
	      case "'": return stringSlice$1(str, tailPos);
	      case '<':
	        capture = namedCaptures[stringSlice$1(ch, 1, -1)];
	        break;
	      default: // \d\d?
	        var n = +ch;
	        if (n === 0) return match;
	        if (n > m) {
	          var f = floor(n / 10);
	          if (f === 0) return match;
	          if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
	          return match;
	        }
	        capture = captures[n - 1];
	    }
	    return capture === undefined ? '' : capture;
	  });
	};

	var REPLACE = wellKnownSymbol('replace');
	var max = Math.max;
	var min = Math.min;
	var concat$1 = functionUncurryThis([].concat);
	var push = functionUncurryThis([].push);
	var stringIndexOf = functionUncurryThis(''.indexOf);
	var stringSlice = functionUncurryThis(''.slice);

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
	  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
	  return 'a'.replace(/./, '$0') === '$0';
	})();

	// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
	  if (/./[REPLACE]) {
	    return /./[REPLACE]('a', '$0') === '';
	  }
	  return false;
	})();

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
	  return ''.replace(re, '$<a>') !== '7';
	});

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

	  return [
	    // `String.prototype.replace` method
	    // https://tc39.es/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible(this);
	      var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE);
	      return replacer
	        ? functionCall(replacer, searchValue, O, replaceValue)
	        : functionCall(nativeReplace, toString$1(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
	    function (string, replaceValue) {
	      var rx = anObject(this);
	      var S = toString$1(string);

	      if (
	        typeof replaceValue == 'string' &&
	        stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
	        stringIndexOf(replaceValue, '$<') === -1
	      ) {
	        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
	        if (res.done) return res.value;
	      }

	      var functionalReplace = isCallable(replaceValue);
	      if (!functionalReplace) replaceValue = toString$1(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regexpExecAbstract(rx, S);
	        if (result === null) break;

	        push(results, result);
	        if (!global) break;

	        var matchStr = toString$1(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = toString$1(result[0]);
	        var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = concat$1([matched], captures, position, S);
	          if (namedCaptures !== undefined) push(replacerArgs, namedCaptures);
	          var replacement = toString$1(functionApply(replaceValue, undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + stringSlice(S, nextSourcePosition);
	    }
	  ];
	}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

	// `Object.fromEntries` method
	// https://github.com/tc39/proposal-object-from-entries
	_export({ target: 'Object', stat: true }, {
	  fromEntries: function fromEntries(iterable) {
	    var obj = {};
	    iterate(iterable, function (k, v) {
	      createProperty(obj, k, v);
	    }, { AS_ENTRIES: true });
	    return obj;
	  }
	});

	// This file was originally written by @drudru (https://github.com/drudru/ansi_up), MIT, 2011

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ANSI_COLORS = [[{ color: "0, 0, 0", "class": "ansi-black" }, { color: "187, 0, 0", "class": "ansi-red" }, { color: "0, 187, 0", "class": "ansi-green" }, { color: "187, 187, 0", "class": "ansi-yellow" }, { color: "0, 0, 187", "class": "ansi-blue" }, { color: "187, 0, 187", "class": "ansi-magenta" }, { color: "0, 187, 187", "class": "ansi-cyan" }, { color: "255,255,255", "class": "ansi-white" }], [{ color: "85, 85, 85", "class": "ansi-bright-black" }, { color: "255, 85, 85", "class": "ansi-bright-red" }, { color: "0, 255, 0", "class": "ansi-bright-green" }, { color: "255, 255, 85", "class": "ansi-bright-yellow" }, { color: "85, 85, 255", "class": "ansi-bright-blue" }, { color: "255, 85, 255", "class": "ansi-bright-magenta" }, { color: "85, 255, 255", "class": "ansi-bright-cyan" }, { color: "255, 255, 255", "class": "ansi-bright-white" }]];

	var Anser = function () {
	    _createClass(Anser, null, [{
	        key: "escapeForHtml",


	        /**
	         * Anser.escapeForHtml
	         * Escape the input HTML.
	         *
	         * This does the minimum escaping of text to make it compliant with HTML.
	         * In particular, the '&','<', and '>' characters are escaped. This should
	         * be run prior to `ansiToHtml`.
	         *
	         * @name Anser.escapeForHtml
	         * @function
	         * @param {String} txt The input text (containing the ANSI snippets).
	         * @returns {String} The escaped html.
	         */
	        value: function escapeForHtml(txt) {
	            return new Anser().escapeForHtml(txt);
	        }

	        /**
	         * Anser.linkify
	         * Adds the links in the HTML.
	         *
	         * This replaces any links in the text with anchor tags that display the
	         * link. The links should have at least one whitespace character
	         * surrounding it. Also, you should apply this after you have run
	         * `ansiToHtml` on the text.
	         *
	         * @name Anser.linkify
	         * @function
	         * @param {String} txt The input text.
	         * @returns {String} The HTML containing the <a> tags (unescaped).
	         */

	    }, {
	        key: "linkify",
	        value: function linkify(txt) {
	            return new Anser().linkify(txt);
	        }

	        /**
	         * Anser.ansiToHtml
	         * This replaces ANSI terminal escape codes with SPAN tags that wrap the
	         * content.
	         *
	         * This function only interprets ANSI SGR (Select Graphic Rendition) codes
	         * that can be represented in HTML.
	         * For example, cursor movement codes are ignored and hidden from output.
	         * The default style uses colors that are very close to the prescribed
	         * standard. The standard assumes that the text will have a black
	         * background. These colors are set as inline styles on the SPAN tags.
	         *
	         * Another option is to set `use_classes: true` in the options argument.
	         * This will instead set classes on the spans so the colors can be set via
	         * CSS. The class names used are of the format `ansi-*-fg/bg` and
	         * `ansi-bright-*-fg/bg` where `*` is the color name,
	         * i.e black/red/green/yellow/blue/magenta/cyan/white.
	         *
	         * @name Anser.ansiToHtml
	         * @function
	         * @param {String} txt The input text.
	         * @param {Object} options The options passed to the ansiToHTML method.
	         * @returns {String} The HTML output.
	         */

	    }, {
	        key: "ansiToHtml",
	        value: function ansiToHtml(txt, options) {
	            return new Anser().ansiToHtml(txt, options);
	        }

	        /**
	         * Anser.ansiToJson
	         * Converts ANSI input into JSON output.
	         *
	         * @name Anser.ansiToJson
	         * @function
	         * @param {String} txt The input text.
	         * @param {Object} options The options passed to the ansiToHTML method.
	         * @returns {String} The HTML output.
	         */

	    }, {
	        key: "ansiToJson",
	        value: function ansiToJson(txt, options) {
	            return new Anser().ansiToJson(txt, options);
	        }

	        /**
	         * Anser.ansiToText
	         * Converts ANSI input into text output.
	         *
	         * @name Anser.ansiToText
	         * @function
	         * @param {String} txt The input text.
	         * @returns {String} The text output.
	         */

	    }, {
	        key: "ansiToText",
	        value: function ansiToText(txt) {
	            return new Anser().ansiToText(txt);
	        }

	        /**
	         * Anser
	         * The `Anser` class.
	         *
	         * @name Anser
	         * @function
	         * @returns {Anser}
	         */

	    }]);

	    function Anser() {
	        _classCallCheck(this, Anser);

	        this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;
	        this.bright = 0;
	        this.decorations = [];
	    }

	    /**
	     * setupPalette
	     * Sets up the palette.
	     *
	     * @name setupPalette
	     * @function
	     */


	    _createClass(Anser, [{
	        key: "setupPalette",
	        value: function setupPalette() {
	            this.PALETTE_COLORS = [];

	            // Index 0..15 : System color
	            for (var i = 0; i < 2; ++i) {
	                for (var j = 0; j < 8; ++j) {
	                    this.PALETTE_COLORS.push(ANSI_COLORS[i][j].color);
	                }
	            }

	            // Index 16..231 : RGB 6x6x6
	            // https://gist.github.com/jasonm23/2868981#file-xterm-256color-yaml
	            var levels = [0, 95, 135, 175, 215, 255];
	            var format = function format(r, g, b) {
	                return levels[r] + ", " + levels[g] + ", " + levels[b];
	            };
	            for (var _r = 0; _r < 6; ++_r) {
	                for (var _g = 0; _g < 6; ++_g) {
	                    for (var _b = 0; _b < 6; ++_b) {
	                        this.PALETTE_COLORS.push(format(_r, _g, _b));
	                    }
	                }
	            }

	            // Index 232..255 : Grayscale
	            var level = 8;
	            for (var _i = 0; _i < 24; ++_i, level += 10) {
	                this.PALETTE_COLORS.push(format(level, level, level));
	            }
	        }

	        /**
	         * escapeForHtml
	         * Escapes the input text.
	         *
	         * @name escapeForHtml
	         * @function
	         * @param {String} txt The input text.
	         * @returns {String} The escpaed HTML output.
	         */

	    }, {
	        key: "escapeForHtml",
	        value: function escapeForHtml(txt) {
	            return txt.replace(/[&<>]/gm, function (str) {
	                return str == "&" ? "&amp;" : str == "<" ? "&lt;" : str == ">" ? "&gt;" : "";
	            });
	        }

	        /**
	         * linkify
	         * Adds HTML link elements.
	         *
	         * @name linkify
	         * @function
	         * @param {String} txt The input text.
	         * @returns {String} The HTML output containing link elements.
	         */

	    }, {
	        key: "linkify",
	        value: function linkify(txt) {
	            return txt.replace(/(https?:\/\/[^\s]+)/gm, function (str) {
	                return "<a href=\"" + str + "\">" + str + "</a>";
	            });
	        }

	        /**
	         * ansiToHtml
	         * Converts ANSI input into HTML output.
	         *
	         * @name ansiToHtml
	         * @function
	         * @param {String} txt The input text.
	         * @param {Object} options The options passed ot the `process` method.
	         * @returns {String} The HTML output.
	         */

	    }, {
	        key: "ansiToHtml",
	        value: function ansiToHtml(txt, options) {
	            return this.process(txt, options, true);
	        }

	        /**
	         * ansiToJson
	         * Converts ANSI input into HTML output.
	         *
	         * @name ansiToJson
	         * @function
	         * @param {String} txt The input text.
	         * @param {Object} options The options passed ot the `process` method.
	         * @returns {String} The JSON output.
	         */

	    }, {
	        key: "ansiToJson",
	        value: function ansiToJson(txt, options) {
	            options = options || {};
	            options.json = true;
	            options.clearLine = false;
	            return this.process(txt, options, true);
	        }

	        /**
	         * ansiToText
	         * Converts ANSI input into HTML output.
	         *
	         * @name ansiToText
	         * @function
	         * @param {String} txt The input text.
	         * @returns {String} The text output.
	         */

	    }, {
	        key: "ansiToText",
	        value: function ansiToText(txt) {
	            return this.process(txt, {}, false);
	        }

	        /**
	         * process
	         * Processes the input.
	         *
	         * @name process
	         * @function
	         * @param {String} txt The input text.
	         * @param {Object} options An object passed to `processChunk` method, extended with:
	         *
	         *  - `json` (Boolean): If `true`, the result will be an object.
	         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.
	         *
	         * @param {Boolean} markup
	         */

	    }, {
	        key: "process",
	        value: function process(txt, options, markup) {
	            var _this = this;

	            var self = this;
	            var raw_text_chunks = txt.split(/\033\[/);
	            var first_chunk = raw_text_chunks.shift(); // the first chunk is not the result of the split

	            if (options === undefined || options === null) {
	                options = {};
	            }
	            options.clearLine = /\r/.test(txt); // check for Carriage Return
	            var color_chunks = raw_text_chunks.map(function (chunk) {
	                return _this.processChunk(chunk, options, markup);
	            });

	            if (options && options.json) {
	                var first = self.processChunkJson("");
	                first.content = first_chunk;
	                first.clearLine = options.clearLine;
	                color_chunks.unshift(first);
	                if (options.remove_empty) {
	                    color_chunks = color_chunks.filter(function (c) {
	                        return !c.isEmpty();
	                    });
	                }
	                return color_chunks;
	            } else {
	                color_chunks.unshift(first_chunk);
	            }

	            return color_chunks.join("");
	        }

	        /**
	         * processChunkJson
	         * Processes the current chunk into json output.
	         *
	         * @name processChunkJson
	         * @function
	         * @param {String} text The input text.
	         * @param {Object} options An object containing the following fields:
	         *
	         *  - `json` (Boolean): If `true`, the result will be an object.
	         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.
	         *
	         * @param {Boolean} markup If false, the colors will not be parsed.
	         * @return {Object} The result object:
	         *
	         *  - `content` (String): The text.
	         *  - `fg` (String|null): The foreground color.
	         *  - `bg` (String|null): The background color.
	         *  - `fg_truecolor` (String|null): The foreground true color (if 16m color is enabled).
	         *  - `bg_truecolor` (String|null): The background true color (if 16m color is enabled).
	         *  - `clearLine` (Boolean): `true` if a carriageReturn \r was fount at end of line.
	         *  - `was_processed` (Bolean): `true` if the colors were processed, `false` otherwise.
	         *  - `isEmpty` (Function): A function returning `true` if the content is empty, or `false` otherwise.
	         *
	         */

	    }, {
	        key: "processChunkJson",
	        value: function processChunkJson(text, options, markup) {

	            // Are we using classes or styles?
	            options = typeof options == "undefined" ? {} : options;
	            var use_classes = options.use_classes = typeof options.use_classes != "undefined" && options.use_classes;
	            var key = options.key = use_classes ? "class" : "color";

	            var result = {
	                content: text,
	                fg: null,
	                bg: null,
	                fg_truecolor: null,
	                bg_truecolor: null,
	                isInverted: false,
	                clearLine: options.clearLine,
	                decoration: null,
	                decorations: [],
	                was_processed: false,
	                isEmpty: function isEmpty() {
	                    return !result.content;
	                }
	            };

	            // Each "chunk" is the text after the CSI (ESC + "[") and before the next CSI/EOF.
	            //
	            // This regex matches four groups within a chunk.
	            //
	            // The first and third groups match code type.
	            // We supported only SGR command. It has empty first group and "m" in third.
	            //
	            // The second group matches all of the number+semicolon command sequences
	            // before the "m" (or other trailing) character.
	            // These are the graphics or SGR commands.
	            //
	            // The last group is the text (including newlines) that is colored by
	            // the other group"s commands.
	            var matches = text.match(/^([!\x3c-\x3f]*)([\d;]*)([\x20-\x2c]*[\x40-\x7e])([\s\S]*)/m);

	            if (!matches) return result;

	            result.content = matches[4];
	            var nums = matches[2].split(";");

	            // We currently support only "SGR" (Select Graphic Rendition)
	            // Simply ignore if not a SGR command.
	            if (matches[1] !== "" || matches[3] !== "m") {
	                return result;
	            }

	            if (!markup) {
	                return result;
	            }

	            var self = this;

	            while (nums.length > 0) {
	                var num_str = nums.shift();
	                var num = parseInt(num_str);

	                if (isNaN(num) || num === 0) {
	                    self.fg = self.bg = null;
	                    self.decorations = [];
	                } else if (num === 1) {
	                    self.decorations.push("bold");
	                } else if (num === 2) {
	                    self.decorations.push("dim");
	                    // Enable code 2 to get string
	                } else if (num === 3) {
	                    self.decorations.push("italic");
	                } else if (num === 4) {
	                    self.decorations.push("underline");
	                } else if (num === 5) {
	                    self.decorations.push("blink");
	                } else if (num === 7) {
	                    self.decorations.push("reverse");
	                } else if (num === 8) {
	                    self.decorations.push("hidden");
	                    // Enable code 9 to get strikethrough
	                } else if (num === 9) {
	                    self.decorations.push("strikethrough");
	                    /**
	                     * Add several widely used style codes
	                     * @see https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters
	                     */
	                } else if (num === 21) {
	                    self.removeDecoration("bold");
	                } else if (num === 22) {
	                    self.removeDecoration("bold");
	                    self.removeDecoration("dim");
	                } else if (num === 23) {
	                    self.removeDecoration("italic");
	                } else if (num === 24) {
	                    self.removeDecoration("underline");
	                } else if (num === 25) {
	                    self.removeDecoration("blink");
	                } else if (num === 27) {
	                    self.removeDecoration("reverse");
	                } else if (num === 28) {
	                    self.removeDecoration("hidden");
	                } else if (num === 29) {
	                    self.removeDecoration("strikethrough");
	                } else if (num === 39) {
	                    self.fg = null;
	                } else if (num === 49) {
	                    self.bg = null;
	                    // Foreground color
	                } else if (num >= 30 && num < 38) {
	                    self.fg = ANSI_COLORS[0][num % 10][key];
	                    // Foreground bright color
	                } else if (num >= 90 && num < 98) {
	                    self.fg = ANSI_COLORS[1][num % 10][key];
	                    // Background color
	                } else if (num >= 40 && num < 48) {
	                    self.bg = ANSI_COLORS[0][num % 10][key];
	                    // Background bright color
	                } else if (num >= 100 && num < 108) {
	                    self.bg = ANSI_COLORS[1][num % 10][key];
	                } else if (num === 38 || num === 48) {
	                    // extend color (38=fg, 48=bg)
	                    var is_foreground = num === 38;
	                    if (nums.length >= 1) {
	                        var mode = nums.shift();
	                        if (mode === "5" && nums.length >= 1) {
	                            // palette color
	                            var palette_index = parseInt(nums.shift());
	                            if (palette_index >= 0 && palette_index <= 255) {
	                                if (!use_classes) {
	                                    if (!this.PALETTE_COLORS) {
	                                        self.setupPalette();
	                                    }
	                                    if (is_foreground) {
	                                        self.fg = this.PALETTE_COLORS[palette_index];
	                                    } else {
	                                        self.bg = this.PALETTE_COLORS[palette_index];
	                                    }
	                                } else {
	                                    var klass = palette_index >= 16 ? "ansi-palette-" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8]["class"];
	                                    if (is_foreground) {
	                                        self.fg = klass;
	                                    } else {
	                                        self.bg = klass;
	                                    }
	                                }
	                            }
	                        } else if (mode === "2" && nums.length >= 3) {
	                            // true color
	                            var r = parseInt(nums.shift());
	                            var g = parseInt(nums.shift());
	                            var b = parseInt(nums.shift());
	                            if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
	                                var color = r + ", " + g + ", " + b;
	                                if (!use_classes) {
	                                    if (is_foreground) {
	                                        self.fg = color;
	                                    } else {
	                                        self.bg = color;
	                                    }
	                                } else {
	                                    if (is_foreground) {
	                                        self.fg = "ansi-truecolor";
	                                        self.fg_truecolor = color;
	                                    } else {
	                                        self.bg = "ansi-truecolor";
	                                        self.bg_truecolor = color;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }

	            if (self.fg === null && self.bg === null && self.decorations.length === 0) {
	                return result;
	            } else {

	                result.fg = self.fg;
	                result.bg = self.bg;
	                result.fg_truecolor = self.fg_truecolor;
	                result.bg_truecolor = self.bg_truecolor;
	                result.decorations = self.decorations;
	                result.decoration = self.decorations.slice(-1).pop() || null;
	                result.was_processed = true;

	                return result;
	            }
	        }

	        /**
	         * processChunk
	         * Processes the current chunk of text.
	         *
	         * @name processChunk
	         * @function
	         * @param {String} text The input text.
	         * @param {Object} options An object containing the following fields:
	         *
	         *  - `json` (Boolean): If `true`, the result will be an object.
	         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.
	         *
	         * @param {Boolean} markup If false, the colors will not be parsed.
	         * @return {Object|String} The result (object if `json` is wanted back or string otherwise).
	         */

	    }, {
	        key: "processChunk",
	        value: function processChunk(text, options, markup) {
	            var _this2 = this;

	            options = options || {};
	            var jsonChunk = this.processChunkJson(text, options, markup);
	            var use_classes = options.use_classes;

	            // "reverse" decoration reverses foreground and background colors
	            jsonChunk.decorations = jsonChunk.decorations.filter(function (decoration) {
	                if (decoration === "reverse") {
	                    // when reversing, missing colors are defaulted to black (bg) and white (fg)
	                    if (!jsonChunk.fg) {
	                        jsonChunk.fg = ANSI_COLORS[0][7][use_classes ? "class" : "color"];
	                    }
	                    if (!jsonChunk.bg) {
	                        jsonChunk.bg = ANSI_COLORS[0][0][use_classes ? "class" : "color"];
	                    }
	                    var tmpFg = jsonChunk.fg;
	                    jsonChunk.fg = jsonChunk.bg;
	                    jsonChunk.bg = tmpFg;
	                    var tmpFgTrue = jsonChunk.fg_truecolor;
	                    jsonChunk.fg_truecolor = jsonChunk.bg_truecolor;
	                    jsonChunk.bg_truecolor = tmpFgTrue;
	                    jsonChunk.isInverted = true;
	                    return false;
	                }
	                return true;
	            });

	            if (options.json) {
	                return jsonChunk;
	            }
	            if (jsonChunk.isEmpty()) {
	                return "";
	            }
	            if (!jsonChunk.was_processed) {
	                return jsonChunk.content;
	            }

	            var colors = [];
	            var decorations = [];
	            var textDecorations = [];
	            var data = {};

	            var render_data = function render_data(data) {
	                var fragments = [];
	                var key = void 0;
	                for (key in data) {
	                    if (data.hasOwnProperty(key)) {
	                        fragments.push("data-" + key + "=\"" + _this2.escapeForHtml(data[key]) + "\"");
	                    }
	                }
	                return fragments.length > 0 ? " " + fragments.join(" ") : "";
	            };

	            if (jsonChunk.isInverted) {
	                data["ansi-is-inverted"] = "true";
	            }

	            if (jsonChunk.fg) {
	                if (use_classes) {
	                    colors.push(jsonChunk.fg + "-fg");
	                    if (jsonChunk.fg_truecolor !== null) {
	                        data["ansi-truecolor-fg"] = jsonChunk.fg_truecolor;
	                        jsonChunk.fg_truecolor = null;
	                    }
	                } else {
	                    colors.push("color:rgb(" + jsonChunk.fg + ")");
	                }
	            }

	            if (jsonChunk.bg) {
	                if (use_classes) {
	                    colors.push(jsonChunk.bg + "-bg");
	                    if (jsonChunk.bg_truecolor !== null) {
	                        data["ansi-truecolor-bg"] = jsonChunk.bg_truecolor;
	                        jsonChunk.bg_truecolor = null;
	                    }
	                } else {
	                    colors.push("background-color:rgb(" + jsonChunk.bg + ")");
	                }
	            }

	            jsonChunk.decorations.forEach(function (decoration) {
	                // use classes
	                if (use_classes) {
	                    decorations.push("ansi-" + decoration);
	                    return;
	                }
	                // use styles
	                if (decoration === "bold") {
	                    decorations.push("font-weight:bold");
	                } else if (decoration === "dim") {
	                    decorations.push("opacity:0.5");
	                } else if (decoration === "italic") {
	                    decorations.push("font-style:italic");
	                } else if (decoration === "hidden") {
	                    decorations.push("visibility:hidden");
	                } else if (decoration === "strikethrough") {
	                    textDecorations.push("line-through");
	                } else {
	                    // underline and blink are treated here
	                    textDecorations.push(decoration);
	                }
	            });

	            if (textDecorations.length) {
	                decorations.push("text-decoration:" + textDecorations.join(" "));
	            }

	            if (use_classes) {
	                return "<span class=\"" + colors.concat(decorations).join(" ") + "\"" + render_data(data) + ">" + jsonChunk.content + "</span>";
	            } else {
	                return "<span style=\"" + colors.concat(decorations).join(";") + "\"" + render_data(data) + ">" + jsonChunk.content + "</span>";
	            }
	        }
	    }, {
	        key: "removeDecoration",
	        value: function removeDecoration(decoration) {
	            var index = this.decorations.indexOf(decoration);

	            if (index >= 0) {
	                this.decorations.splice(index, 1);
	            }
	        }
	    }]);

	    return Anser;
	}();

	var lib = Anser;

	// eslint-disable-next-line es/no-object-assign -- safe
	var $assign = Object.assign;
	// eslint-disable-next-line es/no-object-defineproperty -- required for testing
	var defineProperty = Object.defineProperty;
	var concat = functionUncurryThis([].concat);

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	var objectAssign = !$assign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line es/no-symbol -- safe
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || functionCall(propertyIsEnumerable, S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	// eslint-disable-next-line es/no-object-assign -- required for testing
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var trim = stringTrim.trim;


	var $parseInt = global$1.parseInt;
	var Symbol$1 = global$1.Symbol;
	var ITERATOR = Symbol$1 && Symbol$1.iterator;
	var hex = /^[+-]?0x/i;
	var exec = functionUncurryThis(hex.exec);
	var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22
	  // MS Edge 18- broken with boxed symbols
	  || (ITERATOR && !fails(function () { $parseInt(Object(ITERATOR)); }));

	// `parseInt` method
	// https://tc39.es/ecma262/#sec-parseint-string-radix
	var numberParseInt = FORCED ? function parseInt(string, radix) {
	  var S = trim(toString$1(string));
	  return $parseInt(S, (radix >>> 0) || (exec(hex, S) ? 16 : 10));
	} : $parseInt;

	// `parseInt` method
	// https://tc39.es/ecma262/#sec-parseint-string-radix
	_export({ global: true, forced: parseInt != numberParseInt }, {
	  parseInt: numberParseInt
	});

	var bodyRegExps = {
	  xml: /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
	  html4: /&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
	  html5: /&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g
	};
	var namedReferences_1 = {
	  xml: {
	    entities: {
	      "&lt;": "<",
	      "&gt;": ">",
	      "&quot;": '"',
	      "&apos;": "'",
	      "&amp;": "&"
	    },
	    characters: {
	      "<": "&lt;",
	      ">": "&gt;",
	      '"': "&quot;",
	      "'": "&apos;",
	      "&": "&amp;"
	    }
	  },
	  html4: {
	    entities: {
	      "&apos;": "'",
	      "&nbsp": "Â ",
	      "&nbsp;": "Â ",
	      "&iexcl": "Â¡",
	      "&iexcl;": "Â¡",
	      "&cent": "Â¢",
	      "&cent;": "Â¢",
	      "&pound": "Â£",
	      "&pound;": "Â£",
	      "&curren": "Â¤",
	      "&curren;": "Â¤",
	      "&yen": "Â¥",
	      "&yen;": "Â¥",
	      "&brvbar": "Â¦",
	      "&brvbar;": "Â¦",
	      "&sect": "Â§",
	      "&sect;": "Â§",
	      "&uml": "Â¨",
	      "&uml;": "Â¨",
	      "&copy": "Â©",
	      "&copy;": "Â©",
	      "&ordf": "Âª",
	      "&ordf;": "Âª",
	      "&laquo": "Â«",
	      "&laquo;": "Â«",
	      "&not": "Â¬",
	      "&not;": "Â¬",
	      "&shy": "Â­",
	      "&shy;": "Â­",
	      "&reg": "Â®",
	      "&reg;": "Â®",
	      "&macr": "Â¯",
	      "&macr;": "Â¯",
	      "&deg": "Â°",
	      "&deg;": "Â°",
	      "&plusmn": "Â±",
	      "&plusmn;": "Â±",
	      "&sup2": "Â²",
	      "&sup2;": "Â²",
	      "&sup3": "Â³",
	      "&sup3;": "Â³",
	      "&acute": "Â´",
	      "&acute;": "Â´",
	      "&micro": "Âµ",
	      "&micro;": "Âµ",
	      "&para": "Â¶",
	      "&para;": "Â¶",
	      "&middot": "Â·",
	      "&middot;": "Â·",
	      "&cedil": "Â¸",
	      "&cedil;": "Â¸",
	      "&sup1": "Â¹",
	      "&sup1;": "Â¹",
	      "&ordm": "Âº",
	      "&ordm;": "Âº",
	      "&raquo": "Â»",
	      "&raquo;": "Â»",
	      "&frac14": "Â¼",
	      "&frac14;": "Â¼",
	      "&frac12": "Â½",
	      "&frac12;": "Â½",
	      "&frac34": "Â¾",
	      "&frac34;": "Â¾",
	      "&iquest": "Â¿",
	      "&iquest;": "Â¿",
	      "&Agrave": "Ã",
	      "&Agrave;": "Ã",
	      "&Aacute": "Ã",
	      "&Aacute;": "Ã",
	      "&Acirc": "Ã",
	      "&Acirc;": "Ã",
	      "&Atilde": "Ã",
	      "&Atilde;": "Ã",
	      "&Auml": "Ã",
	      "&Auml;": "Ã",
	      "&Aring": "Ã",
	      "&Aring;": "Ã",
	      "&AElig": "Ã",
	      "&AElig;": "Ã",
	      "&Ccedil": "Ã",
	      "&Ccedil;": "Ã",
	      "&Egrave": "Ã",
	      "&Egrave;": "Ã",
	      "&Eacute": "Ã",
	      "&Eacute;": "Ã",
	      "&Ecirc": "Ã",
	      "&Ecirc;": "Ã",
	      "&Euml": "Ã",
	      "&Euml;": "Ã",
	      "&Igrave": "Ã",
	      "&Igrave;": "Ã",
	      "&Iacute": "Ã",
	      "&Iacute;": "Ã",
	      "&Icirc": "Ã",
	      "&Icirc;": "Ã",
	      "&Iuml": "Ã",
	      "&Iuml;": "Ã",
	      "&ETH": "Ã",
	      "&ETH;": "Ã",
	      "&Ntilde": "Ã",
	      "&Ntilde;": "Ã",
	      "&Ograve": "Ã",
	      "&Ograve;": "Ã",
	      "&Oacute": "Ã",
	      "&Oacute;": "Ã",
	      "&Ocirc": "Ã",
	      "&Ocirc;": "Ã",
	      "&Otilde": "Ã",
	      "&Otilde;": "Ã",
	      "&Ouml": "Ã",
	      "&Ouml;": "Ã",
	      "&times": "Ã",
	      "&times;": "Ã",
	      "&Oslash": "Ã",
	      "&Oslash;": "Ã",
	      "&Ugrave": "Ã",
	      "&Ugrave;": "Ã",
	      "&Uacute": "Ã",
	      "&Uacute;": "Ã",
	      "&Ucirc": "Ã",
	      "&Ucirc;": "Ã",
	      "&Uuml": "Ã",
	      "&Uuml;": "Ã",
	      "&Yacute": "Ã",
	      "&Yacute;": "Ã",
	      "&THORN": "Ã",
	      "&THORN;": "Ã",
	      "&szlig": "Ã",
	      "&szlig;": "Ã",
	      "&agrave": "Ã ",
	      "&agrave;": "Ã ",
	      "&aacute": "Ã¡",
	      "&aacute;": "Ã¡",
	      "&acirc": "Ã¢",
	      "&acirc;": "Ã¢",
	      "&atilde": "Ã£",
	      "&atilde;": "Ã£",
	      "&auml": "Ã¤",
	      "&auml;": "Ã¤",
	      "&aring": "Ã¥",
	      "&aring;": "Ã¥",
	      "&aelig": "Ã¦",
	      "&aelig;": "Ã¦",
	      "&ccedil": "Ã§",
	      "&ccedil;": "Ã§",
	      "&egrave": "Ã¨",
	      "&egrave;": "Ã¨",
	      "&eacute": "Ã©",
	      "&eacute;": "Ã©",
	      "&ecirc": "Ãª",
	      "&ecirc;": "Ãª",
	      "&euml": "Ã«",
	      "&euml;": "Ã«",
	      "&igrave": "Ã¬",
	      "&igrave;": "Ã¬",
	      "&iacute": "Ã­",
	      "&iacute;": "Ã­",
	      "&icirc": "Ã®",
	      "&icirc;": "Ã®",
	      "&iuml": "Ã¯",
	      "&iuml;": "Ã¯",
	      "&eth": "Ã°",
	      "&eth;": "Ã°",
	      "&ntilde": "Ã±",
	      "&ntilde;": "Ã±",
	      "&ograve": "Ã²",
	      "&ograve;": "Ã²",
	      "&oacute": "Ã³",
	      "&oacute;": "Ã³",
	      "&ocirc": "Ã´",
	      "&ocirc;": "Ã´",
	      "&otilde": "Ãµ",
	      "&otilde;": "Ãµ",
	      "&ouml": "Ã¶",
	      "&ouml;": "Ã¶",
	      "&divide": "Ã·",
	      "&divide;": "Ã·",
	      "&oslash": "Ã¸",
	      "&oslash;": "Ã¸",
	      "&ugrave": "Ã¹",
	      "&ugrave;": "Ã¹",
	      "&uacute": "Ãº",
	      "&uacute;": "Ãº",
	      "&ucirc": "Ã»",
	      "&ucirc;": "Ã»",
	      "&uuml": "Ã¼",
	      "&uuml;": "Ã¼",
	      "&yacute": "Ã½",
	      "&yacute;": "Ã½",
	      "&thorn": "Ã¾",
	      "&thorn;": "Ã¾",
	      "&yuml": "Ã¿",
	      "&yuml;": "Ã¿",
	      "&quot": '"',
	      "&quot;": '"',
	      "&amp": "&",
	      "&amp;": "&",
	      "&lt": "<",
	      "&lt;": "<",
	      "&gt": ">",
	      "&gt;": ">",
	      "&OElig;": "Å",
	      "&oelig;": "Å",
	      "&Scaron;": "Å ",
	      "&scaron;": "Å¡",
	      "&Yuml;": "Å¸",
	      "&circ;": "Ë",
	      "&tilde;": "Ë",
	      "&ensp;": "â",
	      "&emsp;": "â",
	      "&thinsp;": "â",
	      "&zwnj;": "â",
	      "&zwj;": "â",
	      "&lrm;": "â",
	      "&rlm;": "â",
	      "&ndash;": "â",
	      "&mdash;": "â",
	      "&lsquo;": "â",
	      "&rsquo;": "â",
	      "&sbquo;": "â",
	      "&ldquo;": "â",
	      "&rdquo;": "â",
	      "&bdquo;": "â",
	      "&dagger;": "â ",
	      "&Dagger;": "â¡",
	      "&permil;": "â°",
	      "&lsaquo;": "â¹",
	      "&rsaquo;": "âº",
	      "&euro;": "â¬",
	      "&fnof;": "Æ",
	      "&Alpha;": "Î",
	      "&Beta;": "Î",
	      "&Gamma;": "Î",
	      "&Delta;": "Î",
	      "&Epsilon;": "Î",
	      "&Zeta;": "Î",
	      "&Eta;": "Î",
	      "&Theta;": "Î",
	      "&Iota;": "Î",
	      "&Kappa;": "Î",
	      "&Lambda;": "Î",
	      "&Mu;": "Î",
	      "&Nu;": "Î",
	      "&Xi;": "Î",
	      "&Omicron;": "Î",
	      "&Pi;": "Î ",
	      "&Rho;": "Î¡",
	      "&Sigma;": "Î£",
	      "&Tau;": "Î¤",
	      "&Upsilon;": "Î¥",
	      "&Phi;": "Î¦",
	      "&Chi;": "Î§",
	      "&Psi;": "Î¨",
	      "&Omega;": "Î©",
	      "&alpha;": "Î±",
	      "&beta;": "Î²",
	      "&gamma;": "Î³",
	      "&delta;": "Î´",
	      "&epsilon;": "Îµ",
	      "&zeta;": "Î¶",
	      "&eta;": "Î·",
	      "&theta;": "Î¸",
	      "&iota;": "Î¹",
	      "&kappa;": "Îº",
	      "&lambda;": "Î»",
	      "&mu;": "Î¼",
	      "&nu;": "Î½",
	      "&xi;": "Î¾",
	      "&omicron;": "Î¿",
	      "&pi;": "Ï",
	      "&rho;": "Ï",
	      "&sigmaf;": "Ï",
	      "&sigma;": "Ï",
	      "&tau;": "Ï",
	      "&upsilon;": "Ï",
	      "&phi;": "Ï",
	      "&chi;": "Ï",
	      "&psi;": "Ï",
	      "&omega;": "Ï",
	      "&thetasym;": "Ï",
	      "&upsih;": "Ï",
	      "&piv;": "Ï",
	      "&bull;": "â¢",
	      "&hellip;": "â¦",
	      "&prime;": "â²",
	      "&Prime;": "â³",
	      "&oline;": "â¾",
	      "&frasl;": "â",
	      "&weierp;": "â",
	      "&image;": "â",
	      "&real;": "â",
	      "&trade;": "â¢",
	      "&alefsym;": "âµ",
	      "&larr;": "â",
	      "&uarr;": "â",
	      "&rarr;": "â",
	      "&darr;": "â",
	      "&harr;": "â",
	      "&crarr;": "âµ",
	      "&lArr;": "â",
	      "&uArr;": "â",
	      "&rArr;": "â",
	      "&dArr;": "â",
	      "&hArr;": "â",
	      "&forall;": "â",
	      "&part;": "â",
	      "&exist;": "â",
	      "&empty;": "â",
	      "&nabla;": "â",
	      "&isin;": "â",
	      "&notin;": "â",
	      "&ni;": "â",
	      "&prod;": "â",
	      "&sum;": "â",
	      "&minus;": "â",
	      "&lowast;": "â",
	      "&radic;": "â",
	      "&prop;": "â",
	      "&infin;": "â",
	      "&ang;": "â ",
	      "&and;": "â§",
	      "&or;": "â¨",
	      "&cap;": "â©",
	      "&cup;": "âª",
	      "&int;": "â«",
	      "&there4;": "â´",
	      "&sim;": "â¼",
	      "&cong;": "â",
	      "&asymp;": "â",
	      "&ne;": "â ",
	      "&equiv;": "â¡",
	      "&le;": "â¤",
	      "&ge;": "â¥",
	      "&sub;": "â",
	      "&sup;": "â",
	      "&nsub;": "â",
	      "&sube;": "â",
	      "&supe;": "â",
	      "&oplus;": "â",
	      "&otimes;": "â",
	      "&perp;": "â¥",
	      "&sdot;": "â",
	      "&lceil;": "â",
	      "&rceil;": "â",
	      "&lfloor;": "â",
	      "&rfloor;": "â",
	      "&lang;": "â©",
	      "&rang;": "âª",
	      "&loz;": "â",
	      "&spades;": "â ",
	      "&clubs;": "â£",
	      "&hearts;": "â¥",
	      "&diams;": "â¦"
	    },
	    characters: {
	      "'": "&apos;",
	      "Â ": "&nbsp;",
	      "Â¡": "&iexcl;",
	      "Â¢": "&cent;",
	      "Â£": "&pound;",
	      "Â¤": "&curren;",
	      "Â¥": "&yen;",
	      "Â¦": "&brvbar;",
	      "Â§": "&sect;",
	      "Â¨": "&uml;",
	      "Â©": "&copy;",
	      "Âª": "&ordf;",
	      "Â«": "&laquo;",
	      "Â¬": "&not;",
	      "Â­": "&shy;",
	      "Â®": "&reg;",
	      "Â¯": "&macr;",
	      "Â°": "&deg;",
	      "Â±": "&plusmn;",
	      "Â²": "&sup2;",
	      "Â³": "&sup3;",
	      "Â´": "&acute;",
	      "Âµ": "&micro;",
	      "Â¶": "&para;",
	      "Â·": "&middot;",
	      "Â¸": "&cedil;",
	      "Â¹": "&sup1;",
	      "Âº": "&ordm;",
	      "Â»": "&raquo;",
	      "Â¼": "&frac14;",
	      "Â½": "&frac12;",
	      "Â¾": "&frac34;",
	      "Â¿": "&iquest;",
	      "Ã": "&Agrave;",
	      "Ã": "&Aacute;",
	      "Ã": "&Acirc;",
	      "Ã": "&Atilde;",
	      "Ã": "&Auml;",
	      "Ã": "&Aring;",
	      "Ã": "&AElig;",
	      "Ã": "&Ccedil;",
	      "Ã": "&Egrave;",
	      "Ã": "&Eacute;",
	      "Ã": "&Ecirc;",
	      "Ã": "&Euml;",
	      "Ã": "&Igrave;",
	      "Ã": "&Iacute;",
	      "Ã": "&Icirc;",
	      "Ã": "&Iuml;",
	      "Ã": "&ETH;",
	      "Ã": "&Ntilde;",
	      "Ã": "&Ograve;",
	      "Ã": "&Oacute;",
	      "Ã": "&Ocirc;",
	      "Ã": "&Otilde;",
	      "Ã": "&Ouml;",
	      "Ã": "&times;",
	      "Ã": "&Oslash;",
	      "Ã": "&Ugrave;",
	      "Ã": "&Uacute;",
	      "Ã": "&Ucirc;",
	      "Ã": "&Uuml;",
	      "Ã": "&Yacute;",
	      "Ã": "&THORN;",
	      "Ã": "&szlig;",
	      "Ã ": "&agrave;",
	      "Ã¡": "&aacute;",
	      "Ã¢": "&acirc;",
	      "Ã£": "&atilde;",
	      "Ã¤": "&auml;",
	      "Ã¥": "&aring;",
	      "Ã¦": "&aelig;",
	      "Ã§": "&ccedil;",
	      "Ã¨": "&egrave;",
	      "Ã©": "&eacute;",
	      "Ãª": "&ecirc;",
	      "Ã«": "&euml;",
	      "Ã¬": "&igrave;",
	      "Ã­": "&iacute;",
	      "Ã®": "&icirc;",
	      "Ã¯": "&iuml;",
	      "Ã°": "&eth;",
	      "Ã±": "&ntilde;",
	      "Ã²": "&ograve;",
	      "Ã³": "&oacute;",
	      "Ã´": "&ocirc;",
	      "Ãµ": "&otilde;",
	      "Ã¶": "&ouml;",
	      "Ã·": "&divide;",
	      "Ã¸": "&oslash;",
	      "Ã¹": "&ugrave;",
	      "Ãº": "&uacute;",
	      "Ã»": "&ucirc;",
	      "Ã¼": "&uuml;",
	      "Ã½": "&yacute;",
	      "Ã¾": "&thorn;",
	      "Ã¿": "&yuml;",
	      '"': "&quot;",
	      "&": "&amp;",
	      "<": "&lt;",
	      ">": "&gt;",
	      "Å": "&OElig;",
	      "Å": "&oelig;",
	      "Å ": "&Scaron;",
	      "Å¡": "&scaron;",
	      "Å¸": "&Yuml;",
	      "Ë": "&circ;",
	      "Ë": "&tilde;",
	      "â": "&ensp;",
	      "â": "&emsp;",
	      "â": "&thinsp;",
	      "â": "&zwnj;",
	      "â": "&zwj;",
	      "â": "&lrm;",
	      "â": "&rlm;",
	      "â": "&ndash;",
	      "â": "&mdash;",
	      "â": "&lsquo;",
	      "â": "&rsquo;",
	      "â": "&sbquo;",
	      "â": "&ldquo;",
	      "â": "&rdquo;",
	      "â": "&bdquo;",
	      "â ": "&dagger;",
	      "â¡": "&Dagger;",
	      "â°": "&permil;",
	      "â¹": "&lsaquo;",
	      "âº": "&rsaquo;",
	      "â¬": "&euro;",
	      "Æ": "&fnof;",
	      "Î": "&Alpha;",
	      "Î": "&Beta;",
	      "Î": "&Gamma;",
	      "Î": "&Delta;",
	      "Î": "&Epsilon;",
	      "Î": "&Zeta;",
	      "Î": "&Eta;",
	      "Î": "&Theta;",
	      "Î": "&Iota;",
	      "Î": "&Kappa;",
	      "Î": "&Lambda;",
	      "Î": "&Mu;",
	      "Î": "&Nu;",
	      "Î": "&Xi;",
	      "Î": "&Omicron;",
	      "Î ": "&Pi;",
	      "Î¡": "&Rho;",
	      "Î£": "&Sigma;",
	      "Î¤": "&Tau;",
	      "Î¥": "&Upsilon;",
	      "Î¦": "&Phi;",
	      "Î§": "&Chi;",
	      "Î¨": "&Psi;",
	      "Î©": "&Omega;",
	      "Î±": "&alpha;",
	      "Î²": "&beta;",
	      "Î³": "&gamma;",
	      "Î´": "&delta;",
	      "Îµ": "&epsilon;",
	      "Î¶": "&zeta;",
	      "Î·": "&eta;",
	      "Î¸": "&theta;",
	      "Î¹": "&iota;",
	      "Îº": "&kappa;",
	      "Î»": "&lambda;",
	      "Î¼": "&mu;",
	      "Î½": "&nu;",
	      "Î¾": "&xi;",
	      "Î¿": "&omicron;",
	      "Ï": "&pi;",
	      "Ï": "&rho;",
	      "Ï": "&sigmaf;",
	      "Ï": "&sigma;",
	      "Ï": "&tau;",
	      "Ï": "&upsilon;",
	      "Ï": "&phi;",
	      "Ï": "&chi;",
	      "Ï": "&psi;",
	      "Ï": "&omega;",
	      "Ï": "&thetasym;",
	      "Ï": "&upsih;",
	      "Ï": "&piv;",
	      "â¢": "&bull;",
	      "â¦": "&hellip;",
	      "â²": "&prime;",
	      "â³": "&Prime;",
	      "â¾": "&oline;",
	      "â": "&frasl;",
	      "â": "&weierp;",
	      "â": "&image;",
	      "â": "&real;",
	      "â¢": "&trade;",
	      "âµ": "&alefsym;",
	      "â": "&larr;",
	      "â": "&uarr;",
	      "â": "&rarr;",
	      "â": "&darr;",
	      "â": "&harr;",
	      "âµ": "&crarr;",
	      "â": "&lArr;",
	      "â": "&uArr;",
	      "â": "&rArr;",
	      "â": "&dArr;",
	      "â": "&hArr;",
	      "â": "&forall;",
	      "â": "&part;",
	      "â": "&exist;",
	      "â": "&empty;",
	      "â": "&nabla;",
	      "â": "&isin;",
	      "â": "&notin;",
	      "â": "&ni;",
	      "â": "&prod;",
	      "â": "&sum;",
	      "â": "&minus;",
	      "â": "&lowast;",
	      "â": "&radic;",
	      "â": "&prop;",
	      "â": "&infin;",
	      "â ": "&ang;",
	      "â§": "&and;",
	      "â¨": "&or;",
	      "â©": "&cap;",
	      "âª": "&cup;",
	      "â«": "&int;",
	      "â´": "&there4;",
	      "â¼": "&sim;",
	      "â": "&cong;",
	      "â": "&asymp;",
	      "â ": "&ne;",
	      "â¡": "&equiv;",
	      "â¤": "&le;",
	      "â¥": "&ge;",
	      "â": "&sub;",
	      "â": "&sup;",
	      "â": "&nsub;",
	      "â": "&sube;",
	      "â": "&supe;",
	      "â": "&oplus;",
	      "â": "&otimes;",
	      "â¥": "&perp;",
	      "â": "&sdot;",
	      "â": "&lceil;",
	      "â": "&rceil;",
	      "â": "&lfloor;",
	      "â": "&rfloor;",
	      "â©": "&lang;",
	      "âª": "&rang;",
	      "â": "&loz;",
	      "â ": "&spades;",
	      "â£": "&clubs;",
	      "â¥": "&hearts;",
	      "â¦": "&diams;"
	    }
	  },
	  html5: {
	    entities: {
	      "&AElig": "Ã",
	      "&AElig;": "Ã",
	      "&AMP": "&",
	      "&AMP;": "&",
	      "&Aacute": "Ã",
	      "&Aacute;": "Ã",
	      "&Abreve;": "Ä",
	      "&Acirc": "Ã",
	      "&Acirc;": "Ã",
	      "&Acy;": "Ð",
	      "&Afr;": "ð",
	      "&Agrave": "Ã",
	      "&Agrave;": "Ã",
	      "&Alpha;": "Î",
	      "&Amacr;": "Ä",
	      "&And;": "â©",
	      "&Aogon;": "Ä",
	      "&Aopf;": "ð¸",
	      "&ApplyFunction;": "â¡",
	      "&Aring": "Ã",
	      "&Aring;": "Ã",
	      "&Ascr;": "ð",
	      "&Assign;": "â",
	      "&Atilde": "Ã",
	      "&Atilde;": "Ã",
	      "&Auml": "Ã",
	      "&Auml;": "Ã",
	      "&Backslash;": "â",
	      "&Barv;": "â«§",
	      "&Barwed;": "â",
	      "&Bcy;": "Ð",
	      "&Because;": "âµ",
	      "&Bernoullis;": "â¬",
	      "&Beta;": "Î",
	      "&Bfr;": "ð",
	      "&Bopf;": "ð¹",
	      "&Breve;": "Ë",
	      "&Bscr;": "â¬",
	      "&Bumpeq;": "â",
	      "&CHcy;": "Ð§",
	      "&COPY": "Â©",
	      "&COPY;": "Â©",
	      "&Cacute;": "Ä",
	      "&Cap;": "â",
	      "&CapitalDifferentialD;": "â",
	      "&Cayleys;": "â­",
	      "&Ccaron;": "Ä",
	      "&Ccedil": "Ã",
	      "&Ccedil;": "Ã",
	      "&Ccirc;": "Ä",
	      "&Cconint;": "â°",
	      "&Cdot;": "Ä",
	      "&Cedilla;": "Â¸",
	      "&CenterDot;": "Â·",
	      "&Cfr;": "â­",
	      "&Chi;": "Î§",
	      "&CircleDot;": "â",
	      "&CircleMinus;": "â",
	      "&CirclePlus;": "â",
	      "&CircleTimes;": "â",
	      "&ClockwiseContourIntegral;": "â²",
	      "&CloseCurlyDoubleQuote;": "â",
	      "&CloseCurlyQuote;": "â",
	      "&Colon;": "â·",
	      "&Colone;": "â©´",
	      "&Congruent;": "â¡",
	      "&Conint;": "â¯",
	      "&ContourIntegral;": "â®",
	      "&Copf;": "â",
	      "&Coproduct;": "â",
	      "&CounterClockwiseContourIntegral;": "â³",
	      "&Cross;": "â¨¯",
	      "&Cscr;": "ð",
	      "&Cup;": "â",
	      "&CupCap;": "â",
	      "&DD;": "â",
	      "&DDotrahd;": "â¤",
	      "&DJcy;": "Ð",
	      "&DScy;": "Ð",
	      "&DZcy;": "Ð",
	      "&Dagger;": "â¡",
	      "&Darr;": "â¡",
	      "&Dashv;": "â«¤",
	      "&Dcaron;": "Ä",
	      "&Dcy;": "Ð",
	      "&Del;": "â",
	      "&Delta;": "Î",
	      "&Dfr;": "ð",
	      "&DiacriticalAcute;": "Â´",
	      "&DiacriticalDot;": "Ë",
	      "&DiacriticalDoubleAcute;": "Ë",
	      "&DiacriticalGrave;": "`",
	      "&DiacriticalTilde;": "Ë",
	      "&Diamond;": "â",
	      "&DifferentialD;": "â",
	      "&Dopf;": "ð»",
	      "&Dot;": "Â¨",
	      "&DotDot;": "â",
	      "&DotEqual;": "â",
	      "&DoubleContourIntegral;": "â¯",
	      "&DoubleDot;": "Â¨",
	      "&DoubleDownArrow;": "â",
	      "&DoubleLeftArrow;": "â",
	      "&DoubleLeftRightArrow;": "â",
	      "&DoubleLeftTee;": "â«¤",
	      "&DoubleLongLeftArrow;": "â¸",
	      "&DoubleLongLeftRightArrow;": "âº",
	      "&DoubleLongRightArrow;": "â¹",
	      "&DoubleRightArrow;": "â",
	      "&DoubleRightTee;": "â¨",
	      "&DoubleUpArrow;": "â",
	      "&DoubleUpDownArrow;": "â",
	      "&DoubleVerticalBar;": "â¥",
	      "&DownArrow;": "â",
	      "&DownArrowBar;": "â¤",
	      "&DownArrowUpArrow;": "âµ",
	      "&DownBreve;": "Ì",
	      "&DownLeftRightVector;": "â¥",
	      "&DownLeftTeeVector;": "â¥",
	      "&DownLeftVector;": "â½",
	      "&DownLeftVectorBar;": "â¥",
	      "&DownRightTeeVector;": "â¥",
	      "&DownRightVector;": "â",
	      "&DownRightVectorBar;": "â¥",
	      "&DownTee;": "â¤",
	      "&DownTeeArrow;": "â§",
	      "&Downarrow;": "â",
	      "&Dscr;": "ð",
	      "&Dstrok;": "Ä",
	      "&ENG;": "Å",
	      "&ETH": "Ã",
	      "&ETH;": "Ã",
	      "&Eacute": "Ã",
	      "&Eacute;": "Ã",
	      "&Ecaron;": "Ä",
	      "&Ecirc": "Ã",
	      "&Ecirc;": "Ã",
	      "&Ecy;": "Ð­",
	      "&Edot;": "Ä",
	      "&Efr;": "ð",
	      "&Egrave": "Ã",
	      "&Egrave;": "Ã",
	      "&Element;": "â",
	      "&Emacr;": "Ä",
	      "&EmptySmallSquare;": "â»",
	      "&EmptyVerySmallSquare;": "â«",
	      "&Eogon;": "Ä",
	      "&Eopf;": "ð¼",
	      "&Epsilon;": "Î",
	      "&Equal;": "â©µ",
	      "&EqualTilde;": "â",
	      "&Equilibrium;": "â",
	      "&Escr;": "â°",
	      "&Esim;": "â©³",
	      "&Eta;": "Î",
	      "&Euml": "Ã",
	      "&Euml;": "Ã",
	      "&Exists;": "â",
	      "&ExponentialE;": "â",
	      "&Fcy;": "Ð¤",
	      "&Ffr;": "ð",
	      "&FilledSmallSquare;": "â¼",
	      "&FilledVerySmallSquare;": "âª",
	      "&Fopf;": "ð½",
	      "&ForAll;": "â",
	      "&Fouriertrf;": "â±",
	      "&Fscr;": "â±",
	      "&GJcy;": "Ð",
	      "&GT": ">",
	      "&GT;": ">",
	      "&Gamma;": "Î",
	      "&Gammad;": "Ï",
	      "&Gbreve;": "Ä",
	      "&Gcedil;": "Ä¢",
	      "&Gcirc;": "Ä",
	      "&Gcy;": "Ð",
	      "&Gdot;": "Ä ",
	      "&Gfr;": "ð",
	      "&Gg;": "â",
	      "&Gopf;": "ð¾",
	      "&GreaterEqual;": "â¥",
	      "&GreaterEqualLess;": "â",
	      "&GreaterFullEqual;": "â§",
	      "&GreaterGreater;": "âª¢",
	      "&GreaterLess;": "â·",
	      "&GreaterSlantEqual;": "â©¾",
	      "&GreaterTilde;": "â³",
	      "&Gscr;": "ð¢",
	      "&Gt;": "â«",
	      "&HARDcy;": "Ðª",
	      "&Hacek;": "Ë",
	      "&Hat;": "^",
	      "&Hcirc;": "Ä¤",
	      "&Hfr;": "â",
	      "&HilbertSpace;": "â",
	      "&Hopf;": "â",
	      "&HorizontalLine;": "â",
	      "&Hscr;": "â",
	      "&Hstrok;": "Ä¦",
	      "&HumpDownHump;": "â",
	      "&HumpEqual;": "â",
	      "&IEcy;": "Ð",
	      "&IJlig;": "Ä²",
	      "&IOcy;": "Ð",
	      "&Iacute": "Ã",
	      "&Iacute;": "Ã",
	      "&Icirc": "Ã",
	      "&Icirc;": "Ã",
	      "&Icy;": "Ð",
	      "&Idot;": "Ä°",
	      "&Ifr;": "â",
	      "&Igrave": "Ã",
	      "&Igrave;": "Ã",
	      "&Im;": "â",
	      "&Imacr;": "Äª",
	      "&ImaginaryI;": "â",
	      "&Implies;": "â",
	      "&Int;": "â¬",
	      "&Integral;": "â«",
	      "&Intersection;": "â",
	      "&InvisibleComma;": "â£",
	      "&InvisibleTimes;": "â¢",
	      "&Iogon;": "Ä®",
	      "&Iopf;": "ð",
	      "&Iota;": "Î",
	      "&Iscr;": "â",
	      "&Itilde;": "Ä¨",
	      "&Iukcy;": "Ð",
	      "&Iuml": "Ã",
	      "&Iuml;": "Ã",
	      "&Jcirc;": "Ä´",
	      "&Jcy;": "Ð",
	      "&Jfr;": "ð",
	      "&Jopf;": "ð",
	      "&Jscr;": "ð¥",
	      "&Jsercy;": "Ð",
	      "&Jukcy;": "Ð",
	      "&KHcy;": "Ð¥",
	      "&KJcy;": "Ð",
	      "&Kappa;": "Î",
	      "&Kcedil;": "Ä¶",
	      "&Kcy;": "Ð",
	      "&Kfr;": "ð",
	      "&Kopf;": "ð",
	      "&Kscr;": "ð¦",
	      "&LJcy;": "Ð",
	      "&LT": "<",
	      "&LT;": "<",
	      "&Lacute;": "Ä¹",
	      "&Lambda;": "Î",
	      "&Lang;": "âª",
	      "&Laplacetrf;": "â",
	      "&Larr;": "â",
	      "&Lcaron;": "Ä½",
	      "&Lcedil;": "Ä»",
	      "&Lcy;": "Ð",
	      "&LeftAngleBracket;": "â¨",
	      "&LeftArrow;": "â",
	      "&LeftArrowBar;": "â¤",
	      "&LeftArrowRightArrow;": "â",
	      "&LeftCeiling;": "â",
	      "&LeftDoubleBracket;": "â¦",
	      "&LeftDownTeeVector;": "â¥¡",
	      "&LeftDownVector;": "â",
	      "&LeftDownVectorBar;": "â¥",
	      "&LeftFloor;": "â",
	      "&LeftRightArrow;": "â",
	      "&LeftRightVector;": "â¥",
	      "&LeftTee;": "â£",
	      "&LeftTeeArrow;": "â¤",
	      "&LeftTeeVector;": "â¥",
	      "&LeftTriangle;": "â²",
	      "&LeftTriangleBar;": "â§",
	      "&LeftTriangleEqual;": "â´",
	      "&LeftUpDownVector;": "â¥",
	      "&LeftUpTeeVector;": "â¥ ",
	      "&LeftUpVector;": "â¿",
	      "&LeftUpVectorBar;": "â¥",
	      "&LeftVector;": "â¼",
	      "&LeftVectorBar;": "â¥",
	      "&Leftarrow;": "â",
	      "&Leftrightarrow;": "â",
	      "&LessEqualGreater;": "â",
	      "&LessFullEqual;": "â¦",
	      "&LessGreater;": "â¶",
	      "&LessLess;": "âª¡",
	      "&LessSlantEqual;": "â©½",
	      "&LessTilde;": "â²",
	      "&Lfr;": "ð",
	      "&Ll;": "â",
	      "&Lleftarrow;": "â",
	      "&Lmidot;": "Ä¿",
	      "&LongLeftArrow;": "âµ",
	      "&LongLeftRightArrow;": "â·",
	      "&LongRightArrow;": "â¶",
	      "&Longleftarrow;": "â¸",
	      "&Longleftrightarrow;": "âº",
	      "&Longrightarrow;": "â¹",
	      "&Lopf;": "ð",
	      "&LowerLeftArrow;": "â",
	      "&LowerRightArrow;": "â",
	      "&Lscr;": "â",
	      "&Lsh;": "â°",
	      "&Lstrok;": "Å",
	      "&Lt;": "âª",
	      "&Map;": "â¤",
	      "&Mcy;": "Ð",
	      "&MediumSpace;": "â",
	      "&Mellintrf;": "â³",
	      "&Mfr;": "ð",
	      "&MinusPlus;": "â",
	      "&Mopf;": "ð",
	      "&Mscr;": "â³",
	      "&Mu;": "Î",
	      "&NJcy;": "Ð",
	      "&Nacute;": "Å",
	      "&Ncaron;": "Å",
	      "&Ncedil;": "Å",
	      "&Ncy;": "Ð",
	      "&NegativeMediumSpace;": "â",
	      "&NegativeThickSpace;": "â",
	      "&NegativeThinSpace;": "â",
	      "&NegativeVeryThinSpace;": "â",
	      "&NestedGreaterGreater;": "â«",
	      "&NestedLessLess;": "âª",
	      "&NewLine;": "\n",
	      "&Nfr;": "ð",
	      "&NoBreak;": "â ",
	      "&NonBreakingSpace;": "Â ",
	      "&Nopf;": "â",
	      "&Not;": "â«¬",
	      "&NotCongruent;": "â¢",
	      "&NotCupCap;": "â­",
	      "&NotDoubleVerticalBar;": "â¦",
	      "&NotElement;": "â",
	      "&NotEqual;": "â ",
	      "&NotEqualTilde;": "âÌ¸",
	      "&NotExists;": "â",
	      "&NotGreater;": "â¯",
	      "&NotGreaterEqual;": "â±",
	      "&NotGreaterFullEqual;": "â§Ì¸",
	      "&NotGreaterGreater;": "â«Ì¸",
	      "&NotGreaterLess;": "â¹",
	      "&NotGreaterSlantEqual;": "â©¾Ì¸",
	      "&NotGreaterTilde;": "âµ",
	      "&NotHumpDownHump;": "âÌ¸",
	      "&NotHumpEqual;": "âÌ¸",
	      "&NotLeftTriangle;": "âª",
	      "&NotLeftTriangleBar;": "â§Ì¸",
	      "&NotLeftTriangleEqual;": "â¬",
	      "&NotLess;": "â®",
	      "&NotLessEqual;": "â°",
	      "&NotLessGreater;": "â¸",
	      "&NotLessLess;": "âªÌ¸",
	      "&NotLessSlantEqual;": "â©½Ì¸",
	      "&NotLessTilde;": "â´",
	      "&NotNestedGreaterGreater;": "âª¢Ì¸",
	      "&NotNestedLessLess;": "âª¡Ì¸",
	      "&NotPrecedes;": "â",
	      "&NotPrecedesEqual;": "âª¯Ì¸",
	      "&NotPrecedesSlantEqual;": "â ",
	      "&NotReverseElement;": "â",
	      "&NotRightTriangle;": "â«",
	      "&NotRightTriangleBar;": "â§Ì¸",
	      "&NotRightTriangleEqual;": "â­",
	      "&NotSquareSubset;": "âÌ¸",
	      "&NotSquareSubsetEqual;": "â¢",
	      "&NotSquareSuperset;": "âÌ¸",
	      "&NotSquareSupersetEqual;": "â£",
	      "&NotSubset;": "ââ",
	      "&NotSubsetEqual;": "â",
	      "&NotSucceeds;": "â",
	      "&NotSucceedsEqual;": "âª°Ì¸",
	      "&NotSucceedsSlantEqual;": "â¡",
	      "&NotSucceedsTilde;": "â¿Ì¸",
	      "&NotSuperset;": "ââ",
	      "&NotSupersetEqual;": "â",
	      "&NotTilde;": "â",
	      "&NotTildeEqual;": "â",
	      "&NotTildeFullEqual;": "â",
	      "&NotTildeTilde;": "â",
	      "&NotVerticalBar;": "â¤",
	      "&Nscr;": "ð©",
	      "&Ntilde": "Ã",
	      "&Ntilde;": "Ã",
	      "&Nu;": "Î",
	      "&OElig;": "Å",
	      "&Oacute": "Ã",
	      "&Oacute;": "Ã",
	      "&Ocirc": "Ã",
	      "&Ocirc;": "Ã",
	      "&Ocy;": "Ð",
	      "&Odblac;": "Å",
	      "&Ofr;": "ð",
	      "&Ograve": "Ã",
	      "&Ograve;": "Ã",
	      "&Omacr;": "Å",
	      "&Omega;": "Î©",
	      "&Omicron;": "Î",
	      "&Oopf;": "ð",
	      "&OpenCurlyDoubleQuote;": "â",
	      "&OpenCurlyQuote;": "â",
	      "&Or;": "â©",
	      "&Oscr;": "ðª",
	      "&Oslash": "Ã",
	      "&Oslash;": "Ã",
	      "&Otilde": "Ã",
	      "&Otilde;": "Ã",
	      "&Otimes;": "â¨·",
	      "&Ouml": "Ã",
	      "&Ouml;": "Ã",
	      "&OverBar;": "â¾",
	      "&OverBrace;": "â",
	      "&OverBracket;": "â´",
	      "&OverParenthesis;": "â",
	      "&PartialD;": "â",
	      "&Pcy;": "Ð",
	      "&Pfr;": "ð",
	      "&Phi;": "Î¦",
	      "&Pi;": "Î ",
	      "&PlusMinus;": "Â±",
	      "&Poincareplane;": "â",
	      "&Popf;": "â",
	      "&Pr;": "âª»",
	      "&Precedes;": "âº",
	      "&PrecedesEqual;": "âª¯",
	      "&PrecedesSlantEqual;": "â¼",
	      "&PrecedesTilde;": "â¾",
	      "&Prime;": "â³",
	      "&Product;": "â",
	      "&Proportion;": "â·",
	      "&Proportional;": "â",
	      "&Pscr;": "ð«",
	      "&Psi;": "Î¨",
	      "&QUOT": '"',
	      "&QUOT;": '"',
	      "&Qfr;": "ð",
	      "&Qopf;": "â",
	      "&Qscr;": "ð¬",
	      "&RBarr;": "â¤",
	      "&REG": "Â®",
	      "&REG;": "Â®",
	      "&Racute;": "Å",
	      "&Rang;": "â«",
	      "&Rarr;": "â ",
	      "&Rarrtl;": "â¤",
	      "&Rcaron;": "Å",
	      "&Rcedil;": "Å",
	      "&Rcy;": "Ð ",
	      "&Re;": "â",
	      "&ReverseElement;": "â",
	      "&ReverseEquilibrium;": "â",
	      "&ReverseUpEquilibrium;": "â¥¯",
	      "&Rfr;": "â",
	      "&Rho;": "Î¡",
	      "&RightAngleBracket;": "â©",
	      "&RightArrow;": "â",
	      "&RightArrowBar;": "â¥",
	      "&RightArrowLeftArrow;": "â",
	      "&RightCeiling;": "â",
	      "&RightDoubleBracket;": "â§",
	      "&RightDownTeeVector;": "â¥",
	      "&RightDownVector;": "â",
	      "&RightDownVectorBar;": "â¥",
	      "&RightFloor;": "â",
	      "&RightTee;": "â¢",
	      "&RightTeeArrow;": "â¦",
	      "&RightTeeVector;": "â¥",
	      "&RightTriangle;": "â³",
	      "&RightTriangleBar;": "â§",
	      "&RightTriangleEqual;": "âµ",
	      "&RightUpDownVector;": "â¥",
	      "&RightUpTeeVector;": "â¥",
	      "&RightUpVector;": "â¾",
	      "&RightUpVectorBar;": "â¥",
	      "&RightVector;": "â",
	      "&RightVectorBar;": "â¥",
	      "&Rightarrow;": "â",
	      "&Ropf;": "â",
	      "&RoundImplies;": "â¥°",
	      "&Rrightarrow;": "â",
	      "&Rscr;": "â",
	      "&Rsh;": "â±",
	      "&RuleDelayed;": "â§´",
	      "&SHCHcy;": "Ð©",
	      "&SHcy;": "Ð¨",
	      "&SOFTcy;": "Ð¬",
	      "&Sacute;": "Å",
	      "&Sc;": "âª¼",
	      "&Scaron;": "Å ",
	      "&Scedil;": "Å",
	      "&Scirc;": "Å",
	      "&Scy;": "Ð¡",
	      "&Sfr;": "ð",
	      "&ShortDownArrow;": "â",
	      "&ShortLeftArrow;": "â",
	      "&ShortRightArrow;": "â",
	      "&ShortUpArrow;": "â",
	      "&Sigma;": "Î£",
	      "&SmallCircle;": "â",
	      "&Sopf;": "ð",
	      "&Sqrt;": "â",
	      "&Square;": "â¡",
	      "&SquareIntersection;": "â",
	      "&SquareSubset;": "â",
	      "&SquareSubsetEqual;": "â",
	      "&SquareSuperset;": "â",
	      "&SquareSupersetEqual;": "â",
	      "&SquareUnion;": "â",
	      "&Sscr;": "ð®",
	      "&Star;": "â",
	      "&Sub;": "â",
	      "&Subset;": "â",
	      "&SubsetEqual;": "â",
	      "&Succeeds;": "â»",
	      "&SucceedsEqual;": "âª°",
	      "&SucceedsSlantEqual;": "â½",
	      "&SucceedsTilde;": "â¿",
	      "&SuchThat;": "â",
	      "&Sum;": "â",
	      "&Sup;": "â",
	      "&Superset;": "â",
	      "&SupersetEqual;": "â",
	      "&Supset;": "â",
	      "&THORN": "Ã",
	      "&THORN;": "Ã",
	      "&TRADE;": "â¢",
	      "&TSHcy;": "Ð",
	      "&TScy;": "Ð¦",
	      "&Tab;": "\t",
	      "&Tau;": "Î¤",
	      "&Tcaron;": "Å¤",
	      "&Tcedil;": "Å¢",
	      "&Tcy;": "Ð¢",
	      "&Tfr;": "ð",
	      "&Therefore;": "â´",
	      "&Theta;": "Î",
	      "&ThickSpace;": "ââ",
	      "&ThinSpace;": "â",
	      "&Tilde;": "â¼",
	      "&TildeEqual;": "â",
	      "&TildeFullEqual;": "â",
	      "&TildeTilde;": "â",
	      "&Topf;": "ð",
	      "&TripleDot;": "â",
	      "&Tscr;": "ð¯",
	      "&Tstrok;": "Å¦",
	      "&Uacute": "Ã",
	      "&Uacute;": "Ã",
	      "&Uarr;": "â",
	      "&Uarrocir;": "â¥",
	      "&Ubrcy;": "Ð",
	      "&Ubreve;": "Å¬",
	      "&Ucirc": "Ã",
	      "&Ucirc;": "Ã",
	      "&Ucy;": "Ð£",
	      "&Udblac;": "Å°",
	      "&Ufr;": "ð",
	      "&Ugrave": "Ã",
	      "&Ugrave;": "Ã",
	      "&Umacr;": "Åª",
	      "&UnderBar;": "_",
	      "&UnderBrace;": "â",
	      "&UnderBracket;": "âµ",
	      "&UnderParenthesis;": "â",
	      "&Union;": "â",
	      "&UnionPlus;": "â",
	      "&Uogon;": "Å²",
	      "&Uopf;": "ð",
	      "&UpArrow;": "â",
	      "&UpArrowBar;": "â¤",
	      "&UpArrowDownArrow;": "â",
	      "&UpDownArrow;": "â",
	      "&UpEquilibrium;": "â¥®",
	      "&UpTee;": "â¥",
	      "&UpTeeArrow;": "â¥",
	      "&Uparrow;": "â",
	      "&Updownarrow;": "â",
	      "&UpperLeftArrow;": "â",
	      "&UpperRightArrow;": "â",
	      "&Upsi;": "Ï",
	      "&Upsilon;": "Î¥",
	      "&Uring;": "Å®",
	      "&Uscr;": "ð°",
	      "&Utilde;": "Å¨",
	      "&Uuml": "Ã",
	      "&Uuml;": "Ã",
	      "&VDash;": "â«",
	      "&Vbar;": "â««",
	      "&Vcy;": "Ð",
	      "&Vdash;": "â©",
	      "&Vdashl;": "â«¦",
	      "&Vee;": "â",
	      "&Verbar;": "â",
	      "&Vert;": "â",
	      "&VerticalBar;": "â£",
	      "&VerticalLine;": "|",
	      "&VerticalSeparator;": "â",
	      "&VerticalTilde;": "â",
	      "&VeryThinSpace;": "â",
	      "&Vfr;": "ð",
	      "&Vopf;": "ð",
	      "&Vscr;": "ð±",
	      "&Vvdash;": "âª",
	      "&Wcirc;": "Å´",
	      "&Wedge;": "â",
	      "&Wfr;": "ð",
	      "&Wopf;": "ð",
	      "&Wscr;": "ð²",
	      "&Xfr;": "ð",
	      "&Xi;": "Î",
	      "&Xopf;": "ð",
	      "&Xscr;": "ð³",
	      "&YAcy;": "Ð¯",
	      "&YIcy;": "Ð",
	      "&YUcy;": "Ð®",
	      "&Yacute": "Ã",
	      "&Yacute;": "Ã",
	      "&Ycirc;": "Å¶",
	      "&Ycy;": "Ð«",
	      "&Yfr;": "ð",
	      "&Yopf;": "ð",
	      "&Yscr;": "ð´",
	      "&Yuml;": "Å¸",
	      "&ZHcy;": "Ð",
	      "&Zacute;": "Å¹",
	      "&Zcaron;": "Å½",
	      "&Zcy;": "Ð",
	      "&Zdot;": "Å»",
	      "&ZeroWidthSpace;": "â",
	      "&Zeta;": "Î",
	      "&Zfr;": "â¨",
	      "&Zopf;": "â¤",
	      "&Zscr;": "ðµ",
	      "&aacute": "Ã¡",
	      "&aacute;": "Ã¡",
	      "&abreve;": "Ä",
	      "&ac;": "â¾",
	      "&acE;": "â¾Ì³",
	      "&acd;": "â¿",
	      "&acirc": "Ã¢",
	      "&acirc;": "Ã¢",
	      "&acute": "Â´",
	      "&acute;": "Â´",
	      "&acy;": "Ð°",
	      "&aelig": "Ã¦",
	      "&aelig;": "Ã¦",
	      "&af;": "â¡",
	      "&afr;": "ð",
	      "&agrave": "Ã ",
	      "&agrave;": "Ã ",
	      "&alefsym;": "âµ",
	      "&aleph;": "âµ",
	      "&alpha;": "Î±",
	      "&amacr;": "Ä",
	      "&amalg;": "â¨¿",
	      "&amp": "&",
	      "&amp;": "&",
	      "&and;": "â§",
	      "&andand;": "â©",
	      "&andd;": "â©",
	      "&andslope;": "â©",
	      "&andv;": "â©",
	      "&ang;": "â ",
	      "&ange;": "â¦¤",
	      "&angle;": "â ",
	      "&angmsd;": "â¡",
	      "&angmsdaa;": "â¦¨",
	      "&angmsdab;": "â¦©",
	      "&angmsdac;": "â¦ª",
	      "&angmsdad;": "â¦«",
	      "&angmsdae;": "â¦¬",
	      "&angmsdaf;": "â¦­",
	      "&angmsdag;": "â¦®",
	      "&angmsdah;": "â¦¯",
	      "&angrt;": "â",
	      "&angrtvb;": "â¾",
	      "&angrtvbd;": "â¦",
	      "&angsph;": "â¢",
	      "&angst;": "Ã",
	      "&angzarr;": "â¼",
	      "&aogon;": "Ä",
	      "&aopf;": "ð",
	      "&ap;": "â",
	      "&apE;": "â©°",
	      "&apacir;": "â©¯",
	      "&ape;": "â",
	      "&apid;": "â",
	      "&apos;": "'",
	      "&approx;": "â",
	      "&approxeq;": "â",
	      "&aring": "Ã¥",
	      "&aring;": "Ã¥",
	      "&ascr;": "ð¶",
	      "&ast;": "*",
	      "&asymp;": "â",
	      "&asympeq;": "â",
	      "&atilde": "Ã£",
	      "&atilde;": "Ã£",
	      "&auml": "Ã¤",
	      "&auml;": "Ã¤",
	      "&awconint;": "â³",
	      "&awint;": "â¨",
	      "&bNot;": "â«­",
	      "&backcong;": "â",
	      "&backepsilon;": "Ï¶",
	      "&backprime;": "âµ",
	      "&backsim;": "â½",
	      "&backsimeq;": "â",
	      "&barvee;": "â½",
	      "&barwed;": "â",
	      "&barwedge;": "â",
	      "&bbrk;": "âµ",
	      "&bbrktbrk;": "â¶",
	      "&bcong;": "â",
	      "&bcy;": "Ð±",
	      "&bdquo;": "â",
	      "&becaus;": "âµ",
	      "&because;": "âµ",
	      "&bemptyv;": "â¦°",
	      "&bepsi;": "Ï¶",
	      "&bernou;": "â¬",
	      "&beta;": "Î²",
	      "&beth;": "â¶",
	      "&between;": "â¬",
	      "&bfr;": "ð",
	      "&bigcap;": "â",
	      "&bigcirc;": "â¯",
	      "&bigcup;": "â",
	      "&bigodot;": "â¨",
	      "&bigoplus;": "â¨",
	      "&bigotimes;": "â¨",
	      "&bigsqcup;": "â¨",
	      "&bigstar;": "â",
	      "&bigtriangledown;": "â½",
	      "&bigtriangleup;": "â³",
	      "&biguplus;": "â¨",
	      "&bigvee;": "â",
	      "&bigwedge;": "â",
	      "&bkarow;": "â¤",
	      "&blacklozenge;": "â§«",
	      "&blacksquare;": "âª",
	      "&blacktriangle;": "â´",
	      "&blacktriangledown;": "â¾",
	      "&blacktriangleleft;": "â",
	      "&blacktriangleright;": "â¸",
	      "&blank;": "â£",
	      "&blk12;": "â",
	      "&blk14;": "â",
	      "&blk34;": "â",
	      "&block;": "â",
	      "&bne;": "=â¥",
	      "&bnequiv;": "â¡â¥",
	      "&bnot;": "â",
	      "&bopf;": "ð",
	      "&bot;": "â¥",
	      "&bottom;": "â¥",
	      "&bowtie;": "â",
	      "&boxDL;": "â",
	      "&boxDR;": "â",
	      "&boxDl;": "â",
	      "&boxDr;": "â",
	      "&boxH;": "â",
	      "&boxHD;": "â¦",
	      "&boxHU;": "â©",
	      "&boxHd;": "â¤",
	      "&boxHu;": "â§",
	      "&boxUL;": "â",
	      "&boxUR;": "â",
	      "&boxUl;": "â",
	      "&boxUr;": "â",
	      "&boxV;": "â",
	      "&boxVH;": "â¬",
	      "&boxVL;": "â£",
	      "&boxVR;": "â ",
	      "&boxVh;": "â«",
	      "&boxVl;": "â¢",
	      "&boxVr;": "â",
	      "&boxbox;": "â§",
	      "&boxdL;": "â",
	      "&boxdR;": "â",
	      "&boxdl;": "â",
	      "&boxdr;": "â",
	      "&boxh;": "â",
	      "&boxhD;": "â¥",
	      "&boxhU;": "â¨",
	      "&boxhd;": "â¬",
	      "&boxhu;": "â´",
	      "&boxminus;": "â",
	      "&boxplus;": "â",
	      "&boxtimes;": "â ",
	      "&boxuL;": "â",
	      "&boxuR;": "â",
	      "&boxul;": "â",
	      "&boxur;": "â",
	      "&boxv;": "â",
	      "&boxvH;": "âª",
	      "&boxvL;": "â¡",
	      "&boxvR;": "â",
	      "&boxvh;": "â¼",
	      "&boxvl;": "â¤",
	      "&boxvr;": "â",
	      "&bprime;": "âµ",
	      "&breve;": "Ë",
	      "&brvbar": "Â¦",
	      "&brvbar;": "Â¦",
	      "&bscr;": "ð·",
	      "&bsemi;": "â",
	      "&bsim;": "â½",
	      "&bsime;": "â",
	      "&bsol;": "\\",
	      "&bsolb;": "â§",
	      "&bsolhsub;": "â",
	      "&bull;": "â¢",
	      "&bullet;": "â¢",
	      "&bump;": "â",
	      "&bumpE;": "âª®",
	      "&bumpe;": "â",
	      "&bumpeq;": "â",
	      "&cacute;": "Ä",
	      "&cap;": "â©",
	      "&capand;": "â©",
	      "&capbrcup;": "â©",
	      "&capcap;": "â©",
	      "&capcup;": "â©",
	      "&capdot;": "â©",
	      "&caps;": "â©ï¸",
	      "&caret;": "â",
	      "&caron;": "Ë",
	      "&ccaps;": "â©",
	      "&ccaron;": "Ä",
	      "&ccedil": "Ã§",
	      "&ccedil;": "Ã§",
	      "&ccirc;": "Ä",
	      "&ccups;": "â©",
	      "&ccupssm;": "â©",
	      "&cdot;": "Ä",
	      "&cedil": "Â¸",
	      "&cedil;": "Â¸",
	      "&cemptyv;": "â¦²",
	      "&cent": "Â¢",
	      "&cent;": "Â¢",
	      "&centerdot;": "Â·",
	      "&cfr;": "ð ",
	      "&chcy;": "Ñ",
	      "&check;": "â",
	      "&checkmark;": "â",
	      "&chi;": "Ï",
	      "&cir;": "â",
	      "&cirE;": "â§",
	      "&circ;": "Ë",
	      "&circeq;": "â",
	      "&circlearrowleft;": "âº",
	      "&circlearrowright;": "â»",
	      "&circledR;": "Â®",
	      "&circledS;": "â",
	      "&circledast;": "â",
	      "&circledcirc;": "â",
	      "&circleddash;": "â",
	      "&cire;": "â",
	      "&cirfnint;": "â¨",
	      "&cirmid;": "â«¯",
	      "&cirscir;": "â§",
	      "&clubs;": "â£",
	      "&clubsuit;": "â£",
	      "&colon;": ":",
	      "&colone;": "â",
	      "&coloneq;": "â",
	      "&comma;": ",",
	      "&commat;": "@",
	      "&comp;": "â",
	      "&compfn;": "â",
	      "&complement;": "â",
	      "&complexes;": "â",
	      "&cong;": "â",
	      "&congdot;": "â©­",
	      "&conint;": "â®",
	      "&copf;": "ð",
	      "&coprod;": "â",
	      "&copy": "Â©",
	      "&copy;": "Â©",
	      "&copysr;": "â",
	      "&crarr;": "âµ",
	      "&cross;": "â",
	      "&cscr;": "ð¸",
	      "&csub;": "â«",
	      "&csube;": "â«",
	      "&csup;": "â«",
	      "&csupe;": "â«",
	      "&ctdot;": "â¯",
	      "&cudarrl;": "â¤¸",
	      "&cudarrr;": "â¤µ",
	      "&cuepr;": "â",
	      "&cuesc;": "â",
	      "&cularr;": "â¶",
	      "&cularrp;": "â¤½",
	      "&cup;": "âª",
	      "&cupbrcap;": "â©",
	      "&cupcap;": "â©",
	      "&cupcup;": "â©",
	      "&cupdot;": "â",
	      "&cupor;": "â©",
	      "&cups;": "âªï¸",
	      "&curarr;": "â·",
	      "&curarrm;": "â¤¼",
	      "&curlyeqprec;": "â",
	      "&curlyeqsucc;": "â",
	      "&curlyvee;": "â",
	      "&curlywedge;": "â",
	      "&curren": "Â¤",
	      "&curren;": "Â¤",
	      "&curvearrowleft;": "â¶",
	      "&curvearrowright;": "â·",
	      "&cuvee;": "â",
	      "&cuwed;": "â",
	      "&cwconint;": "â²",
	      "&cwint;": "â±",
	      "&cylcty;": "â­",
	      "&dArr;": "â",
	      "&dHar;": "â¥¥",
	      "&dagger;": "â ",
	      "&daleth;": "â¸",
	      "&darr;": "â",
	      "&dash;": "â",
	      "&dashv;": "â£",
	      "&dbkarow;": "â¤",
	      "&dblac;": "Ë",
	      "&dcaron;": "Ä",
	      "&dcy;": "Ð´",
	      "&dd;": "â",
	      "&ddagger;": "â¡",
	      "&ddarr;": "â",
	      "&ddotseq;": "â©·",
	      "&deg": "Â°",
	      "&deg;": "Â°",
	      "&delta;": "Î´",
	      "&demptyv;": "â¦±",
	      "&dfisht;": "â¥¿",
	      "&dfr;": "ð¡",
	      "&dharl;": "â",
	      "&dharr;": "â",
	      "&diam;": "â",
	      "&diamond;": "â",
	      "&diamondsuit;": "â¦",
	      "&diams;": "â¦",
	      "&die;": "Â¨",
	      "&digamma;": "Ï",
	      "&disin;": "â²",
	      "&div;": "Ã·",
	      "&divide": "Ã·",
	      "&divide;": "Ã·",
	      "&divideontimes;": "â",
	      "&divonx;": "â",
	      "&djcy;": "Ñ",
	      "&dlcorn;": "â",
	      "&dlcrop;": "â",
	      "&dollar;": "$",
	      "&dopf;": "ð",
	      "&dot;": "Ë",
	      "&doteq;": "â",
	      "&doteqdot;": "â",
	      "&dotminus;": "â¸",
	      "&dotplus;": "â",
	      "&dotsquare;": "â¡",
	      "&doublebarwedge;": "â",
	      "&downarrow;": "â",
	      "&downdownarrows;": "â",
	      "&downharpoonleft;": "â",
	      "&downharpoonright;": "â",
	      "&drbkarow;": "â¤",
	      "&drcorn;": "â",
	      "&drcrop;": "â",
	      "&dscr;": "ð¹",
	      "&dscy;": "Ñ",
	      "&dsol;": "â§¶",
	      "&dstrok;": "Ä",
	      "&dtdot;": "â±",
	      "&dtri;": "â¿",
	      "&dtrif;": "â¾",
	      "&duarr;": "âµ",
	      "&duhar;": "â¥¯",
	      "&dwangle;": "â¦¦",
	      "&dzcy;": "Ñ",
	      "&dzigrarr;": "â¿",
	      "&eDDot;": "â©·",
	      "&eDot;": "â",
	      "&eacute": "Ã©",
	      "&eacute;": "Ã©",
	      "&easter;": "â©®",
	      "&ecaron;": "Ä",
	      "&ecir;": "â",
	      "&ecirc": "Ãª",
	      "&ecirc;": "Ãª",
	      "&ecolon;": "â",
	      "&ecy;": "Ñ",
	      "&edot;": "Ä",
	      "&ee;": "â",
	      "&efDot;": "â",
	      "&efr;": "ð¢",
	      "&eg;": "âª",
	      "&egrave": "Ã¨",
	      "&egrave;": "Ã¨",
	      "&egs;": "âª",
	      "&egsdot;": "âª",
	      "&el;": "âª",
	      "&elinters;": "â§",
	      "&ell;": "â",
	      "&els;": "âª",
	      "&elsdot;": "âª",
	      "&emacr;": "Ä",
	      "&empty;": "â",
	      "&emptyset;": "â",
	      "&emptyv;": "â",
	      "&emsp13;": "â",
	      "&emsp14;": "â",
	      "&emsp;": "â",
	      "&eng;": "Å",
	      "&ensp;": "â",
	      "&eogon;": "Ä",
	      "&eopf;": "ð",
	      "&epar;": "â",
	      "&eparsl;": "â§£",
	      "&eplus;": "â©±",
	      "&epsi;": "Îµ",
	      "&epsilon;": "Îµ",
	      "&epsiv;": "Ïµ",
	      "&eqcirc;": "â",
	      "&eqcolon;": "â",
	      "&eqsim;": "â",
	      "&eqslantgtr;": "âª",
	      "&eqslantless;": "âª",
	      "&equals;": "=",
	      "&equest;": "â",
	      "&equiv;": "â¡",
	      "&equivDD;": "â©¸",
	      "&eqvparsl;": "â§¥",
	      "&erDot;": "â",
	      "&erarr;": "â¥±",
	      "&escr;": "â¯",
	      "&esdot;": "â",
	      "&esim;": "â",
	      "&eta;": "Î·",
	      "&eth": "Ã°",
	      "&eth;": "Ã°",
	      "&euml": "Ã«",
	      "&euml;": "Ã«",
	      "&euro;": "â¬",
	      "&excl;": "!",
	      "&exist;": "â",
	      "&expectation;": "â°",
	      "&exponentiale;": "â",
	      "&fallingdotseq;": "â",
	      "&fcy;": "Ñ",
	      "&female;": "â",
	      "&ffilig;": "ï¬",
	      "&fflig;": "ï¬",
	      "&ffllig;": "ï¬",
	      "&ffr;": "ð£",
	      "&filig;": "ï¬",
	      "&fjlig;": "fj",
	      "&flat;": "â­",
	      "&fllig;": "ï¬",
	      "&fltns;": "â±",
	      "&fnof;": "Æ",
	      "&fopf;": "ð",
	      "&forall;": "â",
	      "&fork;": "â",
	      "&forkv;": "â«",
	      "&fpartint;": "â¨",
	      "&frac12": "Â½",
	      "&frac12;": "Â½",
	      "&frac13;": "â",
	      "&frac14": "Â¼",
	      "&frac14;": "Â¼",
	      "&frac15;": "â",
	      "&frac16;": "â",
	      "&frac18;": "â",
	      "&frac23;": "â",
	      "&frac25;": "â",
	      "&frac34": "Â¾",
	      "&frac34;": "Â¾",
	      "&frac35;": "â",
	      "&frac38;": "â",
	      "&frac45;": "â",
	      "&frac56;": "â",
	      "&frac58;": "â",
	      "&frac78;": "â",
	      "&frasl;": "â",
	      "&frown;": "â¢",
	      "&fscr;": "ð»",
	      "&gE;": "â§",
	      "&gEl;": "âª",
	      "&gacute;": "Çµ",
	      "&gamma;": "Î³",
	      "&gammad;": "Ï",
	      "&gap;": "âª",
	      "&gbreve;": "Ä",
	      "&gcirc;": "Ä",
	      "&gcy;": "Ð³",
	      "&gdot;": "Ä¡",
	      "&ge;": "â¥",
	      "&gel;": "â",
	      "&geq;": "â¥",
	      "&geqq;": "â§",
	      "&geqslant;": "â©¾",
	      "&ges;": "â©¾",
	      "&gescc;": "âª©",
	      "&gesdot;": "âª",
	      "&gesdoto;": "âª",
	      "&gesdotol;": "âª",
	      "&gesl;": "âï¸",
	      "&gesles;": "âª",
	      "&gfr;": "ð¤",
	      "&gg;": "â«",
	      "&ggg;": "â",
	      "&gimel;": "â·",
	      "&gjcy;": "Ñ",
	      "&gl;": "â·",
	      "&glE;": "âª",
	      "&gla;": "âª¥",
	      "&glj;": "âª¤",
	      "&gnE;": "â©",
	      "&gnap;": "âª",
	      "&gnapprox;": "âª",
	      "&gne;": "âª",
	      "&gneq;": "âª",
	      "&gneqq;": "â©",
	      "&gnsim;": "â§",
	      "&gopf;": "ð",
	      "&grave;": "`",
	      "&gscr;": "â",
	      "&gsim;": "â³",
	      "&gsime;": "âª",
	      "&gsiml;": "âª",
	      "&gt": ">",
	      "&gt;": ">",
	      "&gtcc;": "âª§",
	      "&gtcir;": "â©º",
	      "&gtdot;": "â",
	      "&gtlPar;": "â¦",
	      "&gtquest;": "â©¼",
	      "&gtrapprox;": "âª",
	      "&gtrarr;": "â¥¸",
	      "&gtrdot;": "â",
	      "&gtreqless;": "â",
	      "&gtreqqless;": "âª",
	      "&gtrless;": "â·",
	      "&gtrsim;": "â³",
	      "&gvertneqq;": "â©ï¸",
	      "&gvnE;": "â©ï¸",
	      "&hArr;": "â",
	      "&hairsp;": "â",
	      "&half;": "Â½",
	      "&hamilt;": "â",
	      "&hardcy;": "Ñ",
	      "&harr;": "â",
	      "&harrcir;": "â¥",
	      "&harrw;": "â­",
	      "&hbar;": "â",
	      "&hcirc;": "Ä¥",
	      "&hearts;": "â¥",
	      "&heartsuit;": "â¥",
	      "&hellip;": "â¦",
	      "&hercon;": "â¹",
	      "&hfr;": "ð¥",
	      "&hksearow;": "â¤¥",
	      "&hkswarow;": "â¤¦",
	      "&hoarr;": "â¿",
	      "&homtht;": "â»",
	      "&hookleftarrow;": "â©",
	      "&hookrightarrow;": "âª",
	      "&hopf;": "ð",
	      "&horbar;": "â",
	      "&hscr;": "ð½",
	      "&hslash;": "â",
	      "&hstrok;": "Ä§",
	      "&hybull;": "â",
	      "&hyphen;": "â",
	      "&iacute": "Ã­",
	      "&iacute;": "Ã­",
	      "&ic;": "â£",
	      "&icirc": "Ã®",
	      "&icirc;": "Ã®",
	      "&icy;": "Ð¸",
	      "&iecy;": "Ðµ",
	      "&iexcl": "Â¡",
	      "&iexcl;": "Â¡",
	      "&iff;": "â",
	      "&ifr;": "ð¦",
	      "&igrave": "Ã¬",
	      "&igrave;": "Ã¬",
	      "&ii;": "â",
	      "&iiiint;": "â¨",
	      "&iiint;": "â­",
	      "&iinfin;": "â§",
	      "&iiota;": "â©",
	      "&ijlig;": "Ä³",
	      "&imacr;": "Ä«",
	      "&image;": "â",
	      "&imagline;": "â",
	      "&imagpart;": "â",
	      "&imath;": "Ä±",
	      "&imof;": "â·",
	      "&imped;": "Æµ",
	      "&in;": "â",
	      "&incare;": "â",
	      "&infin;": "â",
	      "&infintie;": "â§",
	      "&inodot;": "Ä±",
	      "&int;": "â«",
	      "&intcal;": "âº",
	      "&integers;": "â¤",
	      "&intercal;": "âº",
	      "&intlarhk;": "â¨",
	      "&intprod;": "â¨¼",
	      "&iocy;": "Ñ",
	      "&iogon;": "Ä¯",
	      "&iopf;": "ð",
	      "&iota;": "Î¹",
	      "&iprod;": "â¨¼",
	      "&iquest": "Â¿",
	      "&iquest;": "Â¿",
	      "&iscr;": "ð¾",
	      "&isin;": "â",
	      "&isinE;": "â¹",
	      "&isindot;": "âµ",
	      "&isins;": "â´",
	      "&isinsv;": "â³",
	      "&isinv;": "â",
	      "&it;": "â¢",
	      "&itilde;": "Ä©",
	      "&iukcy;": "Ñ",
	      "&iuml": "Ã¯",
	      "&iuml;": "Ã¯",
	      "&jcirc;": "Äµ",
	      "&jcy;": "Ð¹",
	      "&jfr;": "ð§",
	      "&jmath;": "È·",
	      "&jopf;": "ð",
	      "&jscr;": "ð¿",
	      "&jsercy;": "Ñ",
	      "&jukcy;": "Ñ",
	      "&kappa;": "Îº",
	      "&kappav;": "Ï°",
	      "&kcedil;": "Ä·",
	      "&kcy;": "Ðº",
	      "&kfr;": "ð¨",
	      "&kgreen;": "Ä¸",
	      "&khcy;": "Ñ",
	      "&kjcy;": "Ñ",
	      "&kopf;": "ð",
	      "&kscr;": "ð",
	      "&lAarr;": "â",
	      "&lArr;": "â",
	      "&lAtail;": "â¤",
	      "&lBarr;": "â¤",
	      "&lE;": "â¦",
	      "&lEg;": "âª",
	      "&lHar;": "â¥¢",
	      "&lacute;": "Äº",
	      "&laemptyv;": "â¦´",
	      "&lagran;": "â",
	      "&lambda;": "Î»",
	      "&lang;": "â¨",
	      "&langd;": "â¦",
	      "&langle;": "â¨",
	      "&lap;": "âª",
	      "&laquo": "Â«",
	      "&laquo;": "Â«",
	      "&larr;": "â",
	      "&larrb;": "â¤",
	      "&larrbfs;": "â¤",
	      "&larrfs;": "â¤",
	      "&larrhk;": "â©",
	      "&larrlp;": "â«",
	      "&larrpl;": "â¤¹",
	      "&larrsim;": "â¥³",
	      "&larrtl;": "â¢",
	      "&lat;": "âª«",
	      "&latail;": "â¤",
	      "&late;": "âª­",
	      "&lates;": "âª­ï¸",
	      "&lbarr;": "â¤",
	      "&lbbrk;": "â²",
	      "&lbrace;": "{",
	      "&lbrack;": "[",
	      "&lbrke;": "â¦",
	      "&lbrksld;": "â¦",
	      "&lbrkslu;": "â¦",
	      "&lcaron;": "Ä¾",
	      "&lcedil;": "Ä¼",
	      "&lceil;": "â",
	      "&lcub;": "{",
	      "&lcy;": "Ð»",
	      "&ldca;": "â¤¶",
	      "&ldquo;": "â",
	      "&ldquor;": "â",
	      "&ldrdhar;": "â¥§",
	      "&ldrushar;": "â¥",
	      "&ldsh;": "â²",
	      "&le;": "â¤",
	      "&leftarrow;": "â",
	      "&leftarrowtail;": "â¢",
	      "&leftharpoondown;": "â½",
	      "&leftharpoonup;": "â¼",
	      "&leftleftarrows;": "â",
	      "&leftrightarrow;": "â",
	      "&leftrightarrows;": "â",
	      "&leftrightharpoons;": "â",
	      "&leftrightsquigarrow;": "â­",
	      "&leftthreetimes;": "â",
	      "&leg;": "â",
	      "&leq;": "â¤",
	      "&leqq;": "â¦",
	      "&leqslant;": "â©½",
	      "&les;": "â©½",
	      "&lescc;": "âª¨",
	      "&lesdot;": "â©¿",
	      "&lesdoto;": "âª",
	      "&lesdotor;": "âª",
	      "&lesg;": "âï¸",
	      "&lesges;": "âª",
	      "&lessapprox;": "âª",
	      "&lessdot;": "â",
	      "&lesseqgtr;": "â",
	      "&lesseqqgtr;": "âª",
	      "&lessgtr;": "â¶",
	      "&lesssim;": "â²",
	      "&lfisht;": "â¥¼",
	      "&lfloor;": "â",
	      "&lfr;": "ð©",
	      "&lg;": "â¶",
	      "&lgE;": "âª",
	      "&lhard;": "â½",
	      "&lharu;": "â¼",
	      "&lharul;": "â¥ª",
	      "&lhblk;": "â",
	      "&ljcy;": "Ñ",
	      "&ll;": "âª",
	      "&llarr;": "â",
	      "&llcorner;": "â",
	      "&llhard;": "â¥«",
	      "&lltri;": "âº",
	      "&lmidot;": "Å",
	      "&lmoust;": "â°",
	      "&lmoustache;": "â°",
	      "&lnE;": "â¨",
	      "&lnap;": "âª",
	      "&lnapprox;": "âª",
	      "&lne;": "âª",
	      "&lneq;": "âª",
	      "&lneqq;": "â¨",
	      "&lnsim;": "â¦",
	      "&loang;": "â¬",
	      "&loarr;": "â½",
	      "&lobrk;": "â¦",
	      "&longleftarrow;": "âµ",
	      "&longleftrightarrow;": "â·",
	      "&longmapsto;": "â¼",
	      "&longrightarrow;": "â¶",
	      "&looparrowleft;": "â«",
	      "&looparrowright;": "â¬",
	      "&lopar;": "â¦",
	      "&lopf;": "ð",
	      "&loplus;": "â¨­",
	      "&lotimes;": "â¨´",
	      "&lowast;": "â",
	      "&lowbar;": "_",
	      "&loz;": "â",
	      "&lozenge;": "â",
	      "&lozf;": "â§«",
	      "&lpar;": "(",
	      "&lparlt;": "â¦",
	      "&lrarr;": "â",
	      "&lrcorner;": "â",
	      "&lrhar;": "â",
	      "&lrhard;": "â¥­",
	      "&lrm;": "â",
	      "&lrtri;": "â¿",
	      "&lsaquo;": "â¹",
	      "&lscr;": "ð",
	      "&lsh;": "â°",
	      "&lsim;": "â²",
	      "&lsime;": "âª",
	      "&lsimg;": "âª",
	      "&lsqb;": "[",
	      "&lsquo;": "â",
	      "&lsquor;": "â",
	      "&lstrok;": "Å",
	      "&lt": "<",
	      "&lt;": "<",
	      "&ltcc;": "âª¦",
	      "&ltcir;": "â©¹",
	      "&ltdot;": "â",
	      "&lthree;": "â",
	      "&ltimes;": "â",
	      "&ltlarr;": "â¥¶",
	      "&ltquest;": "â©»",
	      "&ltrPar;": "â¦",
	      "&ltri;": "â",
	      "&ltrie;": "â´",
	      "&ltrif;": "â",
	      "&lurdshar;": "â¥",
	      "&luruhar;": "â¥¦",
	      "&lvertneqq;": "â¨ï¸",
	      "&lvnE;": "â¨ï¸",
	      "&mDDot;": "âº",
	      "&macr": "Â¯",
	      "&macr;": "Â¯",
	      "&male;": "â",
	      "&malt;": "â ",
	      "&maltese;": "â ",
	      "&map;": "â¦",
	      "&mapsto;": "â¦",
	      "&mapstodown;": "â§",
	      "&mapstoleft;": "â¤",
	      "&mapstoup;": "â¥",
	      "&marker;": "â®",
	      "&mcomma;": "â¨©",
	      "&mcy;": "Ð¼",
	      "&mdash;": "â",
	      "&measuredangle;": "â¡",
	      "&mfr;": "ðª",
	      "&mho;": "â§",
	      "&micro": "Âµ",
	      "&micro;": "Âµ",
	      "&mid;": "â£",
	      "&midast;": "*",
	      "&midcir;": "â«°",
	      "&middot": "Â·",
	      "&middot;": "Â·",
	      "&minus;": "â",
	      "&minusb;": "â",
	      "&minusd;": "â¸",
	      "&minusdu;": "â¨ª",
	      "&mlcp;": "â«",
	      "&mldr;": "â¦",
	      "&mnplus;": "â",
	      "&models;": "â§",
	      "&mopf;": "ð",
	      "&mp;": "â",
	      "&mscr;": "ð",
	      "&mstpos;": "â¾",
	      "&mu;": "Î¼",
	      "&multimap;": "â¸",
	      "&mumap;": "â¸",
	      "&nGg;": "âÌ¸",
	      "&nGt;": "â«â",
	      "&nGtv;": "â«Ì¸",
	      "&nLeftarrow;": "â",
	      "&nLeftrightarrow;": "â",
	      "&nLl;": "âÌ¸",
	      "&nLt;": "âªâ",
	      "&nLtv;": "âªÌ¸",
	      "&nRightarrow;": "â",
	      "&nVDash;": "â¯",
	      "&nVdash;": "â®",
	      "&nabla;": "â",
	      "&nacute;": "Å",
	      "&nang;": "â â",
	      "&nap;": "â",
	      "&napE;": "â©°Ì¸",
	      "&napid;": "âÌ¸",
	      "&napos;": "Å",
	      "&napprox;": "â",
	      "&natur;": "â®",
	      "&natural;": "â®",
	      "&naturals;": "â",
	      "&nbsp": "Â ",
	      "&nbsp;": "Â ",
	      "&nbump;": "âÌ¸",
	      "&nbumpe;": "âÌ¸",
	      "&ncap;": "â©",
	      "&ncaron;": "Å",
	      "&ncedil;": "Å",
	      "&ncong;": "â",
	      "&ncongdot;": "â©­Ì¸",
	      "&ncup;": "â©",
	      "&ncy;": "Ð½",
	      "&ndash;": "â",
	      "&ne;": "â ",
	      "&neArr;": "â",
	      "&nearhk;": "â¤¤",
	      "&nearr;": "â",
	      "&nearrow;": "â",
	      "&nedot;": "âÌ¸",
	      "&nequiv;": "â¢",
	      "&nesear;": "â¤¨",
	      "&nesim;": "âÌ¸",
	      "&nexist;": "â",
	      "&nexists;": "â",
	      "&nfr;": "ð«",
	      "&ngE;": "â§Ì¸",
	      "&nge;": "â±",
	      "&ngeq;": "â±",
	      "&ngeqq;": "â§Ì¸",
	      "&ngeqslant;": "â©¾Ì¸",
	      "&nges;": "â©¾Ì¸",
	      "&ngsim;": "âµ",
	      "&ngt;": "â¯",
	      "&ngtr;": "â¯",
	      "&nhArr;": "â",
	      "&nharr;": "â®",
	      "&nhpar;": "â«²",
	      "&ni;": "â",
	      "&nis;": "â¼",
	      "&nisd;": "âº",
	      "&niv;": "â",
	      "&njcy;": "Ñ",
	      "&nlArr;": "â",
	      "&nlE;": "â¦Ì¸",
	      "&nlarr;": "â",
	      "&nldr;": "â¥",
	      "&nle;": "â°",
	      "&nleftarrow;": "â",
	      "&nleftrightarrow;": "â®",
	      "&nleq;": "â°",
	      "&nleqq;": "â¦Ì¸",
	      "&nleqslant;": "â©½Ì¸",
	      "&nles;": "â©½Ì¸",
	      "&nless;": "â®",
	      "&nlsim;": "â´",
	      "&nlt;": "â®",
	      "&nltri;": "âª",
	      "&nltrie;": "â¬",
	      "&nmid;": "â¤",
	      "&nopf;": "ð",
	      "&not": "Â¬",
	      "&not;": "Â¬",
	      "&notin;": "â",
	      "&notinE;": "â¹Ì¸",
	      "&notindot;": "âµÌ¸",
	      "&notinva;": "â",
	      "&notinvb;": "â·",
	      "&notinvc;": "â¶",
	      "&notni;": "â",
	      "&notniva;": "â",
	      "&notnivb;": "â¾",
	      "&notnivc;": "â½",
	      "&npar;": "â¦",
	      "&nparallel;": "â¦",
	      "&nparsl;": "â«½â¥",
	      "&npart;": "âÌ¸",
	      "&npolint;": "â¨",
	      "&npr;": "â",
	      "&nprcue;": "â ",
	      "&npre;": "âª¯Ì¸",
	      "&nprec;": "â",
	      "&npreceq;": "âª¯Ì¸",
	      "&nrArr;": "â",
	      "&nrarr;": "â",
	      "&nrarrc;": "â¤³Ì¸",
	      "&nrarrw;": "âÌ¸",
	      "&nrightarrow;": "â",
	      "&nrtri;": "â«",
	      "&nrtrie;": "â­",
	      "&nsc;": "â",
	      "&nsccue;": "â¡",
	      "&nsce;": "âª°Ì¸",
	      "&nscr;": "ð",
	      "&nshortmid;": "â¤",
	      "&nshortparallel;": "â¦",
	      "&nsim;": "â",
	      "&nsime;": "â",
	      "&nsimeq;": "â",
	      "&nsmid;": "â¤",
	      "&nspar;": "â¦",
	      "&nsqsube;": "â¢",
	      "&nsqsupe;": "â£",
	      "&nsub;": "â",
	      "&nsubE;": "â«Ì¸",
	      "&nsube;": "â",
	      "&nsubset;": "ââ",
	      "&nsubseteq;": "â",
	      "&nsubseteqq;": "â«Ì¸",
	      "&nsucc;": "â",
	      "&nsucceq;": "âª°Ì¸",
	      "&nsup;": "â",
	      "&nsupE;": "â«Ì¸",
	      "&nsupe;": "â",
	      "&nsupset;": "ââ",
	      "&nsupseteq;": "â",
	      "&nsupseteqq;": "â«Ì¸",
	      "&ntgl;": "â¹",
	      "&ntilde": "Ã±",
	      "&ntilde;": "Ã±",
	      "&ntlg;": "â¸",
	      "&ntriangleleft;": "âª",
	      "&ntrianglelefteq;": "â¬",
	      "&ntriangleright;": "â«",
	      "&ntrianglerighteq;": "â­",
	      "&nu;": "Î½",
	      "&num;": "#",
	      "&numero;": "â",
	      "&numsp;": "â",
	      "&nvDash;": "â­",
	      "&nvHarr;": "â¤",
	      "&nvap;": "ââ",
	      "&nvdash;": "â¬",
	      "&nvge;": "â¥â",
	      "&nvgt;": ">â",
	      "&nvinfin;": "â§",
	      "&nvlArr;": "â¤",
	      "&nvle;": "â¤â",
	      "&nvlt;": "<â",
	      "&nvltrie;": "â´â",
	      "&nvrArr;": "â¤",
	      "&nvrtrie;": "âµâ",
	      "&nvsim;": "â¼â",
	      "&nwArr;": "â",
	      "&nwarhk;": "â¤£",
	      "&nwarr;": "â",
	      "&nwarrow;": "â",
	      "&nwnear;": "â¤§",
	      "&oS;": "â",
	      "&oacute": "Ã³",
	      "&oacute;": "Ã³",
	      "&oast;": "â",
	      "&ocir;": "â",
	      "&ocirc": "Ã´",
	      "&ocirc;": "Ã´",
	      "&ocy;": "Ð¾",
	      "&odash;": "â",
	      "&odblac;": "Å",
	      "&odiv;": "â¨¸",
	      "&odot;": "â",
	      "&odsold;": "â¦¼",
	      "&oelig;": "Å",
	      "&ofcir;": "â¦¿",
	      "&ofr;": "ð¬",
	      "&ogon;": "Ë",
	      "&ograve": "Ã²",
	      "&ograve;": "Ã²",
	      "&ogt;": "â§",
	      "&ohbar;": "â¦µ",
	      "&ohm;": "Î©",
	      "&oint;": "â®",
	      "&olarr;": "âº",
	      "&olcir;": "â¦¾",
	      "&olcross;": "â¦»",
	      "&oline;": "â¾",
	      "&olt;": "â§",
	      "&omacr;": "Å",
	      "&omega;": "Ï",
	      "&omicron;": "Î¿",
	      "&omid;": "â¦¶",
	      "&ominus;": "â",
	      "&oopf;": "ð ",
	      "&opar;": "â¦·",
	      "&operp;": "â¦¹",
	      "&oplus;": "â",
	      "&or;": "â¨",
	      "&orarr;": "â»",
	      "&ord;": "â©",
	      "&order;": "â´",
	      "&orderof;": "â´",
	      "&ordf": "Âª",
	      "&ordf;": "Âª",
	      "&ordm": "Âº",
	      "&ordm;": "Âº",
	      "&origof;": "â¶",
	      "&oror;": "â©",
	      "&orslope;": "â©",
	      "&orv;": "â©",
	      "&oscr;": "â´",
	      "&oslash": "Ã¸",
	      "&oslash;": "Ã¸",
	      "&osol;": "â",
	      "&otilde": "Ãµ",
	      "&otilde;": "Ãµ",
	      "&otimes;": "â",
	      "&otimesas;": "â¨¶",
	      "&ouml": "Ã¶",
	      "&ouml;": "Ã¶",
	      "&ovbar;": "â½",
	      "&par;": "â¥",
	      "&para": "Â¶",
	      "&para;": "Â¶",
	      "&parallel;": "â¥",
	      "&parsim;": "â«³",
	      "&parsl;": "â«½",
	      "&part;": "â",
	      "&pcy;": "Ð¿",
	      "&percnt;": "%",
	      "&period;": ".",
	      "&permil;": "â°",
	      "&perp;": "â¥",
	      "&pertenk;": "â±",
	      "&pfr;": "ð­",
	      "&phi;": "Ï",
	      "&phiv;": "Ï",
	      "&phmmat;": "â³",
	      "&phone;": "â",
	      "&pi;": "Ï",
	      "&pitchfork;": "â",
	      "&piv;": "Ï",
	      "&planck;": "â",
	      "&planckh;": "â",
	      "&plankv;": "â",
	      "&plus;": "+",
	      "&plusacir;": "â¨£",
	      "&plusb;": "â",
	      "&pluscir;": "â¨¢",
	      "&plusdo;": "â",
	      "&plusdu;": "â¨¥",
	      "&pluse;": "â©²",
	      "&plusmn": "Â±",
	      "&plusmn;": "Â±",
	      "&plussim;": "â¨¦",
	      "&plustwo;": "â¨§",
	      "&pm;": "Â±",
	      "&pointint;": "â¨",
	      "&popf;": "ð¡",
	      "&pound": "Â£",
	      "&pound;": "Â£",
	      "&pr;": "âº",
	      "&prE;": "âª³",
	      "&prap;": "âª·",
	      "&prcue;": "â¼",
	      "&pre;": "âª¯",
	      "&prec;": "âº",
	      "&precapprox;": "âª·",
	      "&preccurlyeq;": "â¼",
	      "&preceq;": "âª¯",
	      "&precnapprox;": "âª¹",
	      "&precneqq;": "âªµ",
	      "&precnsim;": "â¨",
	      "&precsim;": "â¾",
	      "&prime;": "â²",
	      "&primes;": "â",
	      "&prnE;": "âªµ",
	      "&prnap;": "âª¹",
	      "&prnsim;": "â¨",
	      "&prod;": "â",
	      "&profalar;": "â®",
	      "&profline;": "â",
	      "&profsurf;": "â",
	      "&prop;": "â",
	      "&propto;": "â",
	      "&prsim;": "â¾",
	      "&prurel;": "â°",
	      "&pscr;": "ð",
	      "&psi;": "Ï",
	      "&puncsp;": "â",
	      "&qfr;": "ð®",
	      "&qint;": "â¨",
	      "&qopf;": "ð¢",
	      "&qprime;": "â",
	      "&qscr;": "ð",
	      "&quaternions;": "â",
	      "&quatint;": "â¨",
	      "&quest;": "?",
	      "&questeq;": "â",
	      "&quot": '"',
	      "&quot;": '"',
	      "&rAarr;": "â",
	      "&rArr;": "â",
	      "&rAtail;": "â¤",
	      "&rBarr;": "â¤",
	      "&rHar;": "â¥¤",
	      "&race;": "â½Ì±",
	      "&racute;": "Å",
	      "&radic;": "â",
	      "&raemptyv;": "â¦³",
	      "&rang;": "â©",
	      "&rangd;": "â¦",
	      "&range;": "â¦¥",
	      "&rangle;": "â©",
	      "&raquo": "Â»",
	      "&raquo;": "Â»",
	      "&rarr;": "â",
	      "&rarrap;": "â¥µ",
	      "&rarrb;": "â¥",
	      "&rarrbfs;": "â¤ ",
	      "&rarrc;": "â¤³",
	      "&rarrfs;": "â¤",
	      "&rarrhk;": "âª",
	      "&rarrlp;": "â¬",
	      "&rarrpl;": "â¥",
	      "&rarrsim;": "â¥´",
	      "&rarrtl;": "â£",
	      "&rarrw;": "â",
	      "&ratail;": "â¤",
	      "&ratio;": "â¶",
	      "&rationals;": "â",
	      "&rbarr;": "â¤",
	      "&rbbrk;": "â³",
	      "&rbrace;": "}",
	      "&rbrack;": "]",
	      "&rbrke;": "â¦",
	      "&rbrksld;": "â¦",
	      "&rbrkslu;": "â¦",
	      "&rcaron;": "Å",
	      "&rcedil;": "Å",
	      "&rceil;": "â",
	      "&rcub;": "}",
	      "&rcy;": "Ñ",
	      "&rdca;": "â¤·",
	      "&rdldhar;": "â¥©",
	      "&rdquo;": "â",
	      "&rdquor;": "â",
	      "&rdsh;": "â³",
	      "&real;": "â",
	      "&realine;": "â",
	      "&realpart;": "â",
	      "&reals;": "â",
	      "&rect;": "â­",
	      "&reg": "Â®",
	      "&reg;": "Â®",
	      "&rfisht;": "â¥½",
	      "&rfloor;": "â",
	      "&rfr;": "ð¯",
	      "&rhard;": "â",
	      "&rharu;": "â",
	      "&rharul;": "â¥¬",
	      "&rho;": "Ï",
	      "&rhov;": "Ï±",
	      "&rightarrow;": "â",
	      "&rightarrowtail;": "â£",
	      "&rightharpoondown;": "â",
	      "&rightharpoonup;": "â",
	      "&rightleftarrows;": "â",
	      "&rightleftharpoons;": "â",
	      "&rightrightarrows;": "â",
	      "&rightsquigarrow;": "â",
	      "&rightthreetimes;": "â",
	      "&ring;": "Ë",
	      "&risingdotseq;": "â",
	      "&rlarr;": "â",
	      "&rlhar;": "â",
	      "&rlm;": "â",
	      "&rmoust;": "â±",
	      "&rmoustache;": "â±",
	      "&rnmid;": "â«®",
	      "&roang;": "â­",
	      "&roarr;": "â¾",
	      "&robrk;": "â§",
	      "&ropar;": "â¦",
	      "&ropf;": "ð£",
	      "&roplus;": "â¨®",
	      "&rotimes;": "â¨µ",
	      "&rpar;": ")",
	      "&rpargt;": "â¦",
	      "&rppolint;": "â¨",
	      "&rrarr;": "â",
	      "&rsaquo;": "âº",
	      "&rscr;": "ð",
	      "&rsh;": "â±",
	      "&rsqb;": "]",
	      "&rsquo;": "â",
	      "&rsquor;": "â",
	      "&rthree;": "â",
	      "&rtimes;": "â",
	      "&rtri;": "â¹",
	      "&rtrie;": "âµ",
	      "&rtrif;": "â¸",
	      "&rtriltri;": "â§",
	      "&ruluhar;": "â¥¨",
	      "&rx;": "â",
	      "&sacute;": "Å",
	      "&sbquo;": "â",
	      "&sc;": "â»",
	      "&scE;": "âª´",
	      "&scap;": "âª¸",
	      "&scaron;": "Å¡",
	      "&sccue;": "â½",
	      "&sce;": "âª°",
	      "&scedil;": "Å",
	      "&scirc;": "Å",
	      "&scnE;": "âª¶",
	      "&scnap;": "âªº",
	      "&scnsim;": "â©",
	      "&scpolint;": "â¨",
	      "&scsim;": "â¿",
	      "&scy;": "Ñ",
	      "&sdot;": "â",
	      "&sdotb;": "â¡",
	      "&sdote;": "â©¦",
	      "&seArr;": "â",
	      "&searhk;": "â¤¥",
	      "&searr;": "â",
	      "&searrow;": "â",
	      "&sect": "Â§",
	      "&sect;": "Â§",
	      "&semi;": ";",
	      "&seswar;": "â¤©",
	      "&setminus;": "â",
	      "&setmn;": "â",
	      "&sext;": "â¶",
	      "&sfr;": "ð°",
	      "&sfrown;": "â¢",
	      "&sharp;": "â¯",
	      "&shchcy;": "Ñ",
	      "&shcy;": "Ñ",
	      "&shortmid;": "â£",
	      "&shortparallel;": "â¥",
	      "&shy": "Â­",
	      "&shy;": "Â­",
	      "&sigma;": "Ï",
	      "&sigmaf;": "Ï",
	      "&sigmav;": "Ï",
	      "&sim;": "â¼",
	      "&simdot;": "â©ª",
	      "&sime;": "â",
	      "&simeq;": "â",
	      "&simg;": "âª",
	      "&simgE;": "âª ",
	      "&siml;": "âª",
	      "&simlE;": "âª",
	      "&simne;": "â",
	      "&simplus;": "â¨¤",
	      "&simrarr;": "â¥²",
	      "&slarr;": "â",
	      "&smallsetminus;": "â",
	      "&smashp;": "â¨³",
	      "&smeparsl;": "â§¤",
	      "&smid;": "â£",
	      "&smile;": "â£",
	      "&smt;": "âªª",
	      "&smte;": "âª¬",
	      "&smtes;": "âª¬ï¸",
	      "&softcy;": "Ñ",
	      "&sol;": "/",
	      "&solb;": "â§",
	      "&solbar;": "â¿",
	      "&sopf;": "ð¤",
	      "&spades;": "â ",
	      "&spadesuit;": "â ",
	      "&spar;": "â¥",
	      "&sqcap;": "â",
	      "&sqcaps;": "âï¸",
	      "&sqcup;": "â",
	      "&sqcups;": "âï¸",
	      "&sqsub;": "â",
	      "&sqsube;": "â",
	      "&sqsubset;": "â",
	      "&sqsubseteq;": "â",
	      "&sqsup;": "â",
	      "&sqsupe;": "â",
	      "&sqsupset;": "â",
	      "&sqsupseteq;": "â",
	      "&squ;": "â¡",
	      "&square;": "â¡",
	      "&squarf;": "âª",
	      "&squf;": "âª",
	      "&srarr;": "â",
	      "&sscr;": "ð",
	      "&ssetmn;": "â",
	      "&ssmile;": "â£",
	      "&sstarf;": "â",
	      "&star;": "â",
	      "&starf;": "â",
	      "&straightepsilon;": "Ïµ",
	      "&straightphi;": "Ï",
	      "&strns;": "Â¯",
	      "&sub;": "â",
	      "&subE;": "â«",
	      "&subdot;": "âª½",
	      "&sube;": "â",
	      "&subedot;": "â«",
	      "&submult;": "â«",
	      "&subnE;": "â«",
	      "&subne;": "â",
	      "&subplus;": "âª¿",
	      "&subrarr;": "â¥¹",
	      "&subset;": "â",
	      "&subseteq;": "â",
	      "&subseteqq;": "â«",
	      "&subsetneq;": "â",
	      "&subsetneqq;": "â«",
	      "&subsim;": "â«",
	      "&subsub;": "â«",
	      "&subsup;": "â«",
	      "&succ;": "â»",
	      "&succapprox;": "âª¸",
	      "&succcurlyeq;": "â½",
	      "&succeq;": "âª°",
	      "&succnapprox;": "âªº",
	      "&succneqq;": "âª¶",
	      "&succnsim;": "â©",
	      "&succsim;": "â¿",
	      "&sum;": "â",
	      "&sung;": "âª",
	      "&sup1": "Â¹",
	      "&sup1;": "Â¹",
	      "&sup2": "Â²",
	      "&sup2;": "Â²",
	      "&sup3": "Â³",
	      "&sup3;": "Â³",
	      "&sup;": "â",
	      "&supE;": "â«",
	      "&supdot;": "âª¾",
	      "&supdsub;": "â«",
	      "&supe;": "â",
	      "&supedot;": "â«",
	      "&suphsol;": "â",
	      "&suphsub;": "â«",
	      "&suplarr;": "â¥»",
	      "&supmult;": "â«",
	      "&supnE;": "â«",
	      "&supne;": "â",
	      "&supplus;": "â«",
	      "&supset;": "â",
	      "&supseteq;": "â",
	      "&supseteqq;": "â«",
	      "&supsetneq;": "â",
	      "&supsetneqq;": "â«",
	      "&supsim;": "â«",
	      "&supsub;": "â«",
	      "&supsup;": "â«",
	      "&swArr;": "â",
	      "&swarhk;": "â¤¦",
	      "&swarr;": "â",
	      "&swarrow;": "â",
	      "&swnwar;": "â¤ª",
	      "&szlig": "Ã",
	      "&szlig;": "Ã",
	      "&target;": "â",
	      "&tau;": "Ï",
	      "&tbrk;": "â´",
	      "&tcaron;": "Å¥",
	      "&tcedil;": "Å£",
	      "&tcy;": "Ñ",
	      "&tdot;": "â",
	      "&telrec;": "â",
	      "&tfr;": "ð±",
	      "&there4;": "â´",
	      "&therefore;": "â´",
	      "&theta;": "Î¸",
	      "&thetasym;": "Ï",
	      "&thetav;": "Ï",
	      "&thickapprox;": "â",
	      "&thicksim;": "â¼",
	      "&thinsp;": "â",
	      "&thkap;": "â",
	      "&thksim;": "â¼",
	      "&thorn": "Ã¾",
	      "&thorn;": "Ã¾",
	      "&tilde;": "Ë",
	      "&times": "Ã",
	      "&times;": "Ã",
	      "&timesb;": "â ",
	      "&timesbar;": "â¨±",
	      "&timesd;": "â¨°",
	      "&tint;": "â­",
	      "&toea;": "â¤¨",
	      "&top;": "â¤",
	      "&topbot;": "â¶",
	      "&topcir;": "â«±",
	      "&topf;": "ð¥",
	      "&topfork;": "â«",
	      "&tosa;": "â¤©",
	      "&tprime;": "â´",
	      "&trade;": "â¢",
	      "&triangle;": "âµ",
	      "&triangledown;": "â¿",
	      "&triangleleft;": "â",
	      "&trianglelefteq;": "â´",
	      "&triangleq;": "â",
	      "&triangleright;": "â¹",
	      "&trianglerighteq;": "âµ",
	      "&tridot;": "â¬",
	      "&trie;": "â",
	      "&triminus;": "â¨º",
	      "&triplus;": "â¨¹",
	      "&trisb;": "â§",
	      "&tritime;": "â¨»",
	      "&trpezium;": "â¢",
	      "&tscr;": "ð",
	      "&tscy;": "Ñ",
	      "&tshcy;": "Ñ",
	      "&tstrok;": "Å§",
	      "&twixt;": "â¬",
	      "&twoheadleftarrow;": "â",
	      "&twoheadrightarrow;": "â ",
	      "&uArr;": "â",
	      "&uHar;": "â¥£",
	      "&uacute": "Ãº",
	      "&uacute;": "Ãº",
	      "&uarr;": "â",
	      "&ubrcy;": "Ñ",
	      "&ubreve;": "Å­",
	      "&ucirc": "Ã»",
	      "&ucirc;": "Ã»",
	      "&ucy;": "Ñ",
	      "&udarr;": "â",
	      "&udblac;": "Å±",
	      "&udhar;": "â¥®",
	      "&ufisht;": "â¥¾",
	      "&ufr;": "ð²",
	      "&ugrave": "Ã¹",
	      "&ugrave;": "Ã¹",
	      "&uharl;": "â¿",
	      "&uharr;": "â¾",
	      "&uhblk;": "â",
	      "&ulcorn;": "â",
	      "&ulcorner;": "â",
	      "&ulcrop;": "â",
	      "&ultri;": "â¸",
	      "&umacr;": "Å«",
	      "&uml": "Â¨",
	      "&uml;": "Â¨",
	      "&uogon;": "Å³",
	      "&uopf;": "ð¦",
	      "&uparrow;": "â",
	      "&updownarrow;": "â",
	      "&upharpoonleft;": "â¿",
	      "&upharpoonright;": "â¾",
	      "&uplus;": "â",
	      "&upsi;": "Ï",
	      "&upsih;": "Ï",
	      "&upsilon;": "Ï",
	      "&upuparrows;": "â",
	      "&urcorn;": "â",
	      "&urcorner;": "â",
	      "&urcrop;": "â",
	      "&uring;": "Å¯",
	      "&urtri;": "â¹",
	      "&uscr;": "ð",
	      "&utdot;": "â°",
	      "&utilde;": "Å©",
	      "&utri;": "âµ",
	      "&utrif;": "â´",
	      "&uuarr;": "â",
	      "&uuml": "Ã¼",
	      "&uuml;": "Ã¼",
	      "&uwangle;": "â¦§",
	      "&vArr;": "â",
	      "&vBar;": "â«¨",
	      "&vBarv;": "â«©",
	      "&vDash;": "â¨",
	      "&vangrt;": "â¦",
	      "&varepsilon;": "Ïµ",
	      "&varkappa;": "Ï°",
	      "&varnothing;": "â",
	      "&varphi;": "Ï",
	      "&varpi;": "Ï",
	      "&varpropto;": "â",
	      "&varr;": "â",
	      "&varrho;": "Ï±",
	      "&varsigma;": "Ï",
	      "&varsubsetneq;": "âï¸",
	      "&varsubsetneqq;": "â«ï¸",
	      "&varsupsetneq;": "âï¸",
	      "&varsupsetneqq;": "â«ï¸",
	      "&vartheta;": "Ï",
	      "&vartriangleleft;": "â²",
	      "&vartriangleright;": "â³",
	      "&vcy;": "Ð²",
	      "&vdash;": "â¢",
	      "&vee;": "â¨",
	      "&veebar;": "â»",
	      "&veeeq;": "â",
	      "&vellip;": "â®",
	      "&verbar;": "|",
	      "&vert;": "|",
	      "&vfr;": "ð³",
	      "&vltri;": "â²",
	      "&vnsub;": "ââ",
	      "&vnsup;": "ââ",
	      "&vopf;": "ð§",
	      "&vprop;": "â",
	      "&vrtri;": "â³",
	      "&vscr;": "ð",
	      "&vsubnE;": "â«ï¸",
	      "&vsubne;": "âï¸",
	      "&vsupnE;": "â«ï¸",
	      "&vsupne;": "âï¸",
	      "&vzigzag;": "â¦",
	      "&wcirc;": "Åµ",
	      "&wedbar;": "â©",
	      "&wedge;": "â§",
	      "&wedgeq;": "â",
	      "&weierp;": "â",
	      "&wfr;": "ð´",
	      "&wopf;": "ð¨",
	      "&wp;": "â",
	      "&wr;": "â",
	      "&wreath;": "â",
	      "&wscr;": "ð",
	      "&xcap;": "â",
	      "&xcirc;": "â¯",
	      "&xcup;": "â",
	      "&xdtri;": "â½",
	      "&xfr;": "ðµ",
	      "&xhArr;": "âº",
	      "&xharr;": "â·",
	      "&xi;": "Î¾",
	      "&xlArr;": "â¸",
	      "&xlarr;": "âµ",
	      "&xmap;": "â¼",
	      "&xnis;": "â»",
	      "&xodot;": "â¨",
	      "&xopf;": "ð©",
	      "&xoplus;": "â¨",
	      "&xotime;": "â¨",
	      "&xrArr;": "â¹",
	      "&xrarr;": "â¶",
	      "&xscr;": "ð",
	      "&xsqcup;": "â¨",
	      "&xuplus;": "â¨",
	      "&xutri;": "â³",
	      "&xvee;": "â",
	      "&xwedge;": "â",
	      "&yacute": "Ã½",
	      "&yacute;": "Ã½",
	      "&yacy;": "Ñ",
	      "&ycirc;": "Å·",
	      "&ycy;": "Ñ",
	      "&yen": "Â¥",
	      "&yen;": "Â¥",
	      "&yfr;": "ð¶",
	      "&yicy;": "Ñ",
	      "&yopf;": "ðª",
	      "&yscr;": "ð",
	      "&yucy;": "Ñ",
	      "&yuml": "Ã¿",
	      "&yuml;": "Ã¿",
	      "&zacute;": "Åº",
	      "&zcaron;": "Å¾",
	      "&zcy;": "Ð·",
	      "&zdot;": "Å¼",
	      "&zeetrf;": "â¨",
	      "&zeta;": "Î¶",
	      "&zfr;": "ð·",
	      "&zhcy;": "Ð¶",
	      "&zigrarr;": "â",
	      "&zopf;": "ð«",
	      "&zscr;": "ð",
	      "&zwj;": "â",
	      "&zwnj;": "â"
	    },
	    characters: {
	      "Ã": "&AElig;",
	      "&": "&amp;",
	      "Ã": "&Aacute;",
	      "Ä": "&Abreve;",
	      "Ã": "&Acirc;",
	      "Ð": "&Acy;",
	      "ð": "&Afr;",
	      "Ã": "&Agrave;",
	      "Î": "&Alpha;",
	      "Ä": "&Amacr;",
	      "â©": "&And;",
	      "Ä": "&Aogon;",
	      "ð¸": "&Aopf;",
	      "â¡": "&af;",
	      "Ã": "&angst;",
	      "ð": "&Ascr;",
	      "â": "&coloneq;",
	      "Ã": "&Atilde;",
	      "Ã": "&Auml;",
	      "â": "&ssetmn;",
	      "â«§": "&Barv;",
	      "â": "&doublebarwedge;",
	      "Ð": "&Bcy;",
	      "âµ": "&because;",
	      "â¬": "&bernou;",
	      "Î": "&Beta;",
	      "ð": "&Bfr;",
	      "ð¹": "&Bopf;",
	      "Ë": "&breve;",
	      "â": "&bump;",
	      "Ð§": "&CHcy;",
	      "Â©": "&copy;",
	      "Ä": "&Cacute;",
	      "â": "&Cap;",
	      "â": "&DD;",
	      "â­": "&Cfr;",
	      "Ä": "&Ccaron;",
	      "Ã": "&Ccedil;",
	      "Ä": "&Ccirc;",
	      "â°": "&Cconint;",
	      "Ä": "&Cdot;",
	      "Â¸": "&cedil;",
	      "Â·": "&middot;",
	      "Î§": "&Chi;",
	      "â": "&odot;",
	      "â": "&ominus;",
	      "â": "&oplus;",
	      "â": "&otimes;",
	      "â²": "&cwconint;",
	      "â": "&rdquor;",
	      "â": "&rsquor;",
	      "â·": "&Proportion;",
	      "â©´": "&Colone;",
	      "â¡": "&equiv;",
	      "â¯": "&DoubleContourIntegral;",
	      "â®": "&oint;",
	      "â": "&complexes;",
	      "â": "&coprod;",
	      "â³": "&awconint;",
	      "â¨¯": "&Cross;",
	      "ð": "&Cscr;",
	      "â": "&Cup;",
	      "â": "&asympeq;",
	      "â¤": "&DDotrahd;",
	      "Ð": "&DJcy;",
	      "Ð": "&DScy;",
	      "Ð": "&DZcy;",
	      "â¡": "&ddagger;",
	      "â¡": "&Darr;",
	      "â«¤": "&DoubleLeftTee;",
	      "Ä": "&Dcaron;",
	      "Ð": "&Dcy;",
	      "â": "&nabla;",
	      "Î": "&Delta;",
	      "ð": "&Dfr;",
	      "Â´": "&acute;",
	      "Ë": "&dot;",
	      "Ë": "&dblac;",
	      "`": "&grave;",
	      "Ë": "&tilde;",
	      "â": "&diamond;",
	      "â": "&dd;",
	      "ð»": "&Dopf;",
	      "Â¨": "&uml;",
	      "â": "&DotDot;",
	      "â": "&esdot;",
	      "â": "&dArr;",
	      "â": "&lArr;",
	      "â": "&iff;",
	      "â¸": "&xlArr;",
	      "âº": "&xhArr;",
	      "â¹": "&xrArr;",
	      "â": "&rArr;",
	      "â¨": "&vDash;",
	      "â": "&uArr;",
	      "â": "&vArr;",
	      "â¥": "&spar;",
	      "â": "&downarrow;",
	      "â¤": "&DownArrowBar;",
	      "âµ": "&duarr;",
	      "Ì": "&DownBreve;",
	      "â¥": "&DownLeftRightVector;",
	      "â¥": "&DownLeftTeeVector;",
	      "â½": "&lhard;",
	      "â¥": "&DownLeftVectorBar;",
	      "â¥": "&DownRightTeeVector;",
	      "â": "&rightharpoondown;",
	      "â¥": "&DownRightVectorBar;",
	      "â¤": "&top;",
	      "â§": "&mapstodown;",
	      "ð": "&Dscr;",
	      "Ä": "&Dstrok;",
	      "Å": "&ENG;",
	      "Ã": "&ETH;",
	      "Ã": "&Eacute;",
	      "Ä": "&Ecaron;",
	      "Ã": "&Ecirc;",
	      "Ð­": "&Ecy;",
	      "Ä": "&Edot;",
	      "ð": "&Efr;",
	      "Ã": "&Egrave;",
	      "â": "&isinv;",
	      "Ä": "&Emacr;",
	      "â»": "&EmptySmallSquare;",
	      "â«": "&EmptyVerySmallSquare;",
	      "Ä": "&Eogon;",
	      "ð¼": "&Eopf;",
	      "Î": "&Epsilon;",
	      "â©µ": "&Equal;",
	      "â": "&esim;",
	      "â": "&rlhar;",
	      "â°": "&expectation;",
	      "â©³": "&Esim;",
	      "Î": "&Eta;",
	      "Ã": "&Euml;",
	      "â": "&exist;",
	      "â": "&exponentiale;",
	      "Ð¤": "&Fcy;",
	      "ð": "&Ffr;",
	      "â¼": "&FilledSmallSquare;",
	      "âª": "&squf;",
	      "ð½": "&Fopf;",
	      "â": "&forall;",
	      "â±": "&Fscr;",
	      "Ð": "&GJcy;",
	      ">": "&gt;",
	      "Î": "&Gamma;",
	      "Ï": "&Gammad;",
	      "Ä": "&Gbreve;",
	      "Ä¢": "&Gcedil;",
	      "Ä": "&Gcirc;",
	      "Ð": "&Gcy;",
	      "Ä ": "&Gdot;",
	      "ð": "&Gfr;",
	      "â": "&ggg;",
	      "ð¾": "&Gopf;",
	      "â¥": "&geq;",
	      "â": "&gtreqless;",
	      "â§": "&geqq;",
	      "âª¢": "&GreaterGreater;",
	      "â·": "&gtrless;",
	      "â©¾": "&ges;",
	      "â³": "&gtrsim;",
	      "ð¢": "&Gscr;",
	      "â«": "&gg;",
	      "Ðª": "&HARDcy;",
	      "Ë": "&caron;",
	      "^": "&Hat;",
	      "Ä¤": "&Hcirc;",
	      "â": "&Poincareplane;",
	      "â": "&hamilt;",
	      "â": "&quaternions;",
	      "â": "&boxh;",
	      "Ä¦": "&Hstrok;",
	      "â": "&bumpeq;",
	      "Ð": "&IEcy;",
	      "Ä²": "&IJlig;",
	      "Ð": "&IOcy;",
	      "Ã": "&Iacute;",
	      "Ã": "&Icirc;",
	      "Ð": "&Icy;",
	      "Ä°": "&Idot;",
	      "â": "&imagpart;",
	      "Ã": "&Igrave;",
	      "Äª": "&Imacr;",
	      "â": "&ii;",
	      "â¬": "&Int;",
	      "â«": "&int;",
	      "â": "&xcap;",
	      "â£": "&ic;",
	      "â¢": "&it;",
	      "Ä®": "&Iogon;",
	      "ð": "&Iopf;",
	      "Î": "&Iota;",
	      "â": "&imagline;",
	      "Ä¨": "&Itilde;",
	      "Ð": "&Iukcy;",
	      "Ã": "&Iuml;",
	      "Ä´": "&Jcirc;",
	      "Ð": "&Jcy;",
	      "ð": "&Jfr;",
	      "ð": "&Jopf;",
	      "ð¥": "&Jscr;",
	      "Ð": "&Jsercy;",
	      "Ð": "&Jukcy;",
	      "Ð¥": "&KHcy;",
	      "Ð": "&KJcy;",
	      "Î": "&Kappa;",
	      "Ä¶": "&Kcedil;",
	      "Ð": "&Kcy;",
	      "ð": "&Kfr;",
	      "ð": "&Kopf;",
	      "ð¦": "&Kscr;",
	      "Ð": "&LJcy;",
	      "<": "&lt;",
	      "Ä¹": "&Lacute;",
	      "Î": "&Lambda;",
	      "âª": "&Lang;",
	      "â": "&lagran;",
	      "â": "&twoheadleftarrow;",
	      "Ä½": "&Lcaron;",
	      "Ä»": "&Lcedil;",
	      "Ð": "&Lcy;",
	      "â¨": "&langle;",
	      "â": "&slarr;",
	      "â¤": "&larrb;",
	      "â": "&lrarr;",
	      "â": "&lceil;",
	      "â¦": "&lobrk;",
	      "â¥¡": "&LeftDownTeeVector;",
	      "â": "&downharpoonleft;",
	      "â¥": "&LeftDownVectorBar;",
	      "â": "&lfloor;",
	      "â": "&leftrightarrow;",
	      "â¥": "&LeftRightVector;",
	      "â£": "&dashv;",
	      "â¤": "&mapstoleft;",
	      "â¥": "&LeftTeeVector;",
	      "â²": "&vltri;",
	      "â§": "&LeftTriangleBar;",
	      "â´": "&trianglelefteq;",
	      "â¥": "&LeftUpDownVector;",
	      "â¥ ": "&LeftUpTeeVector;",
	      "â¿": "&upharpoonleft;",
	      "â¥": "&LeftUpVectorBar;",
	      "â¼": "&lharu;",
	      "â¥": "&LeftVectorBar;",
	      "â": "&lesseqgtr;",
	      "â¦": "&leqq;",
	      "â¶": "&lg;",
	      "âª¡": "&LessLess;",
	      "â©½": "&les;",
	      "â²": "&lsim;",
	      "ð": "&Lfr;",
	      "â": "&Ll;",
	      "â": "&lAarr;",
	      "Ä¿": "&Lmidot;",
	      "âµ": "&xlarr;",
	      "â·": "&xharr;",
	      "â¶": "&xrarr;",
	      "ð": "&Lopf;",
	      "â": "&swarrow;",
	      "â": "&searrow;",
	      "â°": "&lsh;",
	      "Å": "&Lstrok;",
	      "âª": "&ll;",
	      "â¤": "&Map;",
	      "Ð": "&Mcy;",
	      "â": "&MediumSpace;",
	      "â³": "&phmmat;",
	      "ð": "&Mfr;",
	      "â": "&mp;",
	      "ð": "&Mopf;",
	      "Î": "&Mu;",
	      "Ð": "&NJcy;",
	      "Å": "&Nacute;",
	      "Å": "&Ncaron;",
	      "Å": "&Ncedil;",
	      "Ð": "&Ncy;",
	      "â": "&ZeroWidthSpace;",
	      "\n": "&NewLine;",
	      "ð": "&Nfr;",
	      "â ": "&NoBreak;",
	      "Â ": "&nbsp;",
	      "â": "&naturals;",
	      "â«¬": "&Not;",
	      "â¢": "&nequiv;",
	      "â­": "&NotCupCap;",
	      "â¦": "&nspar;",
	      "â": "&notinva;",
	      "â ": "&ne;",
	      "âÌ¸": "&nesim;",
	      "â": "&nexists;",
	      "â¯": "&ngtr;",
	      "â±": "&ngeq;",
	      "â§Ì¸": "&ngeqq;",
	      "â«Ì¸": "&nGtv;",
	      "â¹": "&ntgl;",
	      "â©¾Ì¸": "&nges;",
	      "âµ": "&ngsim;",
	      "âÌ¸": "&nbump;",
	      "âÌ¸": "&nbumpe;",
	      "âª": "&ntriangleleft;",
	      "â§Ì¸": "&NotLeftTriangleBar;",
	      "â¬": "&ntrianglelefteq;",
	      "â®": "&nlt;",
	      "â°": "&nleq;",
	      "â¸": "&ntlg;",
	      "âªÌ¸": "&nLtv;",
	      "â©½Ì¸": "&nles;",
	      "â´": "&nlsim;",
	      "âª¢Ì¸": "&NotNestedGreaterGreater;",
	      "âª¡Ì¸": "&NotNestedLessLess;",
	      "â": "&nprec;",
	      "âª¯Ì¸": "&npreceq;",
	      "â ": "&nprcue;",
	      "â": "&notniva;",
	      "â«": "&ntriangleright;",
	      "â§Ì¸": "&NotRightTriangleBar;",
	      "â­": "&ntrianglerighteq;",
	      "âÌ¸": "&NotSquareSubset;",
	      "â¢": "&nsqsube;",
	      "âÌ¸": "&NotSquareSuperset;",
	      "â£": "&nsqsupe;",
	      "ââ": "&vnsub;",
	      "â": "&nsubseteq;",
	      "â": "&nsucc;",
	      "âª°Ì¸": "&nsucceq;",
	      "â¡": "&nsccue;",
	      "â¿Ì¸": "&NotSucceedsTilde;",
	      "ââ": "&vnsup;",
	      "â": "&nsupseteq;",
	      "â": "&nsim;",
	      "â": "&nsimeq;",
	      "â": "&ncong;",
	      "â": "&napprox;",
	      "â¤": "&nsmid;",
	      "ð©": "&Nscr;",
	      "Ã": "&Ntilde;",
	      "Î": "&Nu;",
	      "Å": "&OElig;",
	      "Ã": "&Oacute;",
	      "Ã": "&Ocirc;",
	      "Ð": "&Ocy;",
	      "Å": "&Odblac;",
	      "ð": "&Ofr;",
	      "Ã": "&Ograve;",
	      "Å": "&Omacr;",
	      "Î©": "&ohm;",
	      "Î": "&Omicron;",
	      "ð": "&Oopf;",
	      "â": "&ldquo;",
	      "â": "&lsquo;",
	      "â©": "&Or;",
	      "ðª": "&Oscr;",
	      "Ã": "&Oslash;",
	      "Ã": "&Otilde;",
	      "â¨·": "&Otimes;",
	      "Ã": "&Ouml;",
	      "â¾": "&oline;",
	      "â": "&OverBrace;",
	      "â´": "&tbrk;",
	      "â": "&OverParenthesis;",
	      "â": "&part;",
	      "Ð": "&Pcy;",
	      "ð": "&Pfr;",
	      "Î¦": "&Phi;",
	      "Î ": "&Pi;",
	      "Â±": "&pm;",
	      "â": "&primes;",
	      "âª»": "&Pr;",
	      "âº": "&prec;",
	      "âª¯": "&preceq;",
	      "â¼": "&preccurlyeq;",
	      "â¾": "&prsim;",
	      "â³": "&Prime;",
	      "â": "&prod;",
	      "â": "&vprop;",
	      "ð«": "&Pscr;",
	      "Î¨": "&Psi;",
	      '"': "&quot;",
	      "ð": "&Qfr;",
	      "â": "&rationals;",
	      "ð¬": "&Qscr;",
	      "â¤": "&drbkarow;",
	      "Â®": "&reg;",
	      "Å": "&Racute;",
	      "â«": "&Rang;",
	      "â ": "&twoheadrightarrow;",
	      "â¤": "&Rarrtl;",
	      "Å": "&Rcaron;",
	      "Å": "&Rcedil;",
	      "Ð ": "&Rcy;",
	      "â": "&realpart;",
	      "â": "&niv;",
	      "â": "&lrhar;",
	      "â¥¯": "&duhar;",
	      "Î¡": "&Rho;",
	      "â©": "&rangle;",
	      "â": "&srarr;",
	      "â¥": "&rarrb;",
	      "â": "&rlarr;",
	      "â": "&rceil;",
	      "â§": "&robrk;",
	      "â¥": "&RightDownTeeVector;",
	      "â": "&downharpoonright;",
	      "â¥": "&RightDownVectorBar;",
	      "â": "&rfloor;",
	      "â¢": "&vdash;",
	      "â¦": "&mapsto;",
	      "â¥": "&RightTeeVector;",
	      "â³": "&vrtri;",
	      "â§": "&RightTriangleBar;",
	      "âµ": "&trianglerighteq;",
	      "â¥": "&RightUpDownVector;",
	      "â¥": "&RightUpTeeVector;",
	      "â¾": "&upharpoonright;",
	      "â¥": "&RightUpVectorBar;",
	      "â": "&rightharpoonup;",
	      "â¥": "&RightVectorBar;",
	      "â": "&reals;",
	      "â¥°": "&RoundImplies;",
	      "â": "&rAarr;",
	      "â": "&realine;",
	      "â±": "&rsh;",
	      "â§´": "&RuleDelayed;",
	      "Ð©": "&SHCHcy;",
	      "Ð¨": "&SHcy;",
	      "Ð¬": "&SOFTcy;",
	      "Å": "&Sacute;",
	      "âª¼": "&Sc;",
	      "Å ": "&Scaron;",
	      "Å": "&Scedil;",
	      "Å": "&Scirc;",
	      "Ð¡": "&Scy;",
	      "ð": "&Sfr;",
	      "â": "&uparrow;",
	      "Î£": "&Sigma;",
	      "â": "&compfn;",
	      "ð": "&Sopf;",
	      "â": "&radic;",
	      "â¡": "&square;",
	      "â": "&sqcap;",
	      "â": "&sqsubset;",
	      "â": "&sqsubseteq;",
	      "â": "&sqsupset;",
	      "â": "&sqsupseteq;",
	      "â": "&sqcup;",
	      "ð®": "&Sscr;",
	      "â": "&sstarf;",
	      "â": "&Subset;",
	      "â": "&subseteq;",
	      "â»": "&succ;",
	      "âª°": "&succeq;",
	      "â½": "&succcurlyeq;",
	      "â¿": "&succsim;",
	      "â": "&sum;",
	      "â": "&Supset;",
	      "â": "&supset;",
	      "â": "&supseteq;",
	      "Ã": "&THORN;",
	      "â¢": "&trade;",
	      "Ð": "&TSHcy;",
	      "Ð¦": "&TScy;",
	      "\t": "&Tab;",
	      "Î¤": "&Tau;",
	      "Å¤": "&Tcaron;",
	      "Å¢": "&Tcedil;",
	      "Ð¢": "&Tcy;",
	      "ð": "&Tfr;",
	      "â´": "&therefore;",
	      "Î": "&Theta;",
	      "ââ": "&ThickSpace;",
	      "â": "&thinsp;",
	      "â¼": "&thksim;",
	      "â": "&simeq;",
	      "â": "&cong;",
	      "â": "&thkap;",
	      "ð": "&Topf;",
	      "â": "&tdot;",
	      "ð¯": "&Tscr;",
	      "Å¦": "&Tstrok;",
	      "Ã": "&Uacute;",
	      "â": "&Uarr;",
	      "â¥": "&Uarrocir;",
	      "Ð": "&Ubrcy;",
	      "Å¬": "&Ubreve;",
	      "Ã": "&Ucirc;",
	      "Ð£": "&Ucy;",
	      "Å°": "&Udblac;",
	      "ð": "&Ufr;",
	      "Ã": "&Ugrave;",
	      "Åª": "&Umacr;",
	      _: "&lowbar;",
	      "â": "&UnderBrace;",
	      "âµ": "&bbrk;",
	      "â": "&UnderParenthesis;",
	      "â": "&xcup;",
	      "â": "&uplus;",
	      "Å²": "&Uogon;",
	      "ð": "&Uopf;",
	      "â¤": "&UpArrowBar;",
	      "â": "&udarr;",
	      "â": "&varr;",
	      "â¥®": "&udhar;",
	      "â¥": "&perp;",
	      "â¥": "&mapstoup;",
	      "â": "&nwarrow;",
	      "â": "&nearrow;",
	      "Ï": "&upsih;",
	      "Î¥": "&Upsilon;",
	      "Å®": "&Uring;",
	      "ð°": "&Uscr;",
	      "Å¨": "&Utilde;",
	      "Ã": "&Uuml;",
	      "â«": "&VDash;",
	      "â««": "&Vbar;",
	      "Ð": "&Vcy;",
	      "â©": "&Vdash;",
	      "â«¦": "&Vdashl;",
	      "â": "&xvee;",
	      "â": "&Vert;",
	      "â£": "&smid;",
	      "|": "&vert;",
	      "â": "&VerticalSeparator;",
	      "â": "&wreath;",
	      "â": "&hairsp;",
	      "ð": "&Vfr;",
	      "ð": "&Vopf;",
	      "ð±": "&Vscr;",
	      "âª": "&Vvdash;",
	      "Å´": "&Wcirc;",
	      "â": "&xwedge;",
	      "ð": "&Wfr;",
	      "ð": "&Wopf;",
	      "ð²": "&Wscr;",
	      "ð": "&Xfr;",
	      "Î": "&Xi;",
	      "ð": "&Xopf;",
	      "ð³": "&Xscr;",
	      "Ð¯": "&YAcy;",
	      "Ð": "&YIcy;",
	      "Ð®": "&YUcy;",
	      "Ã": "&Yacute;",
	      "Å¶": "&Ycirc;",
	      "Ð«": "&Ycy;",
	      "ð": "&Yfr;",
	      "ð": "&Yopf;",
	      "ð´": "&Yscr;",
	      "Å¸": "&Yuml;",
	      "Ð": "&ZHcy;",
	      "Å¹": "&Zacute;",
	      "Å½": "&Zcaron;",
	      "Ð": "&Zcy;",
	      "Å»": "&Zdot;",
	      "Î": "&Zeta;",
	      "â¨": "&zeetrf;",
	      "â¤": "&integers;",
	      "ðµ": "&Zscr;",
	      "Ã¡": "&aacute;",
	      "Ä": "&abreve;",
	      "â¾": "&mstpos;",
	      "â¾Ì³": "&acE;",
	      "â¿": "&acd;",
	      "Ã¢": "&acirc;",
	      "Ð°": "&acy;",
	      "Ã¦": "&aelig;",
	      "ð": "&afr;",
	      "Ã ": "&agrave;",
	      "âµ": "&aleph;",
	      "Î±": "&alpha;",
	      "Ä": "&amacr;",
	      "â¨¿": "&amalg;",
	      "â§": "&wedge;",
	      "â©": "&andand;",
	      "â©": "&andd;",
	      "â©": "&andslope;",
	      "â©": "&andv;",
	      "â ": "&angle;",
	      "â¦¤": "&ange;",
	      "â¡": "&measuredangle;",
	      "â¦¨": "&angmsdaa;",
	      "â¦©": "&angmsdab;",
	      "â¦ª": "&angmsdac;",
	      "â¦«": "&angmsdad;",
	      "â¦¬": "&angmsdae;",
	      "â¦­": "&angmsdaf;",
	      "â¦®": "&angmsdag;",
	      "â¦¯": "&angmsdah;",
	      "â": "&angrt;",
	      "â¾": "&angrtvb;",
	      "â¦": "&angrtvbd;",
	      "â¢": "&angsph;",
	      "â¼": "&angzarr;",
	      "Ä": "&aogon;",
	      "ð": "&aopf;",
	      "â©°": "&apE;",
	      "â©¯": "&apacir;",
	      "â": "&approxeq;",
	      "â": "&apid;",
	      "'": "&apos;",
	      "Ã¥": "&aring;",
	      "ð¶": "&ascr;",
	      "*": "&midast;",
	      "Ã£": "&atilde;",
	      "Ã¤": "&auml;",
	      "â¨": "&awint;",
	      "â«­": "&bNot;",
	      "â": "&bcong;",
	      "Ï¶": "&bepsi;",
	      "âµ": "&bprime;",
	      "â½": "&bsim;",
	      "â": "&bsime;",
	      "â½": "&barvee;",
	      "â": "&barwedge;",
	      "â¶": "&bbrktbrk;",
	      "Ð±": "&bcy;",
	      "â": "&ldquor;",
	      "â¦°": "&bemptyv;",
	      "Î²": "&beta;",
	      "â¶": "&beth;",
	      "â¬": "&twixt;",
	      "ð": "&bfr;",
	      "â¯": "&xcirc;",
	      "â¨": "&xodot;",
	      "â¨": "&xoplus;",
	      "â¨": "&xotime;",
	      "â¨": "&xsqcup;",
	      "â": "&starf;",
	      "â½": "&xdtri;",
	      "â³": "&xutri;",
	      "â¨": "&xuplus;",
	      "â¤": "&rbarr;",
	      "â§«": "&lozf;",
	      "â´": "&utrif;",
	      "â¾": "&dtrif;",
	      "â": "&ltrif;",
	      "â¸": "&rtrif;",
	      "â£": "&blank;",
	      "â": "&blk12;",
	      "â": "&blk14;",
	      "â": "&blk34;",
	      "â": "&block;",
	      "=â¥": "&bne;",
	      "â¡â¥": "&bnequiv;",
	      "â": "&bnot;",
	      "ð": "&bopf;",
	      "â": "&bowtie;",
	      "â": "&boxDL;",
	      "â": "&boxDR;",
	      "â": "&boxDl;",
	      "â": "&boxDr;",
	      "â": "&boxH;",
	      "â¦": "&boxHD;",
	      "â©": "&boxHU;",
	      "â¤": "&boxHd;",
	      "â§": "&boxHu;",
	      "â": "&boxUL;",
	      "â": "&boxUR;",
	      "â": "&boxUl;",
	      "â": "&boxUr;",
	      "â": "&boxV;",
	      "â¬": "&boxVH;",
	      "â£": "&boxVL;",
	      "â ": "&boxVR;",
	      "â«": "&boxVh;",
	      "â¢": "&boxVl;",
	      "â": "&boxVr;",
	      "â§": "&boxbox;",
	      "â": "&boxdL;",
	      "â": "&boxdR;",
	      "â": "&boxdl;",
	      "â": "&boxdr;",
	      "â¥": "&boxhD;",
	      "â¨": "&boxhU;",
	      "â¬": "&boxhd;",
	      "â´": "&boxhu;",
	      "â": "&minusb;",
	      "â": "&plusb;",
	      "â ": "&timesb;",
	      "â": "&boxuL;",
	      "â": "&boxuR;",
	      "â": "&boxul;",
	      "â": "&boxur;",
	      "â": "&boxv;",
	      "âª": "&boxvH;",
	      "â¡": "&boxvL;",
	      "â": "&boxvR;",
	      "â¼": "&boxvh;",
	      "â¤": "&boxvl;",
	      "â": "&boxvr;",
	      "Â¦": "&brvbar;",
	      "ð·": "&bscr;",
	      "â": "&bsemi;",
	      "\\": "&bsol;",
	      "â§": "&bsolb;",
	      "â": "&bsolhsub;",
	      "â¢": "&bullet;",
	      "âª®": "&bumpE;",
	      "Ä": "&cacute;",
	      "â©": "&cap;",
	      "â©": "&capand;",
	      "â©": "&capbrcup;",
	      "â©": "&capcap;",
	      "â©": "&capcup;",
	      "â©": "&capdot;",
	      "â©ï¸": "&caps;",
	      "â": "&caret;",
	      "â©": "&ccaps;",
	      "Ä": "&ccaron;",
	      "Ã§": "&ccedil;",
	      "Ä": "&ccirc;",
	      "â©": "&ccups;",
	      "â©": "&ccupssm;",
	      "Ä": "&cdot;",
	      "â¦²": "&cemptyv;",
	      "Â¢": "&cent;",
	      "ð ": "&cfr;",
	      "Ñ": "&chcy;",
	      "â": "&checkmark;",
	      "Ï": "&chi;",
	      "â": "&cir;",
	      "â§": "&cirE;",
	      "Ë": "&circ;",
	      "â": "&cire;",
	      "âº": "&olarr;",
	      "â»": "&orarr;",
	      "â": "&oS;",
	      "â": "&oast;",
	      "â": "&ocir;",
	      "â": "&odash;",
	      "â¨": "&cirfnint;",
	      "â«¯": "&cirmid;",
	      "â§": "&cirscir;",
	      "â£": "&clubsuit;",
	      ":": "&colon;",
	      ",": "&comma;",
	      "@": "&commat;",
	      "â": "&complement;",
	      "â©­": "&congdot;",
	      "ð": "&copf;",
	      "â": "&copysr;",
	      "âµ": "&crarr;",
	      "â": "&cross;",
	      "ð¸": "&cscr;",
	      "â«": "&csub;",
	      "â«": "&csube;",
	      "â«": "&csup;",
	      "â«": "&csupe;",
	      "â¯": "&ctdot;",
	      "â¤¸": "&cudarrl;",
	      "â¤µ": "&cudarrr;",
	      "â": "&curlyeqprec;",
	      "â": "&curlyeqsucc;",
	      "â¶": "&curvearrowleft;",
	      "â¤½": "&cularrp;",
	      "âª": "&cup;",
	      "â©": "&cupbrcap;",
	      "â©": "&cupcap;",
	      "â©": "&cupcup;",
	      "â": "&cupdot;",
	      "â©": "&cupor;",
	      "âªï¸": "&cups;",
	      "â·": "&curvearrowright;",
	      "â¤¼": "&curarrm;",
	      "â": "&cuvee;",
	      "â": "&cuwed;",
	      "Â¤": "&curren;",
	      "â±": "&cwint;",
	      "â­": "&cylcty;",
	      "â¥¥": "&dHar;",
	      "â ": "&dagger;",
	      "â¸": "&daleth;",
	      "â": "&hyphen;",
	      "â¤": "&rBarr;",
	      "Ä": "&dcaron;",
	      "Ð´": "&dcy;",
	      "â": "&downdownarrows;",
	      "â©·": "&eDDot;",
	      "Â°": "&deg;",
	      "Î´": "&delta;",
	      "â¦±": "&demptyv;",
	      "â¥¿": "&dfisht;",
	      "ð¡": "&dfr;",
	      "â¦": "&diams;",
	      "Ï": "&gammad;",
	      "â²": "&disin;",
	      "Ã·": "&divide;",
	      "â": "&divonx;",
	      "Ñ": "&djcy;",
	      "â": "&llcorner;",
	      "â": "&dlcrop;",
	      $: "&dollar;",
	      "ð": "&dopf;",
	      "â": "&eDot;",
	      "â¸": "&minusd;",
	      "â": "&plusdo;",
	      "â¡": "&sdotb;",
	      "â": "&lrcorner;",
	      "â": "&drcrop;",
	      "ð¹": "&dscr;",
	      "Ñ": "&dscy;",
	      "â§¶": "&dsol;",
	      "Ä": "&dstrok;",
	      "â±": "&dtdot;",
	      "â¿": "&triangledown;",
	      "â¦¦": "&dwangle;",
	      "Ñ": "&dzcy;",
	      "â¿": "&dzigrarr;",
	      "Ã©": "&eacute;",
	      "â©®": "&easter;",
	      "Ä": "&ecaron;",
	      "â": "&eqcirc;",
	      "Ãª": "&ecirc;",
	      "â": "&eqcolon;",
	      "Ñ": "&ecy;",
	      "Ä": "&edot;",
	      "â": "&fallingdotseq;",
	      "ð¢": "&efr;",
	      "âª": "&eg;",
	      "Ã¨": "&egrave;",
	      "âª": "&eqslantgtr;",
	      "âª": "&egsdot;",
	      "âª": "&el;",
	      "â§": "&elinters;",
	      "â": "&ell;",
	      "âª": "&eqslantless;",
	      "âª": "&elsdot;",
	      "Ä": "&emacr;",
	      "â": "&varnothing;",
	      "â": "&emsp13;",
	      "â": "&emsp14;",
	      "â": "&emsp;",
	      "Å": "&eng;",
	      "â": "&ensp;",
	      "Ä": "&eogon;",
	      "ð": "&eopf;",
	      "â": "&epar;",
	      "â§£": "&eparsl;",
	      "â©±": "&eplus;",
	      "Îµ": "&epsilon;",
	      "Ïµ": "&varepsilon;",
	      "=": "&equals;",
	      "â": "&questeq;",
	      "â©¸": "&equivDD;",
	      "â§¥": "&eqvparsl;",
	      "â": "&risingdotseq;",
	      "â¥±": "&erarr;",
	      "â¯": "&escr;",
	      "Î·": "&eta;",
	      "Ã°": "&eth;",
	      "Ã«": "&euml;",
	      "â¬": "&euro;",
	      "!": "&excl;",
	      "Ñ": "&fcy;",
	      "â": "&female;",
	      "ï¬": "&ffilig;",
	      "ï¬": "&fflig;",
	      "ï¬": "&ffllig;",
	      "ð£": "&ffr;",
	      "ï¬": "&filig;",
	      fj: "&fjlig;",
	      "â­": "&flat;",
	      "ï¬": "&fllig;",
	      "â±": "&fltns;",
	      "Æ": "&fnof;",
	      "ð": "&fopf;",
	      "â": "&pitchfork;",
	      "â«": "&forkv;",
	      "â¨": "&fpartint;",
	      "Â½": "&half;",
	      "â": "&frac13;",
	      "Â¼": "&frac14;",
	      "â": "&frac15;",
	      "â": "&frac16;",
	      "â": "&frac18;",
	      "â": "&frac23;",
	      "â": "&frac25;",
	      "Â¾": "&frac34;",
	      "â": "&frac35;",
	      "â": "&frac38;",
	      "â": "&frac45;",
	      "â": "&frac56;",
	      "â": "&frac58;",
	      "â": "&frac78;",
	      "â": "&frasl;",
	      "â¢": "&sfrown;",
	      "ð»": "&fscr;",
	      "âª": "&gtreqqless;",
	      "Çµ": "&gacute;",
	      "Î³": "&gamma;",
	      "âª": "&gtrapprox;",
	      "Ä": "&gbreve;",
	      "Ä": "&gcirc;",
	      "Ð³": "&gcy;",
	      "Ä¡": "&gdot;",
	      "âª©": "&gescc;",
	      "âª": "&gesdot;",
	      "âª": "&gesdoto;",
	      "âª": "&gesdotol;",
	      "âï¸": "&gesl;",
	      "âª": "&gesles;",
	      "ð¤": "&gfr;",
	      "â·": "&gimel;",
	      "Ñ": "&gjcy;",
	      "âª": "&glE;",
	      "âª¥": "&gla;",
	      "âª¤": "&glj;",
	      "â©": "&gneqq;",
	      "âª": "&gnapprox;",
	      "âª": "&gneq;",
	      "â§": "&gnsim;",
	      "ð": "&gopf;",
	      "â": "&gscr;",
	      "âª": "&gsime;",
	      "âª": "&gsiml;",
	      "âª§": "&gtcc;",
	      "â©º": "&gtcir;",
	      "â": "&gtrdot;",
	      "â¦": "&gtlPar;",
	      "â©¼": "&gtquest;",
	      "â¥¸": "&gtrarr;",
	      "â©ï¸": "&gvnE;",
	      "Ñ": "&hardcy;",
	      "â¥": "&harrcir;",
	      "â­": "&leftrightsquigarrow;",
	      "â": "&plankv;",
	      "Ä¥": "&hcirc;",
	      "â¥": "&heartsuit;",
	      "â¦": "&mldr;",
	      "â¹": "&hercon;",
	      "ð¥": "&hfr;",
	      "â¤¥": "&searhk;",
	      "â¤¦": "&swarhk;",
	      "â¿": "&hoarr;",
	      "â»": "&homtht;",
	      "â©": "&larrhk;",
	      "âª": "&rarrhk;",
	      "ð": "&hopf;",
	      "â": "&horbar;",
	      "ð½": "&hscr;",
	      "Ä§": "&hstrok;",
	      "â": "&hybull;",
	      "Ã­": "&iacute;",
	      "Ã®": "&icirc;",
	      "Ð¸": "&icy;",
	      "Ðµ": "&iecy;",
	      "Â¡": "&iexcl;",
	      "ð¦": "&ifr;",
	      "Ã¬": "&igrave;",
	      "â¨": "&qint;",
	      "â­": "&tint;",
	      "â§": "&iinfin;",
	      "â©": "&iiota;",
	      "Ä³": "&ijlig;",
	      "Ä«": "&imacr;",
	      "Ä±": "&inodot;",
	      "â·": "&imof;",
	      "Æµ": "&imped;",
	      "â": "&incare;",
	      "â": "&infin;",
	      "â§": "&infintie;",
	      "âº": "&intercal;",
	      "â¨": "&intlarhk;",
	      "â¨¼": "&iprod;",
	      "Ñ": "&iocy;",
	      "Ä¯": "&iogon;",
	      "ð": "&iopf;",
	      "Î¹": "&iota;",
	      "Â¿": "&iquest;",
	      "ð¾": "&iscr;",
	      "â¹": "&isinE;",
	      "âµ": "&isindot;",
	      "â´": "&isins;",
	      "â³": "&isinsv;",
	      "Ä©": "&itilde;",
	      "Ñ": "&iukcy;",
	      "Ã¯": "&iuml;",
	      "Äµ": "&jcirc;",
	      "Ð¹": "&jcy;",
	      "ð§": "&jfr;",
	      "È·": "&jmath;",
	      "ð": "&jopf;",
	      "ð¿": "&jscr;",
	      "Ñ": "&jsercy;",
	      "Ñ": "&jukcy;",
	      "Îº": "&kappa;",
	      "Ï°": "&varkappa;",
	      "Ä·": "&kcedil;",
	      "Ðº": "&kcy;",
	      "ð¨": "&kfr;",
	      "Ä¸": "&kgreen;",
	      "Ñ": "&khcy;",
	      "Ñ": "&kjcy;",
	      "ð": "&kopf;",
	      "ð": "&kscr;",
	      "â¤": "&lAtail;",
	      "â¤": "&lBarr;",
	      "âª": "&lesseqqgtr;",
	      "â¥¢": "&lHar;",
	      "Äº": "&lacute;",
	      "â¦´": "&laemptyv;",
	      "Î»": "&lambda;",
	      "â¦": "&langd;",
	      "âª": "&lessapprox;",
	      "Â«": "&laquo;",
	      "â¤": "&larrbfs;",
	      "â¤": "&larrfs;",
	      "â«": "&looparrowleft;",
	      "â¤¹": "&larrpl;",
	      "â¥³": "&larrsim;",
	      "â¢": "&leftarrowtail;",
	      "âª«": "&lat;",
	      "â¤": "&latail;",
	      "âª­": "&late;",
	      "âª­ï¸": "&lates;",
	      "â¤": "&lbarr;",
	      "â²": "&lbbrk;",
	      "{": "&lcub;",
	      "[": "&lsqb;",
	      "â¦": "&lbrke;",
	      "â¦": "&lbrksld;",
	      "â¦": "&lbrkslu;",
	      "Ä¾": "&lcaron;",
	      "Ä¼": "&lcedil;",
	      "Ð»": "&lcy;",
	      "â¤¶": "&ldca;",
	      "â¥§": "&ldrdhar;",
	      "â¥": "&ldrushar;",
	      "â²": "&ldsh;",
	      "â¤": "&leq;",
	      "â": "&llarr;",
	      "â": "&lthree;",
	      "âª¨": "&lescc;",
	      "â©¿": "&lesdot;",
	      "âª": "&lesdoto;",
	      "âª": "&lesdotor;",
	      "âï¸": "&lesg;",
	      "âª": "&lesges;",
	      "â": "&ltdot;",
	      "â¥¼": "&lfisht;",
	      "ð©": "&lfr;",
	      "âª": "&lgE;",
	      "â¥ª": "&lharul;",
	      "â": "&lhblk;",
	      "Ñ": "&ljcy;",
	      "â¥«": "&llhard;",
	      "âº": "&lltri;",
	      "Å": "&lmidot;",
	      "â°": "&lmoustache;",
	      "â¨": "&lneqq;",
	      "âª": "&lnapprox;",
	      "âª": "&lneq;",
	      "â¦": "&lnsim;",
	      "â¬": "&loang;",
	      "â½": "&loarr;",
	      "â¼": "&xmap;",
	      "â¬": "&rarrlp;",
	      "â¦": "&lopar;",
	      "ð": "&lopf;",
	      "â¨­": "&loplus;",
	      "â¨´": "&lotimes;",
	      "â": "&lowast;",
	      "â": "&lozenge;",
	      "(": "&lpar;",
	      "â¦": "&lparlt;",
	      "â¥­": "&lrhard;",
	      "â": "&lrm;",
	      "â¿": "&lrtri;",
	      "â¹": "&lsaquo;",
	      "ð": "&lscr;",
	      "âª": "&lsime;",
	      "âª": "&lsimg;",
	      "â": "&sbquo;",
	      "Å": "&lstrok;",
	      "âª¦": "&ltcc;",
	      "â©¹": "&ltcir;",
	      "â": "&ltimes;",
	      "â¥¶": "&ltlarr;",
	      "â©»": "&ltquest;",
	      "â¦": "&ltrPar;",
	      "â": "&triangleleft;",
	      "â¥": "&lurdshar;",
	      "â¥¦": "&luruhar;",
	      "â¨ï¸": "&lvnE;",
	      "âº": "&mDDot;",
	      "Â¯": "&strns;",
	      "â": "&male;",
	      "â ": "&maltese;",
	      "â®": "&marker;",
	      "â¨©": "&mcomma;",
	      "Ð¼": "&mcy;",
	      "â": "&mdash;",
	      "ðª": "&mfr;",
	      "â§": "&mho;",
	      "Âµ": "&micro;",
	      "â«°": "&midcir;",
	      "â": "&minus;",
	      "â¨ª": "&minusdu;",
	      "â«": "&mlcp;",
	      "â§": "&models;",
	      "ð": "&mopf;",
	      "ð": "&mscr;",
	      "Î¼": "&mu;",
	      "â¸": "&mumap;",
	      "âÌ¸": "&nGg;",
	      "â«â": "&nGt;",
	      "â": "&nlArr;",
	      "â": "&nhArr;",
	      "âÌ¸": "&nLl;",
	      "âªâ": "&nLt;",
	      "â": "&nrArr;",
	      "â¯": "&nVDash;",
	      "â®": "&nVdash;",
	      "Å": "&nacute;",
	      "â â": "&nang;",
	      "â©°Ì¸": "&napE;",
	      "âÌ¸": "&napid;",
	      "Å": "&napos;",
	      "â®": "&natural;",
	      "â©": "&ncap;",
	      "Å": "&ncaron;",
	      "Å": "&ncedil;",
	      "â©­Ì¸": "&ncongdot;",
	      "â©": "&ncup;",
	      "Ð½": "&ncy;",
	      "â": "&ndash;",
	      "â": "&neArr;",
	      "â¤¤": "&nearhk;",
	      "âÌ¸": "&nedot;",
	      "â¤¨": "&toea;",
	      "ð«": "&nfr;",
	      "â®": "&nleftrightarrow;",
	      "â«²": "&nhpar;",
	      "â¼": "&nis;",
	      "âº": "&nisd;",
	      "Ñ": "&njcy;",
	      "â¦Ì¸": "&nleqq;",
	      "â": "&nleftarrow;",
	      "â¥": "&nldr;",
	      "ð": "&nopf;",
	      "Â¬": "&not;",
	      "â¹Ì¸": "&notinE;",
	      "âµÌ¸": "&notindot;",
	      "â·": "&notinvb;",
	      "â¶": "&notinvc;",
	      "â¾": "&notnivb;",
	      "â½": "&notnivc;",
	      "â«½â¥": "&nparsl;",
	      "âÌ¸": "&npart;",
	      "â¨": "&npolint;",
	      "â": "&nrightarrow;",
	      "â¤³Ì¸": "&nrarrc;",
	      "âÌ¸": "&nrarrw;",
	      "ð": "&nscr;",
	      "â": "&nsub;",
	      "â«Ì¸": "&nsubseteqq;",
	      "â": "&nsup;",
	      "â«Ì¸": "&nsupseteqq;",
	      "Ã±": "&ntilde;",
	      "Î½": "&nu;",
	      "#": "&num;",
	      "â": "&numero;",
	      "â": "&numsp;",
	      "â­": "&nvDash;",
	      "â¤": "&nvHarr;",
	      "ââ": "&nvap;",
	      "â¬": "&nvdash;",
	      "â¥â": "&nvge;",
	      ">â": "&nvgt;",
	      "â§": "&nvinfin;",
	      "â¤": "&nvlArr;",
	      "â¤â": "&nvle;",
	      "<â": "&nvlt;",
	      "â´â": "&nvltrie;",
	      "â¤": "&nvrArr;",
	      "âµâ": "&nvrtrie;",
	      "â¼â": "&nvsim;",
	      "â": "&nwArr;",
	      "â¤£": "&nwarhk;",
	      "â¤§": "&nwnear;",
	      "Ã³": "&oacute;",
	      "Ã´": "&ocirc;",
	      "Ð¾": "&ocy;",
	      "Å": "&odblac;",
	      "â¨¸": "&odiv;",
	      "â¦¼": "&odsold;",
	      "Å": "&oelig;",
	      "â¦¿": "&ofcir;",
	      "ð¬": "&ofr;",
	      "Ë": "&ogon;",
	      "Ã²": "&ograve;",
	      "â§": "&ogt;",
	      "â¦µ": "&ohbar;",
	      "â¦¾": "&olcir;",
	      "â¦»": "&olcross;",
	      "â§": "&olt;",
	      "Å": "&omacr;",
	      "Ï": "&omega;",
	      "Î¿": "&omicron;",
	      "â¦¶": "&omid;",
	      "ð ": "&oopf;",
	      "â¦·": "&opar;",
	      "â¦¹": "&operp;",
	      "â¨": "&vee;",
	      "â©": "&ord;",
	      "â´": "&oscr;",
	      "Âª": "&ordf;",
	      "Âº": "&ordm;",
	      "â¶": "&origof;",
	      "â©": "&oror;",
	      "â©": "&orslope;",
	      "â©": "&orv;",
	      "Ã¸": "&oslash;",
	      "â": "&osol;",
	      "Ãµ": "&otilde;",
	      "â¨¶": "&otimesas;",
	      "Ã¶": "&ouml;",
	      "â½": "&ovbar;",
	      "Â¶": "&para;",
	      "â«³": "&parsim;",
	      "â«½": "&parsl;",
	      "Ð¿": "&pcy;",
	      "%": "&percnt;",
	      ".": "&period;",
	      "â°": "&permil;",
	      "â±": "&pertenk;",
	      "ð­": "&pfr;",
	      "Ï": "&phi;",
	      "Ï": "&varphi;",
	      "â": "&phone;",
	      "Ï": "&pi;",
	      "Ï": "&varpi;",
	      "â": "&planckh;",
	      "+": "&plus;",
	      "â¨£": "&plusacir;",
	      "â¨¢": "&pluscir;",
	      "â¨¥": "&plusdu;",
	      "â©²": "&pluse;",
	      "â¨¦": "&plussim;",
	      "â¨§": "&plustwo;",
	      "â¨": "&pointint;",
	      "ð¡": "&popf;",
	      "Â£": "&pound;",
	      "âª³": "&prE;",
	      "âª·": "&precapprox;",
	      "âª¹": "&prnap;",
	      "âªµ": "&prnE;",
	      "â¨": "&prnsim;",
	      "â²": "&prime;",
	      "â®": "&profalar;",
	      "â": "&profline;",
	      "â": "&profsurf;",
	      "â°": "&prurel;",
	      "ð": "&pscr;",
	      "Ï": "&psi;",
	      "â": "&puncsp;",
	      "ð®": "&qfr;",
	      "ð¢": "&qopf;",
	      "â": "&qprime;",
	      "ð": "&qscr;",
	      "â¨": "&quatint;",
	      "?": "&quest;",
	      "â¤": "&rAtail;",
	      "â¥¤": "&rHar;",
	      "â½Ì±": "&race;",
	      "Å": "&racute;",
	      "â¦³": "&raemptyv;",
	      "â¦": "&rangd;",
	      "â¦¥": "&range;",
	      "Â»": "&raquo;",
	      "â¥µ": "&rarrap;",
	      "â¤ ": "&rarrbfs;",
	      "â¤³": "&rarrc;",
	      "â¤": "&rarrfs;",
	      "â¥": "&rarrpl;",
	      "â¥´": "&rarrsim;",
	      "â£": "&rightarrowtail;",
	      "â": "&rightsquigarrow;",
	      "â¤": "&ratail;",
	      "â¶": "&ratio;",
	      "â³": "&rbbrk;",
	      "}": "&rcub;",
	      "]": "&rsqb;",
	      "â¦": "&rbrke;",
	      "â¦": "&rbrksld;",
	      "â¦": "&rbrkslu;",
	      "Å": "&rcaron;",
	      "Å": "&rcedil;",
	      "Ñ": "&rcy;",
	      "â¤·": "&rdca;",
	      "â¥©": "&rdldhar;",
	      "â³": "&rdsh;",
	      "â­": "&rect;",
	      "â¥½": "&rfisht;",
	      "ð¯": "&rfr;",
	      "â¥¬": "&rharul;",
	      "Ï": "&rho;",
	      "Ï±": "&varrho;",
	      "â": "&rrarr;",
	      "â": "&rthree;",
	      "Ë": "&ring;",
	      "â": "&rlm;",
	      "â±": "&rmoustache;",
	      "â«®": "&rnmid;",
	      "â­": "&roang;",
	      "â¾": "&roarr;",
	      "â¦": "&ropar;",
	      "ð£": "&ropf;",
	      "â¨®": "&roplus;",
	      "â¨µ": "&rotimes;",
	      ")": "&rpar;",
	      "â¦": "&rpargt;",
	      "â¨": "&rppolint;",
	      "âº": "&rsaquo;",
	      "ð": "&rscr;",
	      "â": "&rtimes;",
	      "â¹": "&triangleright;",
	      "â§": "&rtriltri;",
	      "â¥¨": "&ruluhar;",
	      "â": "&rx;",
	      "Å": "&sacute;",
	      "âª´": "&scE;",
	      "âª¸": "&succapprox;",
	      "Å¡": "&scaron;",
	      "Å": "&scedil;",
	      "Å": "&scirc;",
	      "âª¶": "&succneqq;",
	      "âªº": "&succnapprox;",
	      "â©": "&succnsim;",
	      "â¨": "&scpolint;",
	      "Ñ": "&scy;",
	      "â": "&sdot;",
	      "â©¦": "&sdote;",
	      "â": "&seArr;",
	      "Â§": "&sect;",
	      ";": "&semi;",
	      "â¤©": "&tosa;",
	      "â¶": "&sext;",
	      "ð°": "&sfr;",
	      "â¯": "&sharp;",
	      "Ñ": "&shchcy;",
	      "Ñ": "&shcy;",
	      "Â­": "&shy;",
	      "Ï": "&sigma;",
	      "Ï": "&varsigma;",
	      "â©ª": "&simdot;",
	      "âª": "&simg;",
	      "âª ": "&simgE;",
	      "âª": "&siml;",
	      "âª": "&simlE;",
	      "â": "&simne;",
	      "â¨¤": "&simplus;",
	      "â¥²": "&simrarr;",
	      "â¨³": "&smashp;",
	      "â§¤": "&smeparsl;",
	      "â£": "&ssmile;",
	      "âªª": "&smt;",
	      "âª¬": "&smte;",
	      "âª¬ï¸": "&smtes;",
	      "Ñ": "&softcy;",
	      "/": "&sol;",
	      "â§": "&solb;",
	      "â¿": "&solbar;",
	      "ð¤": "&sopf;",
	      "â ": "&spadesuit;",
	      "âï¸": "&sqcaps;",
	      "âï¸": "&sqcups;",
	      "ð": "&sscr;",
	      "â": "&star;",
	      "â": "&subset;",
	      "â«": "&subseteqq;",
	      "âª½": "&subdot;",
	      "â«": "&subedot;",
	      "â«": "&submult;",
	      "â«": "&subsetneqq;",
	      "â": "&subsetneq;",
	      "âª¿": "&subplus;",
	      "â¥¹": "&subrarr;",
	      "â«": "&subsim;",
	      "â«": "&subsub;",
	      "â«": "&subsup;",
	      "âª": "&sung;",
	      "Â¹": "&sup1;",
	      "Â²": "&sup2;",
	      "Â³": "&sup3;",
	      "â«": "&supseteqq;",
	      "âª¾": "&supdot;",
	      "â«": "&supdsub;",
	      "â«": "&supedot;",
	      "â": "&suphsol;",
	      "â«": "&suphsub;",
	      "â¥»": "&suplarr;",
	      "â«": "&supmult;",
	      "â«": "&supsetneqq;",
	      "â": "&supsetneq;",
	      "â«": "&supplus;",
	      "â«": "&supsim;",
	      "â«": "&supsub;",
	      "â«": "&supsup;",
	      "â": "&swArr;",
	      "â¤ª": "&swnwar;",
	      "Ã": "&szlig;",
	      "â": "&target;",
	      "Ï": "&tau;",
	      "Å¥": "&tcaron;",
	      "Å£": "&tcedil;",
	      "Ñ": "&tcy;",
	      "â": "&telrec;",
	      "ð±": "&tfr;",
	      "Î¸": "&theta;",
	      "Ï": "&vartheta;",
	      "Ã¾": "&thorn;",
	      "Ã": "&times;",
	      "â¨±": "&timesbar;",
	      "â¨°": "&timesd;",
	      "â¶": "&topbot;",
	      "â«±": "&topcir;",
	      "ð¥": "&topf;",
	      "â«": "&topfork;",
	      "â´": "&tprime;",
	      "âµ": "&utri;",
	      "â": "&trie;",
	      "â¬": "&tridot;",
	      "â¨º": "&triminus;",
	      "â¨¹": "&triplus;",
	      "â§": "&trisb;",
	      "â¨»": "&tritime;",
	      "â¢": "&trpezium;",
	      "ð": "&tscr;",
	      "Ñ": "&tscy;",
	      "Ñ": "&tshcy;",
	      "Å§": "&tstrok;",
	      "â¥£": "&uHar;",
	      "Ãº": "&uacute;",
	      "Ñ": "&ubrcy;",
	      "Å­": "&ubreve;",
	      "Ã»": "&ucirc;",
	      "Ñ": "&ucy;",
	      "Å±": "&udblac;",
	      "â¥¾": "&ufisht;",
	      "ð²": "&ufr;",
	      "Ã¹": "&ugrave;",
	      "â": "&uhblk;",
	      "â": "&ulcorner;",
	      "â": "&ulcrop;",
	      "â¸": "&ultri;",
	      "Å«": "&umacr;",
	      "Å³": "&uogon;",
	      "ð¦": "&uopf;",
	      "Ï": "&upsilon;",
	      "â": "&uuarr;",
	      "â": "&urcorner;",
	      "â": "&urcrop;",
	      "Å¯": "&uring;",
	      "â¹": "&urtri;",
	      "ð": "&uscr;",
	      "â°": "&utdot;",
	      "Å©": "&utilde;",
	      "Ã¼": "&uuml;",
	      "â¦§": "&uwangle;",
	      "â«¨": "&vBar;",
	      "â«©": "&vBarv;",
	      "â¦": "&vangrt;",
	      "âï¸": "&vsubne;",
	      "â«ï¸": "&vsubnE;",
	      "âï¸": "&vsupne;",
	      "â«ï¸": "&vsupnE;",
	      "Ð²": "&vcy;",
	      "â»": "&veebar;",
	      "â": "&veeeq;",
	      "â®": "&vellip;",
	      "ð³": "&vfr;",
	      "ð§": "&vopf;",
	      "ð": "&vscr;",
	      "â¦": "&vzigzag;",
	      "Åµ": "&wcirc;",
	      "â©": "&wedbar;",
	      "â": "&wedgeq;",
	      "â": "&wp;",
	      "ð´": "&wfr;",
	      "ð¨": "&wopf;",
	      "ð": "&wscr;",
	      "ðµ": "&xfr;",
	      "Î¾": "&xi;",
	      "â»": "&xnis;",
	      "ð©": "&xopf;",
	      "ð": "&xscr;",
	      "Ã½": "&yacute;",
	      "Ñ": "&yacy;",
	      "Å·": "&ycirc;",
	      "Ñ": "&ycy;",
	      "Â¥": "&yen;",
	      "ð¶": "&yfr;",
	      "Ñ": "&yicy;",
	      "ðª": "&yopf;",
	      "ð": "&yscr;",
	      "Ñ": "&yucy;",
	      "Ã¿": "&yuml;",
	      "Åº": "&zacute;",
	      "Å¾": "&zcaron;",
	      "Ð·": "&zcy;",
	      "Å¼": "&zdot;",
	      "Î¶": "&zeta;",
	      "ð·": "&zfr;",
	      "Ð¶": "&zhcy;",
	      "â": "&zigrarr;",
	      "ð«": "&zopf;",
	      "ð": "&zscr;",
	      "â": "&zwj;",
	      "â": "&zwnj;"
	    }
	  }
	};
	var namedReferences = /*#__PURE__*/Object.defineProperty({
	  bodyRegExps: bodyRegExps,
	  namedReferences: namedReferences_1
	}, '__esModule', {
	  value: true
	});

	var RangeError$1 = global$1.RangeError;
	var fromCharCode = String.fromCharCode;
	// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing
	var $fromCodePoint = String.fromCodePoint;
	var join = functionUncurryThis([].join);

	// length should be 1, old FF problem
	var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;

	// `String.fromCodePoint` method
	// https://tc39.es/ecma262/#sec-string.fromcodepoint
	_export({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  fromCodePoint: function fromCodePoint(x) {
	    var elements = [];
	    var length = arguments.length;
	    var i = 0;
	    var code;
	    while (length > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError$1(code + ' is not a valid code point');
	      elements[i] = code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);
	    } return join(elements, '');
	  }
	});

	var codeAt = stringMultibyte.codeAt;

	// `String.prototype.codePointAt` method
	// https://tc39.es/ecma262/#sec-string.prototype.codepointat
	_export({ target: 'String', proto: true }, {
	  codePointAt: function codePointAt(pos) {
	    return codeAt(this, pos);
	  }
	});

	var fromCodePoint = String.fromCodePoint || function (astralCodePoint) {
	  return String.fromCharCode(Math.floor((astralCodePoint - 65536) / 1024) + 55296, (astralCodePoint - 65536) % 1024 + 56320);
	};

	var getCodePoint = String.prototype.codePointAt ? function (input, position) {
	  return input.codePointAt(position);
	} : function (input, position) {
	  return (input.charCodeAt(position) - 55296) * 1024 + input.charCodeAt(position + 1) - 56320 + 65536;
	};
	var highSurrogateFrom = 55296;
	var highSurrogateTo = 56319;
	var surrogatePairs = /*#__PURE__*/Object.defineProperty({
	  fromCodePoint: fromCodePoint,
	  getCodePoint: getCodePoint,
	  highSurrogateFrom: highSurrogateFrom,
	  highSurrogateTo: highSurrogateTo
	}, '__esModule', {
	  value: true
	});

	var __assign = commonjsGlobal && commonjsGlobal.__assign || function () {
	  __assign = Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	      s = arguments[i];

	      for (var p in s) {
	        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	      }
	    }

	    return t;
	  };

	  return __assign.apply(this, arguments);
	};

	var allNamedReferences = __assign(__assign({}, namedReferences.namedReferences), {
	  all: namedReferences.namedReferences.html5
	});

	var encodeRegExps = {
	  specialChars: /[<>'"&]/g,
	  nonAscii: /(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
	  nonAsciiPrintable: /(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
	  extensive: /(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g
	};
	var defaultEncodeOptions = {
	  mode: 'specialChars',
	  level: 'all',
	  numeric: 'decimal'
	};
	/** Encodes all the necessary (specified by `level`) characters in the text */

	function encode(text, _a) {
	  var _b = _a === void 0 ? defaultEncodeOptions : _a,
	      _c = _b.mode,
	      mode = _c === void 0 ? 'specialChars' : _c,
	      _d = _b.numeric,
	      numeric = _d === void 0 ? 'decimal' : _d,
	      _e = _b.level,
	      level = _e === void 0 ? 'all' : _e;

	  if (!text) {
	    return '';
	  }

	  var encodeRegExp = encodeRegExps[mode];
	  var references = allNamedReferences[level].characters;
	  var isHex = numeric === 'hexadecimal';
	  encodeRegExp.lastIndex = 0;

	  var _b = encodeRegExp.exec(text);

	  var _c;

	  if (_b) {
	    _c = '';
	    var _d = 0;

	    do {
	      if (_d !== _b.index) {
	        _c += text.substring(_d, _b.index);
	      }

	      var _e = _b[0];
	      var result_1 = references[_e];

	      if (!result_1) {
	        var code_1 = _e.length > 1 ? surrogatePairs.getCodePoint(_e, 0) : _e.charCodeAt(0);
	        result_1 = (isHex ? '&#x' + code_1.toString(16) : '&#' + code_1) + ';';
	      }

	      _c += result_1;
	      _d = _b.index + _e.length;
	    } while (_b = encodeRegExp.exec(text));

	    if (_d !== text.length) {
	      _c += text.substring(_d);
	    }
	  } else {
	    _c = text;
	  }

	  return _c;
	}

	var encode_1 = encode;
	var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
	var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
	var baseDecodeRegExps = {
	  xml: {
	    strict: strict,
	    attribute: attribute,
	    body: namedReferences.bodyRegExps.xml
	  },
	  html4: {
	    strict: strict,
	    attribute: attribute,
	    body: namedReferences.bodyRegExps.html4
	  },
	  html5: {
	    strict: strict,
	    attribute: attribute,
	    body: namedReferences.bodyRegExps.html5
	  }
	};

	__assign(__assign({}, baseDecodeRegExps), {
	  all: baseDecodeRegExps.html5
	});

	var colors = {
	  reset: 'orange',
	  black: 'black',
	  red: 'red',
	  green: 'green',
	  yellow: 'orange',
	  blue: 'blue',
	  magenta: 'magenta',
	  cyan: 'cyan',
	  gray: 'gray',
	  lightgrey: 'lightgrey',
	  darkgrey: 'darkgrey'
	};
	var anserMap = {
	  'ansi-bright-black': 'black',
	  'ansi-bright-yellow': 'yellow',
	  'ansi-yellow': 'yellow',
	  'ansi-bright-green': 'green',
	  'ansi-green': 'green',
	  'ansi-bright-cyan': 'cyan',
	  'ansi-cyan': 'cyan',
	  'ansi-bright-red': 'red',
	  'ansi-red': 'red',
	  'ansi-bright-magenta': 'magenta',
	  'ansi-magenta': 'magenta',
	  'ansi-white': 'darkgrey'
	};
	function generateAnsiHTML(txt) {
	  var arr = new lib().ansiToJson(encode_1(txt), {
	    use_classes: true
	  });
	  var result = '';
	  var open = false;

	  for (var index = 0; index < arr.length; ++index) {
	    var c = arr[index];
	    var content = c.content;
	    var fg = c.fg;
	    var contentParts = content.split('\n');

	    for (var j = 0; j < contentParts.length; ++j) {
	      if (!open) {
	        result += '<span data-ansi-line="true">';
	        open = true;
	      }

	      var part = contentParts[j].replace('\r', '');
	      var color = colors[anserMap[fg]];

	      if (color != null) {
	        result += "<span style=\"color: ".concat(color, ";\">").concat(part, "</span>");
	      } else {
	        if (fg != null) {
	          console.log('Missing color mapping: ', fg);
	        }

	        result += "<span>".concat(part, "</span>");
	      }

	      if (j < contentParts.length - 1) {
	        result += '</span>';
	        open = false;
	        result += '<br/>';
	      }
	    }
	  }

	  if (open) {
	    result += '</span>';
	  }

	  return result;
	}
	function removeEmpty(obj) {
	  if (_typeof(obj) !== 'object') {
	    return obj;
	  }

	  return Object.fromEntries(Object.entries(obj).filter(function (_ref) {
	    var _ref2 = _slicedToArray(_ref, 2),
	        v = _ref2[1];

	    return v != null;
	  }).map(function (_ref3) {
	    var _ref4 = _slicedToArray(_ref3, 2),
	        k = _ref4[0],
	        v = _ref4[1];

	    if (Array.isArray(v)) {
	      return [k, v.map(removeEmpty)];
	    }

	    return [k, _typeof(v) === 'object' ? removeEmpty(v) : v];
	  }));
	}

	function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	var QueryRenderer = /*#__PURE__*/function (_React$Component) {
	  _inherits(QueryRenderer, _React$Component);

	  var _super = _createSuper$1(QueryRenderer);

	  function QueryRenderer(props) {
	    var _this;

	    _classCallCheck$1(this, QueryRenderer);

	    _this = _super.call(this, props);
	    _this.state = {};
	    _this.mutexObj = {};
	    return _this;
	  }

	  _createClass$1(QueryRenderer, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this$props = this.props,
	          query = _this$props.query,
	          queries = _this$props.queries;

	      if (query) {
	        this.load(query);
	      }

	      if (queries) {
	        this.loadQueries(queries);
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      var _this$props2 = this.props,
	          query = _this$props2.query,
	          queries = _this$props2.queries,
	          render = _this$props2.render,
	          cubejsApi = _this$props2.cubejsApi,
	          loadSql = _this$props2.loadSql,
	          updateOnlyOnStateChange = _this$props2.updateOnlyOnStateChange;

	      if (!updateOnlyOnStateChange) {
	        return true;
	      }

	      return !equals(nextProps.query, query) || !equals(nextProps.queries, queries) || (nextProps.render == null || render == null) && nextProps.render !== render || nextProps.cubejsApi !== cubejsApi || nextProps.loadSql !== loadSql || !equals(nextState, this.state) || nextProps.updateOnlyOnStateChange !== updateOnlyOnStateChange;
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var _this$props3 = this.props,
	          query = _this$props3.query,
	          queries = _this$props3.queries;

	      if (!equals(prevProps.query, query)) {
	        this.load(query);
	      }

	      if (!equals(prevProps.queries, queries)) {
	        this.loadQueries(queries);
	      }
	    }
	  }, {
	    key: "cubejsApi",
	    value: function cubejsApi() {
	      // eslint-disable-next-line react/destructuring-assignment
	      return this.props.cubejsApi || this.context && this.context.cubejsApi;
	    }
	  }, {
	    key: "load",
	    value: function load(query) {
	      var _this2 = this;

	      var resetResultSetOnChange = this.props.resetResultSetOnChange;
	      this.setState(_objectSpread$6({
	        isLoading: true,
	        error: null,
	        sqlQuery: null
	      }, resetResultSetOnChange ? {
	        resultSet: null
	      } : {}));
	      var loadSql = this.props.loadSql;
	      var cubejsApi = this.cubejsApi();

	      if (query && isQueryPresent(query)) {
	        if (loadSql === 'only') {
	          cubejsApi.sql(query, {
	            mutexObj: this.mutexObj,
	            mutexKey: 'sql'
	          }).then(function (sqlQuery) {
	            return _this2.setState({
	              sqlQuery: sqlQuery,
	              error: null,
	              isLoading: false
	            });
	          })["catch"](function (error) {
	            return _this2.setState(_objectSpread$6(_objectSpread$6({}, resetResultSetOnChange ? {
	              resultSet: null
	            } : {}), {}, {
	              error: error,
	              isLoading: false
	            }));
	          });
	        } else if (loadSql) {
	          Promise.all([cubejsApi.sql(query, {
	            mutexObj: this.mutexObj,
	            mutexKey: 'sql'
	          }), cubejsApi.load(query, {
	            mutexObj: this.mutexObj,
	            mutexKey: 'query'
	          })]).then(function (_ref) {
	            var _ref2 = _slicedToArray(_ref, 2),
	                sqlQuery = _ref2[0],
	                resultSet = _ref2[1];

	            return _this2.setState({
	              sqlQuery: sqlQuery,
	              resultSet: resultSet,
	              error: null,
	              isLoading: false
	            });
	          })["catch"](function (error) {
	            return _this2.setState(_objectSpread$6(_objectSpread$6({}, resetResultSetOnChange ? {
	              resultSet: null
	            } : {}), {}, {
	              error: error,
	              isLoading: false
	            }));
	          });
	        } else {
	          cubejsApi.load(query, {
	            mutexObj: this.mutexObj,
	            mutexKey: 'query'
	          }).then(function (resultSet) {
	            return _this2.setState({
	              resultSet: resultSet,
	              error: null,
	              isLoading: false
	            });
	          })["catch"](function (error) {
	            return _this2.setState(_objectSpread$6(_objectSpread$6({}, resetResultSetOnChange ? {
	              resultSet: null
	            } : {}), {}, {
	              error: error,
	              isLoading: false
	            }));
	          });
	        }
	      }
	    }
	  }, {
	    key: "loadQueries",
	    value: function loadQueries(queries) {
	      var _this3 = this;

	      var cubejsApi = this.cubejsApi();
	      var resetResultSetOnChange = this.props.resetResultSetOnChange;
	      this.setState(_objectSpread$6(_objectSpread$6({
	        isLoading: true
	      }, resetResultSetOnChange ? {
	        resultSet: null
	      } : {}), {}, {
	        error: null
	      }));
	      var resultPromises = Promise.all(toPairs(queries).map(function (_ref3) {
	        var _ref4 = _slicedToArray(_ref3, 2),
	            name = _ref4[0],
	            query = _ref4[1];

	        return cubejsApi.load(query, {
	          mutexObj: _this3.mutexObj,
	          mutexKey: name
	        }).then(function (r) {
	          return [name, r];
	        });
	      }));
	      resultPromises.then(function (resultSet) {
	        return _this3.setState({
	          resultSet: fromPairs(resultSet),
	          error: null,
	          isLoading: false
	        });
	      })["catch"](function (error) {
	        return _this3.setState(_objectSpread$6(_objectSpread$6({}, resetResultSetOnChange ? {
	          resultSet: null
	        } : {}), {}, {
	          error: error,
	          isLoading: false
	        }));
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$state = this.state,
	          error = _this$state.error,
	          queries = _this$state.queries,
	          resultSet = _this$state.resultSet,
	          isLoading = _this$state.isLoading,
	          sqlQuery = _this$state.sqlQuery;
	      var render = this.props.render;
	      var loadState = {
	        error: error ? new Error(generateAnsiHTML(error.message || error.toString())) : null,
	        resultSet: queries ? resultSet || {} : resultSet,
	        loadingState: {
	          isLoading: isLoading
	        },
	        sqlQuery: sqlQuery
	      };

	      if (render) {
	        return render(loadState);
	      }

	      return null;
	    }
	  }], [{
	    key: "isQueryPresent",
	    value: // @deprected use `isQueryPresent` from `@cubejs-client/core`
	    function isQueryPresent$1(query) {
	      return isQueryPresent(query);
	    }
	  }]);

	  return QueryRenderer;
	}(React__default['default'].Component);
	QueryRenderer.contextType = CubeContext;
	QueryRenderer.defaultProps = {
	  cubejsApi: null,
	  query: null,
	  render: null,
	  queries: null,
	  loadSql: null,
	  updateOnlyOnStateChange: false,
	  resetResultSetOnChange: true
	};

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	var _excluded$1 = ["query"];

	function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	var QueryRendererWithTotals = function QueryRendererWithTotals(_ref) {
	  var query = _ref.query,
	      restProps = _objectWithoutProperties(_ref, _excluded$1);

	  return /*#__PURE__*/React__default['default'].createElement(QueryRenderer, _extends({
	    queries: {
	      totals: _objectSpread$5(_objectSpread$5({}, query), {}, {
	        dimensions: [],
	        timeDimensions: query.timeDimensions ? query.timeDimensions.map(function (td) {
	          return _objectSpread$5(_objectSpread$5({}, td), {}, {
	            granularity: null
	          });
	        }) : undefined
	      }),
	      main: query
	    }
	  }, restProps));
	};

	QueryRendererWithTotals.defaultProps = {
	  query: null,
	  render: null,
	  queries: null,
	  loadSql: null
	};

	function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	var granularities = [{
	  name: undefined,
	  title: 'w/o grouping'
	}, {
	  name: 'second',
	  title: 'Second'
	}, {
	  name: 'minute',
	  title: 'Minute'
	}, {
	  name: 'hour',
	  title: 'Hour'
	}, {
	  name: 'day',
	  title: 'Day'
	}, {
	  name: 'week',
	  title: 'Week'
	}, {
	  name: 'month',
	  title: 'Month'
	}, {
	  name: 'quarter',
	  title: 'Quarter'
	}, {
	  name: 'year',
	  title: 'Year'
	}];

	var QueryBuilder = /*#__PURE__*/function (_React$Component) {
	  _inherits(QueryBuilder, _React$Component);

	  var _super = _createSuper(QueryBuilder);

	  function QueryBuilder(props) {
	    var _this;

	    _classCallCheck$1(this, QueryBuilder);

	    _this = _super.call(this, props);

	    _defineProperty(_assertThisInitialized(_this), "fetchMeta", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	      var meta, metaError, metaErrorStack, _error$response, _error$response$stack;

	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (_this.cubejsApi()) {
	                _context.next = 2;
	                break;
	              }

	              return _context.abrupt("return");

	            case 2:
	              metaError = null;
	              metaErrorStack = null;
	              _context.prev = 4;

	              _this.setState({
	                isFetchingMeta: true
	              });

	              _context.next = 8;
	              return _this.cubejsApi().meta();

	            case 8:
	              meta = _context.sent;
	              _context.next = 15;
	              break;

	            case 11:
	              _context.prev = 11;
	              _context.t0 = _context["catch"](4);
	              metaError = _context.t0;
	              metaErrorStack = ((_error$response = _context.t0.response) === null || _error$response === void 0 ? void 0 : (_error$response$stack = _error$response.stack) === null || _error$response$stack === void 0 ? void 0 : _error$response$stack.replace(_context.t0.message || '', '')) || '';

	            case 15:
	              _this.setState({
	                meta: meta,
	                metaError: metaError ? new Error(generateAnsiHTML(metaError.message || metaError.toString())) : null,
	                metaErrorStack: metaErrorStack,
	                isFetchingMeta: false
	              }, function () {
	                // Run update query to force viz state update
	                // This will catch any new missing members, and also validate the query against the new meta
	                _this.updateQuery({});
	              });

	            case 16:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[4, 11]]);
	    })));

	    _this.state = _objectSpread$4(_objectSpread$4({
	      query: props.defaultQuery || props.query,
	      chartType: props.defaultChartType,
	      validatedQuery: props.query,
	      // deprecated, validatedQuery should not be set until after dry-run for safety
	      missingMembers: [],
	      // todo: rename to `isMetaReady`
	      isFetchingMeta: true,
	      dryRunResponse: null
	    }, props.vizState), props.initialVizState);
	    _this.mutexObj = {};
	    _this.orderMembersOrderKeys = [];
	    return _this;
	  }

	  _createClass$1(QueryBuilder, [{
	    key: "componentDidMount",
	    value: function () {
	      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	        return regenerator.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                this.prevContext = this.context;
	                _context2.next = 3;
	                return this.fetchMeta();

	              case 3:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function componentDidMount() {
	        return _componentDidMount.apply(this, arguments);
	      }

	      return componentDidMount;
	    }()
	  }, {
	    key: "componentDidUpdate",
	    value: function () {
	      var _componentDidUpdate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(prevProps) {
	        var _this$prevContext,
	            _this$context,
	            _this2 = this;

	        var _this$props, schemaVersion, onSchemaChange, meta, newMeta;

	        return regenerator.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                _this$props = this.props, schemaVersion = _this$props.schemaVersion, onSchemaChange = _this$props.onSchemaChange;
	                meta = this.state.meta;

	                if (!(((_this$prevContext = this.prevContext) === null || _this$prevContext === void 0 ? void 0 : _this$prevContext.cubejsApi) !== ((_this$context = this.context) === null || _this$context === void 0 ? void 0 : _this$context.cubejsApi))) {
	                  _context4.next = 6;
	                  break;
	                }

	                this.prevContext = this.context;
	                _context4.next = 6;
	                return this.fetchMeta();

	              case 6:
	                if (!(prevProps.schemaVersion !== schemaVersion)) {
	                  _context4.next = 17;
	                  break;
	                }

	                _context4.prev = 7;
	                _context4.next = 10;
	                return this.cubejsApi().meta();

	              case 10:
	                newMeta = _context4.sent;

	                if (!equals(newMeta, meta) && typeof onSchemaChange === 'function') {
	                  onSchemaChange({
	                    schemaVersion: schemaVersion,
	                    refresh: function () {
	                      var _refresh = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
	                        return regenerator.wrap(function _callee3$(_context3) {
	                          while (1) {
	                            switch (_context3.prev = _context3.next) {
	                              case 0:
	                                _context3.next = 2;
	                                return _this2.fetchMeta();

	                              case 2:
	                              case "end":
	                                return _context3.stop();
	                            }
	                          }
	                        }, _callee3);
	                      }));

	                      function refresh() {
	                        return _refresh.apply(this, arguments);
	                      }

	                      return refresh;
	                    }()
	                  });
	                }

	                _context4.next = 17;
	                break;

	              case 14:
	                _context4.prev = 14;
	                _context4.t0 = _context4["catch"](7);
	                // eslint-disable-next-line
	                this.setState({
	                  metaError: _context4.t0
	                });

	              case 17:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this, [[7, 14]]);
	      }));

	      function componentDidUpdate(_x) {
	        return _componentDidUpdate.apply(this, arguments);
	      }

	      return componentDidUpdate;
	    }()
	  }, {
	    key: "cubejsApi",
	    value: function cubejsApi() {
	      var cubejsApi = this.props.cubejsApi; // eslint-disable-next-line react/destructuring-assignment

	      return cubejsApi || this.context && this.context.cubejsApi;
	    }
	  }, {
	    key: "getMissingMembers",
	    value: function getMissingMembers(query, meta) {
	      if (!meta) {
	        return [];
	      }

	      return getQueryMembers(query).map(function (member) {
	        var resolvedMember = meta.resolveMember(member, ['measures', 'dimensions', 'segments']);

	        if (resolvedMember.error) {
	          return member;
	        }

	        return false;
	      }).filter(Boolean);
	    }
	  }, {
	    key: "isQueryPresent",
	    value: function isQueryPresent() {
	      var query = this.state.query;
	      return QueryRenderer.isQueryPresent(query);
	    }
	  }, {
	    key: "prepareRenderProps",
	    value: function prepareRenderProps(queryRendererProps) {
	      var _this3 = this;

	      var getName = function getName(member) {
	        return member.name;
	      };

	      var toTimeDimension = function toTimeDimension(member) {
	        var rangeSelection = member.compareDateRange ? {
	          compareDateRange: member.compareDateRange
	        } : {
	          dateRange: member.dateRange
	        };
	        return removeEmpty(_objectSpread$4({
	          dimension: member.dimension.name,
	          granularity: member.granularity
	        }, rangeSelection));
	      };

	      var toFilter = function toFilter(member) {
	        var _member$member, _member$dimension;

	        return {
	          member: ((_member$member = member.member) === null || _member$member === void 0 ? void 0 : _member$member.name) || ((_member$dimension = member.dimension) === null || _member$dimension === void 0 ? void 0 : _member$dimension.name),
	          operator: member.operator,
	          values: member.values
	        };
	      };

	      var updateMethods = function updateMethods(memberType) {
	        var toQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getName;
	        return {
	          add: function add(member) {
	            var query = _this3.state.query;

	            _this3.updateQuery(_defineProperty({}, memberType, (query[memberType] || []).concat(toQuery(member))));
	          },
	          remove: function remove(member) {
	            var query = _this3.state.query;
	            return _this3.updateQuery(_defineProperty({}, memberType, (query[memberType] || []).filter(function (_, index) {
	              return index !== member.index;
	            })));
	          },
	          update: function update(member, updateWith) {
	            var query = _this3.state.query;
	            var members = (query[memberType] || []).concat([]);
	            members.splice(member.index, 1, toQuery(updateWith));
	            return _this3.updateQuery(_defineProperty({}, memberType, members));
	          }
	        };
	      };

	      var _this$state = this.state,
	          meta = _this$state.meta,
	          metaError = _this$state.metaError,
	          query = _this$state.query,
	          queryError = _this$state.queryError,
	          chartType = _this$state.chartType,
	          pivotConfig = _this$state.pivotConfig,
	          validatedQuery = _this$state.validatedQuery,
	          missingMembers = _this$state.missingMembers,
	          isFetchingMeta = _this$state.isFetchingMeta,
	          dryRunResponse = _this$state.dryRunResponse,
	          metaErrorStack = _this$state.metaErrorStack;
	      var flatFilters = uniqBy(function (filter) {
	        return "".concat(prop('member', filter)).concat(prop('operator', filter));
	      }, flattenFilters(meta && query.filters || []).map(function (filter) {
	        return _objectSpread$4(_objectSpread$4({}, filter), {}, {
	          member: filter.member || filter.dimension
	        });
	      }));
	      var filters = flatFilters.map(function (m, i) {
	        return _objectSpread$4(_objectSpread$4({}, m), {}, {
	          dimension: meta.resolveMember(m.member || m.dimension, ['dimensions', 'measures']),
	          operators: meta.filterOperatorsForMember(m.member || m.dimension, ['dimensions', 'measures']),
	          index: i
	        });
	      });
	      var measures = QueryBuilder.resolveMember('measures', this.state);
	      var dimensions = QueryBuilder.resolveMember('dimensions', this.state);
	      var timeDimensions = QueryBuilder.resolveMember('timeDimensions', this.state);
	      var segments = (meta && query.segments || []).map(function (m, i) {
	        return _objectSpread$4({
	          index: i
	        }, meta.resolveMember(m, 'segments'));
	      });
	      var availableMeasures = [];
	      var availableDimensions = [];
	      var availableSegments = [];
	      var availableFilterMembers = [];
	      var availableMembers = (meta === null || meta === void 0 ? void 0 : meta.membersGroupedByCube()) || {
	        measures: [],
	        dimensions: [],
	        segments: [],
	        timeDimensions: []
	      };

	      if (meta) {
	        availableMeasures = meta.membersForQuery(query, 'measures');
	        availableDimensions = meta.membersForQuery(query, 'dimensions');
	        availableSegments = meta.membersForQuery(query, 'segments');
	        var indexedMeasures = indexBy(prop('cubeName'), availableMembers.measures);
	        var indexedDimensions = indexBy(prop('cubeName'), availableMembers.dimensions);
	        var cubeNames = uniq([].concat(_toConsumableArray(Object.keys(indexedMeasures)), _toConsumableArray(Object.keys(indexedDimensions)))).sort();
	        availableFilterMembers = cubeNames.map(function (name) {
	          var _indexedMeasures$name, _indexedDimensions$na;

	          var cube = indexedMeasures[name] || indexedDimensions[name];
	          return _objectSpread$4(_objectSpread$4({}, cube), {}, {
	            members: [].concat(_toConsumableArray((_indexedMeasures$name = indexedMeasures[name]) === null || _indexedMeasures$name === void 0 ? void 0 : _indexedMeasures$name.members), _toConsumableArray((_indexedDimensions$na = indexedDimensions[name]) === null || _indexedDimensions$na === void 0 ? void 0 : _indexedDimensions$na.members)).sort(function (a, b) {
	              return a.shortTitle > b.shortTitle ? 1 : -1;
	            })
	          });
	        });
	      }

	      var activeOrder = Array.isArray(query.order) ? Object.fromEntries(query.order) : query.order;
	      var members = [].concat(_toConsumableArray(measures), _toConsumableArray(dimensions), _toConsumableArray(timeDimensions.map(function (_ref2) {
	        var dimension = _ref2.dimension;
	        return dimension;
	      })));
	      var orderMembers = uniqBy(prop('id'), _toConsumableArray(members.map(function (_ref3) {
	        var name = _ref3.name,
	            title = _ref3.title;
	        return {
	          id: name,
	          title: title,
	          order: (activeOrder === null || activeOrder === void 0 ? void 0 : activeOrder[name]) || 'none'
	        };
	      })));

	      if (this.orderMembersOrderKeys.length !== orderMembers.length) {
	        this.orderMembersOrderKeys = orderMembers.map(function (_ref4) {
	          var id = _ref4.id;
	          return id;
	        });
	      }

	      if (this.orderMembersOrderKeys.length) {
	        // Preserve order until the members change or manually re-ordered
	        // This is needed so that when an order member becomes active, it doesn't jump to the top of the list
	        orderMembers = (this.orderMembersOrderKeys || []).map(function (id) {
	          return orderMembers.find(function (member) {
	            return member.id === id;
	          });
	        });
	      }

	      return _objectSpread$4({
	        meta: meta,
	        metaError: metaError,
	        metaErrorStack: metaErrorStack,
	        query: query,
	        error: queryError,
	        // Match same name as QueryRenderer prop
	        validatedQuery: validatedQuery,
	        isQueryPresent: this.isQueryPresent(),
	        chartType: chartType,
	        measures: measures,
	        dimensions: dimensions,
	        timeDimensions: timeDimensions,
	        segments: segments,
	        filters: filters,
	        orderMembers: orderMembers,
	        availableMeasures: availableMeasures,
	        availableDimensions: availableDimensions,
	        availableTimeDimensions: availableDimensions.filter(function (m) {
	          return m.type === 'time';
	        }),
	        availableSegments: availableSegments,
	        availableMembers: availableMembers,
	        availableFilterMembers: availableFilterMembers,
	        updateQuery: function updateQuery(queryUpdate) {
	          return _this3.updateQuery(queryUpdate);
	        },
	        updateMeasures: updateMethods('measures'),
	        updateDimensions: updateMethods('dimensions'),
	        updateSegments: updateMethods('segments'),
	        updateTimeDimensions: updateMethods('timeDimensions', toTimeDimension),
	        updateFilters: updateMethods('filters', toFilter),
	        updateChartType: function updateChartType(newChartType) {
	          return _this3.updateVizState({
	            chartType: newChartType
	          });
	        },
	        updateOrder: {
	          set: function set(memberId) {
	            var newOrder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';

	            _this3.updateQuery({
	              order: orderMembers.map(function (orderMember) {
	                return _objectSpread$4(_objectSpread$4({}, orderMember), {}, {
	                  order: orderMember.id === memberId ? newOrder : orderMember.order
	                });
	              }).reduce(function (acc, _ref5) {
	                var id = _ref5.id,
	                    order = _ref5.order;
	                return order !== 'none' ? [].concat(_toConsumableArray(acc), [[id, order]]) : acc;
	              }, [])
	            });
	          },
	          update: function update(order) {
	            _this3.updateQuery({
	              order: order
	            });
	          },
	          reorder: function reorder(sourceIndex, destinationIndex) {
	            if (sourceIndex == null || destinationIndex == null) {
	              return;
	            }

	            var nextArray = moveItemInArray(orderMembers, sourceIndex, destinationIndex);
	            _this3.orderMembersOrderKeys = nextArray.map(function (_ref6) {
	              var id = _ref6.id;
	              return id;
	            });

	            _this3.updateQuery({
	              order: nextArray.reduce(function (acc, _ref7) {
	                var id = _ref7.id,
	                    order = _ref7.order;
	                return order !== 'none' ? [].concat(_toConsumableArray(acc), [[id, order]]) : acc;
	              }, [])
	            });
	          }
	        },
	        pivotConfig: pivotConfig,
	        updatePivotConfig: {
	          moveItem: function moveItem(_ref8) {
	            var sourceIndex = _ref8.sourceIndex,
	                destinationIndex = _ref8.destinationIndex,
	                sourceAxis = _ref8.sourceAxis,
	                destinationAxis = _ref8.destinationAxis;

	            _this3.updateVizState({
	              pivotConfig: movePivotItem(pivotConfig, sourceIndex, destinationIndex, sourceAxis, destinationAxis)
	            });
	          },
	          update: function update(config) {
	            var limit = config.limit;

	            _this3.updateVizState(_objectSpread$4({
	              pivotConfig: _objectSpread$4(_objectSpread$4({}, pivotConfig), config)
	            }, limit ? {
	              query: _objectSpread$4(_objectSpread$4({}, query), {}, {
	                limit: limit
	              })
	            } : null));
	          }
	        },
	        missingMembers: missingMembers,
	        refresh: this.fetchMeta,
	        isFetchingMeta: isFetchingMeta,
	        dryRunResponse: dryRunResponse
	      }, queryRendererProps);
	    }
	  }, {
	    key: "updateQuery",
	    value: function updateQuery(queryUpdate) {
	      var query = this.state.query;
	      this.updateVizState({
	        query: _objectSpread$4(_objectSpread$4({}, query), queryUpdate)
	      });
	    }
	  }, {
	    key: "updateVizState",
	    value: function () {
	      var _updateVizState = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(state) {
	        var _this4 = this;

	        var _this$props2, setQuery, setVizState, _this$state2, stateQuery, statePivotConfig, chartType, meta, finalState, vizStateSent, handleVizStateChange, runSetters, shouldFetchDryRun, response;

	        return regenerator.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _this$props2 = this.props, setQuery = _this$props2.setQuery, setVizState = _this$props2.setVizState;
	                _this$state2 = this.state, stateQuery = _this$state2.query, statePivotConfig = _this$state2.pivotConfig, chartType = _this$state2.chartType, meta = _this$state2.meta;
	                finalState = this.applyStateChangeHeuristics(state);

	                if (!finalState.query) {
	                  finalState.query = _objectSpread$4({}, stateQuery);
	                }

	                vizStateSent = null;

	                handleVizStateChange = function handleVizStateChange(currentState) {
	                  var onVizStateChanged = _this4.props.onVizStateChanged;

	                  if (onVizStateChanged) {
	                    var newVizState = pick(['chartType', 'pivotConfig', 'query'], currentState); // Don't run callbacks more than once unless the viz state has changed since last time

	                    if (!vizStateSent || !equals(vizStateSent, newVizState)) {
	                      onVizStateChanged(newVizState); // use clone to make sure we don't save object references

	                      vizStateSent = clone(newVizState);
	                    }
	                  }
	                }; // deprecated, setters replaced by onVizStateChanged


	                runSetters = function runSetters(currentState) {
	                  if (setVizState) {
	                    setVizState(pick(['chartType', 'pivotConfig', 'query'], currentState));
	                  }

	                  if (currentState.query && setQuery) {
	                    setQuery(currentState.query);
	                  }
	                };

	                if (finalState.shouldApplyHeuristicOrder) {
	                  finalState.query.order = defaultOrder(finalState.query);
	                }

	                finalState.pivotConfig = ResultSet.getNormalizedPivotConfig(finalState.query, finalState.pivotConfig !== undefined ? finalState.pivotConfig : statePivotConfig);
	                finalState.missingMembers = this.getMissingMembers(finalState.query, meta);
	                finalState.chartType = finalState.chartType || state.chartType || chartType; // deprecated

	                runSetters(_objectSpread$4(_objectSpread$4({}, state), {}, {
	                  query: finalState.query
	                })); // Update optimistically so that UI does not stutter

	                this.setState(_objectSpread$4(_objectSpread$4({}, finalState), {}, {
	                  queryError: null
	                }));
	                handleVizStateChange(finalState);
	                shouldFetchDryRun = !equals(pick(['measures', 'dimensions', 'timeDimensions'], stateQuery), pick(['measures', 'dimensions', 'timeDimensions'], finalState.query));

	                if (!(shouldFetchDryRun && isQueryPresent(finalState.query) && finalState.missingMembers.length === 0)) {
	                  _context5.next = 30;
	                  break;
	                }

	                _context5.prev = 16;
	                _context5.next = 19;
	                return this.cubejsApi().dryRun(finalState.query, {
	                  mutexObj: this.mutexObj
	                });

	              case 19:
	                response = _context5.sent;

	                if (finalState.shouldApplyHeuristicOrder) {
	                  finalState.query.order = (response.queryOrder || []).reduce(function (memo, current) {
	                    return _objectSpread$4(_objectSpread$4({}, memo), current);
	                  }, {});
	                }

	                finalState.pivotConfig = ResultSet.getNormalizedPivotConfig(response.pivotQuery, finalState.pivotConfig);
	                finalState.validatedQuery = this.validatedQuery(finalState);
	                finalState.dryRunResponse = response; // deprecated

	                if (isQueryPresent(stateQuery)) {
	                  runSetters(_objectSpread$4(_objectSpread$4({}, this.state), finalState));
	                }

	                _context5.next = 30;
	                break;

	              case 27:
	                _context5.prev = 27;
	                _context5.t0 = _context5["catch"](16);
	                this.setState({
	                  queryError: new Error(generateAnsiHTML(_context5.t0.message || _context5.t0.toString()))
	                });

	              case 30:
	                this.setState(finalState, function () {
	                  return handleVizStateChange(_this4.state);
	                });

	              case 31:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this, [[16, 27]]);
	      }));

	      function updateVizState(_x2) {
	        return _updateVizState.apply(this, arguments);
	      }

	      return updateVizState;
	    }()
	  }, {
	    key: "validatedQuery",
	    value: function validatedQuery(state) {
	      var _ref9 = state || this.state,
	          query = _ref9.query;

	      return _objectSpread$4(_objectSpread$4({}, query), {}, {
	        filters: (query.filters || []).filter(function (f) {
	          return f.operator;
	        })
	      });
	    }
	  }, {
	    key: "defaultHeuristics",
	    value: function defaultHeuristics$1(newState) {
	      var _this$state3 = this.state,
	          query = _this$state3.query,
	          sessionGranularity = _this$state3.sessionGranularity,
	          meta = _this$state3.meta;
	      return defaultHeuristics(newState, query, {
	        meta: meta,
	        sessionGranularity: sessionGranularity || 'day'
	      });
	    }
	  }, {
	    key: "applyStateChangeHeuristics",
	    value: function applyStateChangeHeuristics(newState) {
	      var _this$props3 = this.props,
	          stateChangeHeuristics = _this$props3.stateChangeHeuristics,
	          disableHeuristics = _this$props3.disableHeuristics;

	      if (disableHeuristics) {
	        return newState;
	      }

	      return stateChangeHeuristics && stateChangeHeuristics(this.state, newState) || this.defaultHeuristics(newState);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this5 = this;

	      var query = this.state.query;
	      var _this$props4 = this.props,
	          cubejsApi = _this$props4.cubejsApi,
	          _render = _this$props4.render,
	          wrapWithQueryRenderer = _this$props4.wrapWithQueryRenderer;

	      if (wrapWithQueryRenderer) {
	        return /*#__PURE__*/React__default['default'].createElement(QueryRenderer, {
	          query: query,
	          cubejsApi: cubejsApi,
	          resetResultSetOnChange: false,
	          render: function render(queryRendererProps) {
	            if (_render) {
	              return _render(_this5.prepareRenderProps(queryRendererProps));
	            }

	            return null;
	          }
	        });
	      } else {
	        if (_render) {
	          return _render(this.prepareRenderProps());
	        }

	        return null;
	      }
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: // This is an anti-pattern, only kept for backward compatibility
	    // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#anti-pattern-unconditionally-copying-props-to-state
	    function getDerivedStateFromProps(props, state) {
	      if (props.query || props.vizState) {
	        var nextState = _objectSpread$4(_objectSpread$4({}, state), props.vizState || {});

	        if (Array.isArray(props.query)) {
	          throw new Error('Array of queries is not supported.');
	        }

	        return _objectSpread$4(_objectSpread$4({}, nextState), {}, {
	          query: _objectSpread$4(_objectSpread$4({}, nextState.query), props.query || {})
	        });
	      }

	      return null;
	    }
	  }, {
	    key: "resolveMember",
	    value: function resolveMember(type, _ref10) {
	      var meta = _ref10.meta,
	          query = _ref10.query;

	      if (!meta) {
	        return [];
	      }

	      if (Array.isArray(query)) {
	        return query.reduce(function (memo, currentQuery) {
	          return memo.concat(QueryBuilder.resolveMember(type, {
	            meta: meta,
	            query: currentQuery
	          }));
	        }, []);
	      }

	      if (type === 'timeDimensions') {
	        return (query.timeDimensions || []).map(function (m, index) {
	          return _objectSpread$4(_objectSpread$4({}, m), {}, {
	            dimension: _objectSpread$4(_objectSpread$4({}, meta.resolveMember(m.dimension, 'dimensions')), {}, {
	              granularities: granularities
	            }),
	            index: index
	          });
	        });
	      }

	      return (query[type] || []).map(function (m, index) {
	        return _objectSpread$4({
	          index: index
	        }, meta.resolveMember(m, type));
	      });
	    }
	  }]);

	  return QueryBuilder;
	}(React__default['default'].Component);

	_defineProperty(QueryBuilder, "contextType", CubeContext);
	QueryBuilder.defaultProps = {
	  cubejsApi: null,
	  stateChangeHeuristics: null,
	  disableHeuristics: false,
	  render: null,
	  wrapWithQueryRenderer: true,
	  defaultChartType: 'line',
	  defaultQuery: {},
	  initialVizState: null,
	  onVizStateChanged: null,
	  // deprecated
	  query: null,
	  setQuery: null,
	  vizState: null,
	  setVizState: null
	};

	function CubeProvider(_ref) {
	  var cubejsApi = _ref.cubejsApi,
	      children = _ref.children;
	  return /*#__PURE__*/React__default['default'].createElement(CubeContext.Provider, {
	    value: {
	      cubejsApi: cubejsApi
	    }
	  }, children);
	}

	function useDeepCompareMemoize(value) {
	  var ref = React.useRef([]);

	  if (!equals(value, ref.current)) {
	    ref.current = value;
	  }

	  return ref.current;
	}

	function useIsMounted() {
	  var isMounted = React.useRef(true);
	  React.useEffect(function () {
	    return function () {
	      isMounted.current = false;
	    };
	  }, []);
	  return function () {
	    return isMounted.current;
	  };
	}

	function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function useCubeFetch(method) {
	  var _options$query;

	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var isMounted = useIsMounted();
	  var context = React.useContext(CubeContext);
	  var mutexRef = React.useRef({});

	  var _useState = React.useState({
	    isLoading: false,
	    response: null
	  }),
	      _useState2 = _slicedToArray(_useState, 2),
	      response = _useState2[0],
	      setResponse = _useState2[1];

	  var _useState3 = React.useState(null),
	      _useState4 = _slicedToArray(_useState3, 2),
	      error = _useState4[0],
	      setError = _useState4[1];

	  var _options$skip = options.skip,
	      skip = _options$skip === void 0 ? false : _options$skip;

	  function load() {
	    return _load.apply(this, arguments);
	  }

	  function _load() {
	    _load = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	      var loadOptions,
	          ignoreSkip,
	          cubejsApi,
	          query,
	          queryCondition,
	          coreOptions,
	          args,
	          _response,
	          _args = arguments;

	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              loadOptions = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
	              ignoreSkip = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;
	              cubejsApi = options.cubejsApi || (context === null || context === void 0 ? void 0 : context.cubejsApi);
	              query = loadOptions.query || options.query;
	              queryCondition = method === 'meta' ? true : query && isQueryPresent(query);

	              if (!(cubejsApi && (ignoreSkip || !skip) && queryCondition)) {
	                _context.next = 20;
	                break;
	              }

	              setError(null);
	              setResponse({
	                isLoading: true,
	                response: null
	              });
	              coreOptions = {
	                mutexObj: mutexRef.current,
	                mutexKey: method
	              };
	              args = method === 'meta' ? [coreOptions] : [query, coreOptions];
	              _context.prev = 10;
	              _context.next = 13;
	              return cubejsApi[method].apply(cubejsApi, args);

	            case 13:
	              _response = _context.sent;

	              if (isMounted()) {
	                setResponse({
	                  response: _response,
	                  isLoading: false
	                });
	              }

	              _context.next = 20;
	              break;

	            case 17:
	              _context.prev = 17;
	              _context.t0 = _context["catch"](10);

	              if (isMounted()) {
	                setError(_context.t0);
	                setResponse({
	                  isLoading: false,
	                  response: null
	                });
	              }

	            case 20:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[10, 17]]);
	    }));
	    return _load.apply(this, arguments);
	  }

	  React.useEffect(function () {
	    load();
	  }, useDeepCompareMemoize([Object.keys(((_options$query = options.query) === null || _options$query === void 0 ? void 0 : _options$query.order) || {}), options, context]));
	  return _objectSpread$3(_objectSpread$3({}, response), {}, {
	    error: error,
	    refetch: function refetch(options) {
	      return load(options, true);
	    }
	  });
	}

	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function useCubeSql(query) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  return useCubeFetch('sql', _objectSpread$2(_objectSpread$2({}, options), {}, {
	    query: query
	  }));
	}

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function useDryRun(query) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  return useCubeFetch('dryRun', _objectSpread$1(_objectSpread$1({}, options), {}, {
	    query: query
	  }));
	}

	var _excluded = ["refetch"];

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function useLazyDryRun(query) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var _useCubeFetch = useCubeFetch('dryRun', _objectSpread(_objectSpread({}, options), {}, {
	    query: query,
	    skip: true
	  })),
	      refetch = _useCubeFetch.refetch,
	      result = _objectWithoutProperties(_useCubeFetch, _excluded);

	  return [refetch, result];
	}

	function useCubeQuery(query) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var mutexRef = React.useRef({});
	  var isMounted = React.useRef(true);

	  var _useState = React.useState(null),
	      _useState2 = _slicedToArray(_useState, 2),
	      currentQuery = _useState2[0],
	      setCurrentQuery = _useState2[1];

	  var _useState3 = React.useState(false),
	      _useState4 = _slicedToArray(_useState3, 2),
	      isLoading = _useState4[0],
	      setLoading = _useState4[1];

	  var _useState5 = React.useState(null),
	      _useState6 = _slicedToArray(_useState5, 2),
	      resultSet = _useState6[0],
	      setResultSet = _useState6[1];

	  var _useState7 = React.useState(null),
	      _useState8 = _slicedToArray(_useState7, 2),
	      progress = _useState8[0],
	      setProgress = _useState8[1];

	  var _useState9 = React.useState(null),
	      _useState10 = _slicedToArray(_useState9, 2),
	      error = _useState10[0],
	      setError = _useState10[1];

	  var context = React.useContext(CubeContext);
	  var subscribeRequest = null;

	  var progressCallback = function progressCallback(_ref) {
	    var progressResponse = _ref.progressResponse;
	    return setProgress(progressResponse);
	  };

	  function fetch() {
	    return _fetch.apply(this, arguments);
	  }

	  function _fetch() {
	    _fetch = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	      var resetResultSetOnChange, cubejsApi, response;
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              resetResultSetOnChange = options.resetResultSetOnChange;
	              cubejsApi = options.cubejsApi || (context === null || context === void 0 ? void 0 : context.cubejsApi);

	              if (cubejsApi) {
	                _context2.next = 4;
	                break;
	              }

	              throw new Error('Cube.js API client is not provided');

	            case 4:
	              if (resetResultSetOnChange) {
	                setResultSet(null);
	              }

	              setError(null);
	              setLoading(true);
	              _context2.prev = 7;
	              _context2.next = 10;
	              return cubejsApi.load(query, {
	                mutexObj: mutexRef.current,
	                mutexKey: 'query',
	                progressCallback: progressCallback
	              });

	            case 10:
	              response = _context2.sent;

	              if (isMounted.current) {
	                setResultSet(response);
	                setProgress(null);
	              }

	              _context2.next = 17;
	              break;

	            case 14:
	              _context2.prev = 14;
	              _context2.t0 = _context2["catch"](7);

	              if (isMounted.current) {
	                setError(_context2.t0);
	                setResultSet(null);
	                setProgress(null);
	              }

	            case 17:
	              if (isMounted.current) {
	                setLoading(false);
	              }

	            case 18:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, null, [[7, 14]]);
	    }));
	    return _fetch.apply(this, arguments);
	  }

	  React.useEffect(function () {
	    return function () {
	      isMounted.current = false;
	    };
	  }, []);
	  React.useEffect(function () {
	    var _options$skip = options.skip,
	        skip = _options$skip === void 0 ? false : _options$skip,
	        resetResultSetOnChange = options.resetResultSetOnChange;
	    var cubejsApi = options.cubejsApi || (context === null || context === void 0 ? void 0 : context.cubejsApi);

	    if (!cubejsApi) {
	      throw new Error('Cube.js API client is not provided');
	    }

	    function loadQuery() {
	      return _loadQuery.apply(this, arguments);
	    }

	    function _loadQuery() {
	      _loadQuery = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	        return regenerator.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(!skip && isQueryPresent(query))) {
	                  _context.next = 20;
	                  break;
	                }

	                if (!areQueriesEqual(currentQuery, query)) {
	                  if (resetResultSetOnChange == null || resetResultSetOnChange) {
	                    setResultSet(null);
	                  }

	                  setCurrentQuery(query);
	                }

	                setError(null);
	                setLoading(true);
	                _context.prev = 4;

	                if (!subscribeRequest) {
	                  _context.next = 9;
	                  break;
	                }

	                _context.next = 8;
	                return subscribeRequest.unsubscribe();

	              case 8:
	                subscribeRequest = null;

	              case 9:
	                if (!options.subscribe) {
	                  _context.next = 13;
	                  break;
	                }

	                subscribeRequest = cubejsApi.subscribe(query, {
	                  mutexObj: mutexRef.current,
	                  mutexKey: 'query',
	                  progressCallback: progressCallback
	                }, function (e, result) {
	                  if (isMounted.current) {
	                    if (e) {
	                      setError(e);
	                    } else {
	                      setResultSet(result);
	                    }

	                    setLoading(false);
	                    setProgress(null);
	                  }
	                });
	                _context.next = 15;
	                break;

	              case 13:
	                _context.next = 15;
	                return fetch();

	              case 15:
	                _context.next = 20;
	                break;

	              case 17:
	                _context.prev = 17;
	                _context.t0 = _context["catch"](4);

	                if (isMounted.current) {
	                  setError(_context.t0);
	                  setResultSet(null);
	                  setLoading(false);
	                  setProgress(null);
	                }

	              case 20:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, null, [[4, 17]]);
	      }));
	      return _loadQuery.apply(this, arguments);
	    }

	    loadQuery();
	    return function () {
	      if (subscribeRequest) {
	        subscribeRequest.unsubscribe();
	        subscribeRequest = null;
	      }
	    };
	  }, useDeepCompareMemoize([query, Object.keys(query && query.order || {}), options, context]));
	  return {
	    isLoading: isLoading,
	    resultSet: resultSet,
	    error: error,
	    progress: progress,
	    previousQuery: currentQuery,
	    refetch: fetch
	  };
	}

	function useCubeMeta() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  return useCubeFetch('meta', options);
	}

	exports.CubeContext = CubeContext;
	exports.CubeProvider = CubeProvider;
	exports.QueryBuilder = QueryBuilder;
	exports.QueryRenderer = QueryRenderer;
	exports.QueryRendererWithTotals = QueryRendererWithTotals;
	exports.useCubeMeta = useCubeMeta;
	exports.useCubeQuery = useCubeQuery;
	exports.useCubeSql = useCubeSql;
	exports.useDryRun = useDryRun;
	exports.useLazyDryRun = useLazyDryRun;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cubejs-client-react.umd.js.map
