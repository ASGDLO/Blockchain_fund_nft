"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
/* eslint react-hooks/rules-of-hooks: 0 */
var provider_1 = require("@ethereum-waffle/provider");
var useCall_1 = require("./useCall");
var testing_1 = require("../testing");
var ethers_1 = require("ethers");
var ethereum_waffle_1 = require("ethereum-waffle");
var abi_1 = require("../constants/abi");
var chai_1 = require("chai");
var crypto_1 = require("crypto");
(0, chai_1.use)(ethereum_waffle_1.solidity);
var FIRST_TEST_CHAIN_ID = 1337;
var THIRD_TEST_CHAIN_ID = 31338;
var chainIds = [FIRST_TEST_CHAIN_ID, testing_1.SECOND_TEST_CHAIN_ID, THIRD_TEST_CHAIN_ID];
describe('useCall - three chains', function () {
    var chains = {};
    function extractFromChains(prop) {
        var entries = Object.entries(chains).map(function (_a) {
            var chainId = _a[0], data = _a[1];
            return [chainId, data[prop]];
        });
        var filteredEntries = entries.filter(function (_a) {
            var value = _a[1];
            return value !== undefined;
        });
        return Object.fromEntries(filteredEntries);
    }
    var _loop_1 = function (chainId) {
        var provider = new provider_1.MockProvider({ ganacheOptions: { _chainIdRpc: chainId } });
        var deployer = provider.getWallets()[0];
        chains[chainId] = {
            provider: provider,
            deployer: deployer
        };
        var mineBlock = function () { return __awaiter(void 0, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!chains[chainId].isBlockMining) return [3 /*break*/, 3];
                        chains[chainId].isBlockMining = true;
                        return [4 /*yield*/, deployer.sendTransaction({ to: ethers_1.constants.AddressZero, value: 0 })];
                    case 1:
                        tx = _a.sent();
                        return [4 /*yield*/, tx.wait()];
                    case 2:
                        _a.sent();
                        chains[chainId].isBlockMining = false;
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        chains[chainId].mineBlock = mineBlock;
    };
    for (var _i = 0, chainIds_1 = chainIds; _i < chainIds_1.length; _i++) {
        var chainId = chainIds_1[_i];
        _loop_1(chainId);
    }
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        var _i, _a, _b, chain, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _i = 0, _a = Object.entries(chains);
                    _f.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 6];
                    _b = _a[_i], chain = _b[1];
                    _c = chain;
                    return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(chain.deployer, abi_1.timestampContractABI)];
                case 2:
                    _c.timestampContract = _f.sent();
                    _d = chain;
                    return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(chain.deployer, abi_1.doublerContractABI)];
                case 3:
                    _d.doublerContract = _f.sent();
                    _e = chain;
                    return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(chain.deployer, abi_1.MultiCall)];
                case 4:
                    _e.multicallAddress = (_f.sent()).address;
                    if (chain.mineBlock) {
                        chain.mineBlockTimerId = +setInterval(chain.mineBlock, ((0, crypto_1.randomInt)(10) + 1) * 10);
                    }
                    _f.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 1];
                case 6: return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        var _i, _a, _b, chain;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    for (_i = 0, _a = Object.entries(chains); _i < _a.length; _i++) {
                        _b = _a[_i], chain = _b[1];
                        clearInterval(chain.mineBlockTimerId);
                    }
                    return [4 /*yield*/, (0, testing_1.waitUntil)(function () {
                            for (var _i = 0, _a = Object.entries(chains); _i < _a.length; _i++) {
                                var _b = _a[_i], chain = _b[1];
                                if (chain.isBlockMining) {
                                    return false;
                                }
                            }
                            return true;
                        })];
                case 1:
                    _c.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    var numberOfCalls = 100;
    var useTimestamps = function (chainId) {
        return (0, useCall_1.useCall)({
            contract: chains[chainId].timestampContract,
            method: 'getTimestamp',
            args: [numberOfCalls]
        }, { chainId: chainId });
    };
    var useDoubler = function (chainId) { return function (arr) {
        return (0, useCall_1.useCalls)(arr === undefined
            ? []
            : arr.map(function (timestamp) { return ({
                contract: chains[chainId].doublerContract,
                method: 'double',
                args: [timestamp]
            }); }), { chainId: chainId });
    }; };
    for (var num = 0; num < 5; num++) {
        it('Test #' + num, function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, result, waitForCurrent, _i, chainIds_2, chainId, timestamps, doubled, i;
            var _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, (0, testing_1.renderDAppHook)(function () {
                            var _a, _b;
                            var timestampsFirstChain = useTimestamps(FIRST_TEST_CHAIN_ID);
                            var timestampsSecondChain = useTimestamps(testing_1.SECOND_TEST_CHAIN_ID);
                            var timestampsThirdChain = useTimestamps(THIRD_TEST_CHAIN_ID);
                            var dTimestampsFirstChain = useDoubler(FIRST_TEST_CHAIN_ID)(timestampsFirstChain === null || timestampsFirstChain === void 0 ? void 0 : timestampsFirstChain.value[0]);
                            var dTimestampsSecondChain = useDoubler(testing_1.SECOND_TEST_CHAIN_ID)(timestampsSecondChain === null || timestampsSecondChain === void 0 ? void 0 : timestampsSecondChain.value[0]);
                            var dTimestampsThirdChain = useDoubler(THIRD_TEST_CHAIN_ID)(timestampsThirdChain === null || timestampsThirdChain === void 0 ? void 0 : timestampsThirdChain.value[0]);
                            return {
                                timestamps: (_a = {},
                                    _a[FIRST_TEST_CHAIN_ID] = timestampsFirstChain,
                                    _a[testing_1.SECOND_TEST_CHAIN_ID] = timestampsSecondChain,
                                    _a[THIRD_TEST_CHAIN_ID] = timestampsThirdChain,
                                    _a),
                                doubled: (_b = {},
                                    _b[FIRST_TEST_CHAIN_ID] = dTimestampsFirstChain,
                                    _b[testing_1.SECOND_TEST_CHAIN_ID] = dTimestampsSecondChain,
                                    _b[THIRD_TEST_CHAIN_ID] = dTimestampsThirdChain,
                                    _b)
                            };
                        }, {
                            config: {
                                readOnlyChainId: FIRST_TEST_CHAIN_ID,
                                readOnlyUrls: extractFromChains('provider'),
                                multicallAddresses: extractFromChains('multicallAddress'),
                                refresh: 'never'
                            }
                        })];
                    case 1:
                        _a = _f.sent(), result = _a.result, waitForCurrent = _a.waitForCurrent;
                        return [4 /*yield*/, waitForCurrent(function (value) {
                                return chainIds.every(function (chainId) {
                                    var _a;
                                    var result = (_a = value === null || value === void 0 ? void 0 : value.doubled) === null || _a === void 0 ? void 0 : _a[chainId];
                                    if ((result === null || result === void 0 ? void 0 : result.length) !== numberOfCalls) {
                                        return false;
                                    }
                                    return result.every(function (value) { return value !== undefined; });
                                });
                            })];
                    case 2:
                        _f.sent();
                        for (_i = 0, chainIds_2 = chainIds; _i < chainIds_2.length; _i++) {
                            chainId = chainIds_2[_i];
                            timestamps = result.current.timestamps[chainId];
                            doubled = result.current.doubled[chainId];
                            for (i = 0; i < ((_b = timestamps === null || timestamps === void 0 ? void 0 : timestamps.value[0]) === null || _b === void 0 ? void 0 : _b.length); i++) {
                                (0, chai_1.expect)((_d = (_c = timestamps === null || timestamps === void 0 ? void 0 : timestamps.value[0]) === null || _c === void 0 ? void 0 : _c[i]) === null || _d === void 0 ? void 0 : _d.mul(2)).to.eq((_e = doubled[i]) === null || _e === void 0 ? void 0 : _e.value[0]);
                            }
                        }
                        return [2 /*return*/];
                }
            });
        }); }).timeout(12000);
    }
});
//# sourceMappingURL=threeChains.test.js.map