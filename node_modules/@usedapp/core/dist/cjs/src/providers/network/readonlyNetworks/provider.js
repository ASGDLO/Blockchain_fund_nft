"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.ReadonlyNetworksProvider = exports.getProvidersFromConfig = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var ethers_1 = require("ethers");
var hooks_1 = require("../../../hooks");
var context_1 = require("./context");
var fromEntries_1 = require("../../../helpers/fromEntries");
var reducer_1 = require("./reducer");
var window_1 = require("../../window");
var Provider = ethers_1.providers.Provider, StaticJsonRpcProvider = ethers_1.providers.StaticJsonRpcProvider;
var getProviderFromConfig = function (urlOrProviderOrProviderFunction) {
    if (Provider.isProvider(urlOrProviderOrProviderFunction)) {
        return urlOrProviderOrProviderFunction;
    }
    if (typeof urlOrProviderOrProviderFunction === 'function') {
        return urlOrProviderOrProviderFunction();
    }
    return new StaticJsonRpcProvider(urlOrProviderOrProviderFunction);
};
var getProvidersFromConfig = function (readOnlyUrls) {
    return (0, fromEntries_1.fromEntries)(Object.entries(readOnlyUrls).map(function (_a) {
        var chainId = _a[0], urlOrProviderOrProviderFunction = _a[1];
        return [
            chainId,
            getProviderFromConfig(urlOrProviderOrProviderFunction),
        ];
    }));
};
exports.getProvidersFromConfig = getProvidersFromConfig;
function ReadonlyNetworksProvider(_a) {
    var _b = _a.providerOverrides, providerOverrides = _b === void 0 ? {} : _b, children = _a.children;
    var _c = (0, hooks_1.useConfig)(), _d = _c.readOnlyUrls, readOnlyUrls = _d === void 0 ? {} : _d, pollingInterval = _c.pollingInterval, pollingIntervals = _c.pollingIntervals;
    var isActive = (0, window_1.useWindow)().isActive;
    var _e = (0, react_1.useState)(function () { return (__assign(__assign({}, (0, exports.getProvidersFromConfig)(readOnlyUrls)), providerOverrides)); }), providers = _e[0], setProviders = _e[1];
    var _f = (0, react_1.useReducer)(reducer_1.networkStatesReducer, __assign({}, (0, fromEntries_1.fromEntries)(Object.keys(__assign(__assign({}, readOnlyUrls), providerOverrides)).map(function (chainId) { return [chainId, { nonStaticCalls: 0 }]; })))), networkStates = _f[0], dispatchNetworkState = _f[1];
    var getPollingInterval = (0, react_1.useCallback)(function (chainId) { var _a; return (_a = pollingIntervals === null || pollingIntervals === void 0 ? void 0 : pollingIntervals[chainId]) !== null && _a !== void 0 ? _a : pollingInterval; }, [
        pollingInterval,
        pollingIntervals,
    ]);
    (0, react_1.useEffect)(function () {
        setProviders(__assign(__assign({}, (0, exports.getProvidersFromConfig)(readOnlyUrls)), providerOverrides));
    }, Object.entries(readOnlyUrls).flat());
    (0, react_1.useEffect)(function () {
        for (var _i = 0, _a = Object.entries(networkStates); _i < _a.length; _i++) {
            var _b = _a[_i], chainId = _b[0], nonStaticCalls = _b[1].nonStaticCalls;
            var provider = providers[chainId];
            if (provider) {
                provider.polling = isActive && nonStaticCalls > 0;
            }
        }
    }, [networkStates, isActive]);
    (0, react_1.useEffect)(function () {
        for (var _i = 0, _a = Object.entries(providers); _i < _a.length; _i++) {
            var _b = _a[_i], chainId = _b[0], provider = _b[1];
            provider.pollingInterval = getPollingInterval(Number(chainId));
        }
    }, [providers, getPollingInterval]);
    var networks = (0, react_1.useMemo)(function () { return ({
        providers: providers,
        updateNetworkState: dispatchNetworkState
    }); }, [providers, dispatchNetworkState]);
    return (0, jsx_runtime_1.jsx)(context_1.ReadonlyNetworksContext.Provider, __assign({ value: networks }, { children: children }));
}
exports.ReadonlyNetworksProvider = ReadonlyNetworksProvider;
//# sourceMappingURL=provider.js.map