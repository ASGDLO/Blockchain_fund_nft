"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.renderWeb3Hook = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var provider_1 = require("@ethereum-waffle/provider");
var react_hooks_1 = require("@testing-library/react-hooks");
var providers_1 = require("../providers");
var utils_1 = require("./utils");
var blockNumbers_1 = require("../providers/blockNumber/blockNumbers");
var network_1 = require("../providers/network");
/**
 * A utility function for testing React hooks in useDApp ecosystem.
 *
 * It wraps a `renderHook` from `@testing-library/react-hooks`,
 * adding functionality related to:
 * - initializing web3 providers,
 * - auto-deploying multicall,
 * - adding helpers such as `mineBlock`,
 * - adding necessary useDApp context providers.
 *
 * @public
 * @param hook Hook under test
 * @param options Optional options, same as in `renderHook`
 * @returns Same as in `renderHook`, with additions of helper functions.
 */
var renderWeb3Hook = function (hook, options) { return __awaiter(void 0, void 0, void 0, function () {
    var providers, multicallAddresses, addSingleProvider, defaultProvider, readOnlyProviders, _a, _b, _i, chainIdString, chainId, defaultReadOnlyProvider, chainId, UserWrapper, _c, result, waitForNextUpdate, rerender, unmount;
    var _d, _e, _f, _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                providers = {};
                multicallAddresses = {};
                addSingleProvider = function (currentProvider) { return __awaiter(void 0, void 0, void 0, function () {
                    var chainId, multicallDeployer, mockMulticallAddresses;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, currentProvider.getNetwork()];
                            case 1:
                                chainId = (_a.sent()).chainId;
                                providers[chainId] = currentProvider;
                                multicallDeployer = (options === null || options === void 0 ? void 0 : options.multicallVersion) === 2 ? utils_1.deployMulticall2 : utils_1.deployMulticall;
                                return [4 /*yield*/, multicallDeployer(currentProvider, chainId)];
                            case 2:
                                mockMulticallAddresses = _a.sent();
                                multicallAddresses[chainId] = mockMulticallAddresses[chainId];
                                // In some occasions the block number lags behind.
                                // It leads to a situation where we try to read state of a block before the multicall contract is deployed,
                                // and it results in a failed call. So we force the provider to catch up on the block number here.
                                return [4 /*yield*/, currentProvider.getBlockNumber()];
                            case 3:
                                // In some occasions the block number lags behind.
                                // It leads to a situation where we try to read state of a block before the multicall contract is deployed,
                                // and it results in a failed call. So we force the provider to catch up on the block number here.
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                defaultProvider = (options === null || options === void 0 ? void 0 : options.mockProvider) || new provider_1.MockProvider();
                return [4 /*yield*/, addSingleProvider(defaultProvider)];
            case 1:
                _h.sent();
                readOnlyProviders = (_d = options === null || options === void 0 ? void 0 : options.readonlyMockProviders) !== null && _d !== void 0 ? _d : {};
                _a = [];
                for (_b in readOnlyProviders)
                    _a.push(_b);
                _i = 0;
                _h.label = 2;
            case 2:
                if (!(_i < _a.length)) return [3 /*break*/, 5];
                chainIdString = _a[_i];
                chainId = Number(chainIdString);
                return [4 /*yield*/, addSingleProvider(readOnlyProviders[chainId])];
            case 3:
                _h.sent();
                _h.label = 4;
            case 4:
                _i++;
                return [3 /*break*/, 2];
            case 5:
                if (!(Object.keys(readOnlyProviders).length === 0)) return [3 /*break*/, 8];
                defaultReadOnlyProvider = new provider_1.MockProvider();
                return [4 /*yield*/, addSingleProvider(defaultReadOnlyProvider)];
            case 6:
                _h.sent();
                return [4 /*yield*/, defaultReadOnlyProvider.getNetwork()];
            case 7:
                chainId = (_h.sent()).chainId;
                readOnlyProviders[chainId] = defaultReadOnlyProvider;
                _h.label = 8;
            case 8:
                UserWrapper = (_f = (_e = options === null || options === void 0 ? void 0 : options.renderHook) === null || _e === void 0 ? void 0 : _e.wrapper) !== null && _f !== void 0 ? _f : utils_1.IdentityWrapper;
                _c = (0, react_hooks_1.renderHook)(hook, {
                    wrapper: function (wrapperProps) {
                        var _a, _b;
                        return ((0, jsx_runtime_1.jsx)(providers_1.ConfigProvider, __assign({ config: {
                                pollingInterval: (_b = (_a = options === null || options === void 0 ? void 0 : options.mockProviderOptions) === null || _a === void 0 ? void 0 : _a.pollingInterval) !== null && _b !== void 0 ? _b : 200,
                                multicallVersion: options === null || options === void 0 ? void 0 : options.multicallVersion
                            } }, { children: (0, jsx_runtime_1.jsx)(providers_1.NetworkProvider, __assign({ providerOverride: defaultProvider }, { children: (0, jsx_runtime_1.jsx)(network_1.ReadonlyNetworksProvider, __assign({ providerOverrides: readOnlyProviders }, { children: (0, jsx_runtime_1.jsx)(providers_1.BlockNumberProvider, { children: (0, jsx_runtime_1.jsx)(blockNumbers_1.BlockNumbersProvider, { children: (0, jsx_runtime_1.jsx)(providers_1.MultiChainStateProvider, __assign({ multicallAddresses: multicallAddresses }, { children: (0, jsx_runtime_1.jsx)(UserWrapper, __assign({}, wrapperProps)) })) }) }) })) })) })));
                    },
                    initialProps: (_g = options === null || options === void 0 ? void 0 : options.renderHook) === null || _g === void 0 ? void 0 : _g.initialProps
                }), result = _c.result, waitForNextUpdate = _c.waitForNextUpdate, rerender = _c.rerender, unmount = _c.unmount;
                return [2 /*return*/, __assign({ result: result, defaultProvider: defaultProvider, mineBlock: function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, Promise.all(__spreadArray([defaultProvider], Object.values(readOnlyProviders), true).map(function (provider) { return (0, utils_1.mineBlock)(provider); }))];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, rerender: rerender, unmount: unmount, 
                        // do not return the waitFor* functions from `renderHook` - they are not usable after using waitForNextUpdate().
                        waitForNextUpdate: waitForNextUpdate }, (0, utils_1.getWaitUtils)(result))];
        }
    });
}); };
exports.renderWeb3Hook = renderWeb3Hook;
//# sourceMappingURL=renderWeb3Hook.js.map