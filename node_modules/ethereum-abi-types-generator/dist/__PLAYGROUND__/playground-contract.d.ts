import { ContractTransaction, BytesLike as Arrayish, BigNumber, BigNumberish } from 'ethers';
import { EthersContractContextV5 } from 'ethereum-abi-types-generator';
export declare type ContractContext = EthersContractContextV5<PlaygroundContract, PlaygroundContractMethodNames, PlaygroundContractEventsContext, PlaygroundContractEvents>;
export declare type EventFilter = {
    address?: string;
    topics?: Array<string>;
    fromBlock?: string | number;
    toBlock?: string | number;
};
export interface ContractTransactionOverrides {
    /**
     * The maximum units of gas for the transaction to use
     */
    gasLimit?: number;
    /**
     * The price (in wei) per unit of gas
     */
    gasPrice?: BigNumber | string | number | Promise<any>;
    /**
     * The nonce to use in the transaction
     */
    nonce?: number;
    /**
     * The amount to send with the transaction (i.e. msg.value)
     */
    value?: BigNumber | string | number | Promise<any>;
    /**
     * The chain ID (or network ID) to use
     */
    chainId?: number;
}
export interface ContractCallOverrides {
    /**
     * The address to execute the call as
     */
    from?: string;
    /**
     * The maximum units of gas for the transaction to use
     */
    gasLimit?: number;
}
export declare type PlaygroundContractEvents = 'Approval' | 'ApprovalForAll' | 'BaseInitialized' | 'CollectModuleWhitelisted' | 'CollectNFTDeployed' | 'CollectNFTTransferred' | 'Collected' | 'CommentCreated' | 'FollowModuleSet' | 'FollowModuleWhitelisted' | 'FollowNFTDeployed' | 'FollowNFTTransferred' | 'Followed' | 'GovernanceChanged' | 'MirrorCreated' | 'PostCreated' | 'ProfileCreated' | 'ReferenceModuleWhitelisted' | 'Transfer';
export interface PlaygroundContractEventsContext {
    Approval(...parameters: any): EventFilter;
    ApprovalForAll(...parameters: any): EventFilter;
    BaseInitialized(...parameters: any): EventFilter;
    CollectModuleWhitelisted(...parameters: any): EventFilter;
    CollectNFTDeployed(...parameters: any): EventFilter;
    CollectNFTTransferred(...parameters: any): EventFilter;
    Collected(...parameters: any): EventFilter;
    CommentCreated(...parameters: any): EventFilter;
    FollowModuleSet(...parameters: any): EventFilter;
    FollowModuleWhitelisted(...parameters: any): EventFilter;
    FollowNFTDeployed(...parameters: any): EventFilter;
    FollowNFTTransferred(...parameters: any): EventFilter;
    Followed(...parameters: any): EventFilter;
    GovernanceChanged(...parameters: any): EventFilter;
    MirrorCreated(...parameters: any): EventFilter;
    PostCreated(...parameters: any): EventFilter;
    ProfileCreated(...parameters: any): EventFilter;
    ReferenceModuleWhitelisted(...parameters: any): EventFilter;
    Transfer(...parameters: any): EventFilter;
}
export declare type PlaygroundContractMethodNames = 'new' | 'PERMITFORALL_TYPEHASH' | 'PERMIT_TYPEHASH' | 'approve' | 'balanceOf' | 'burn' | 'collect' | 'collectWithSig' | 'comment' | 'commentWithSig' | 'createProfile' | 'createProfileWithSig' | 'emitCollectNFTTransferEvent' | 'emitFollowNFTTransferEvent' | 'follow' | 'followWithSig' | 'getApproved' | 'getCollectModule' | 'getCollectNFT' | 'getContentURI' | 'getDomainSeparator' | 'getFollowModule' | 'getFollowNFT' | 'getHandle' | 'getProfile' | 'getProfileIdByHandle' | 'getPubCount' | 'getPubPointer' | 'getPublication' | 'getReferenceModule' | 'governance' | 'initialize' | 'isApprovedForAll' | 'isCollectModuleWhitelisted' | 'isFollowModuleWhitelisted' | 'isReferenceModuleWhitelisted' | 'mirror' | 'mirrorWithSig' | 'name' | 'ownerOf' | 'permit' | 'permitForAll' | 'post' | 'postWithSig' | 'safeTransferFrom' | 'safeTransferFrom' | 'setApprovalForAll' | 'setFollowModule' | 'setFollowModuleWithSig' | 'setGovernance' | 'sigNonces' | 'supportsInterface' | 'symbol' | 'tokenByIndex' | 'tokenOfOwnerByIndex' | 'tokenURI' | 'totalSupply' | 'transferFrom' | 'whitelistCollectModule' | 'whitelistFollowModule' | 'whitelistReferenceModule';
export interface ApprovalEventEmittedResponse {
    owner: string;
    approved: string;
    tokenId: BigNumberish;
}
export interface ApprovalForAllEventEmittedResponse {
    owner: string;
    operator: string;
    approved: boolean;
}
export interface BaseInitializedEventEmittedResponse {
    name: string;
    symbol: string;
}
export interface CollectModuleWhitelistedEventEmittedResponse {
    collectModule: string;
    whitelisted: boolean;
    timestamp: BigNumberish;
}
export interface CollectNFTDeployedEventEmittedResponse {
    profileId: BigNumberish;
    pubId: BigNumberish;
    collectNFT: string;
    timestamp: BigNumberish;
}
export interface CollectNFTTransferredEventEmittedResponse {
    profileId: BigNumberish;
    pubId: BigNumberish;
    collectNFTId: BigNumberish;
    from: string;
    to: string;
    timestamp: BigNumberish;
}
export interface CollectedEventEmittedResponse {
    collector: string;
    profileId: BigNumberish;
    pubId: BigNumberish;
    rootProfileId: BigNumberish;
    rootPubId: BigNumberish;
    timestamp: BigNumberish;
}
export interface CommentCreatedEventEmittedResponse {
    profileId: BigNumberish;
    pubId: BigNumberish;
    contentURI: string;
    profileIdPointed: BigNumberish;
    pubIdPointed: BigNumberish;
    collectModule: string;
    collectModuleReturnData: Arrayish;
    referenceModule: string;
    referenceModuleReturnData: Arrayish;
    timestamp: BigNumberish;
}
export interface FollowModuleSetEventEmittedResponse {
    profileId: BigNumberish;
    followModule: string;
    followModuleReturnData: Arrayish;
    timestamp: BigNumberish;
}
export interface FollowModuleWhitelistedEventEmittedResponse {
    followModule: string;
    whitelisted: boolean;
    timestamp: BigNumberish;
}
export interface FollowNFTDeployedEventEmittedResponse {
    profileId: BigNumberish;
    followNFT: string;
    timestamp: BigNumberish;
}
export interface FollowNFTTransferredEventEmittedResponse {
    profileId: BigNumberish;
    followNFTId: BigNumberish;
    from: string;
    to: string;
    timestamp: BigNumberish;
}
export interface FollowedEventEmittedResponse {
    follower: string;
    profileIds: BigNumberish[];
    timestamp: BigNumberish;
}
export interface GovernanceChangedEventEmittedResponse {
    newGovernance: string;
    timestamp: BigNumberish;
}
export interface MirrorCreatedEventEmittedResponse {
    profileId: BigNumberish;
    pubId: BigNumberish;
    profileIdPointed: BigNumberish;
    pubIdPointed: BigNumberish;
    referenceModule: string;
    referenceModuleReturnData: Arrayish;
    timestamp: BigNumberish;
}
export interface PostCreatedEventEmittedResponse {
    profileId: BigNumberish;
    pubId: BigNumberish;
    contentURI: string;
    collectModule: string;
    collectModuleReturnData: Arrayish;
    referenceModule: string;
    referenceModuleReturnData: Arrayish;
    timestamp: BigNumberish;
}
export interface ProfileCreatedEventEmittedResponse {
    profileId: BigNumberish;
    owner: string;
    handle: string;
    followModule: string;
    followModuleReturnData: Arrayish;
    timestamp: BigNumberish;
}
export interface ReferenceModuleWhitelistedEventEmittedResponse {
    referenceModule: string;
    whitelisted: boolean;
    timestamp: BigNumberish;
}
export interface TransferEventEmittedResponse {
    from: string;
    to: string;
    tokenId: BigNumberish;
}
export interface SigRequest {
    v: BigNumberish;
    r: Arrayish;
    s: Arrayish;
    deadline: BigNumberish;
}
export interface CollectWithSigRequest {
    collector: string;
    profileId: BigNumberish;
    pubId: BigNumberish;
    data: Arrayish;
    sig: SigRequest;
}
export interface CommentRequest {
    profileId: BigNumberish;
    contentURI: string;
    profileIdPointed: BigNumberish;
    pubIdPointed: BigNumberish;
    collectModule: string;
    collectModuleData: Arrayish;
    referenceModule: string;
    referenceModuleData: Arrayish;
}
export interface CommentWithSigRequest {
    profileId: BigNumberish;
    contentURI: string;
    profileIdPointed: BigNumberish;
    pubIdPointed: BigNumberish;
    collectModule: string;
    collectModuleData: Arrayish;
    referenceModule: string;
    referenceModuleData: Arrayish;
    sig: SigRequest;
}
export interface CreateProfileWithSigRequest {
    creator: string;
    handle: string;
    followModule: string;
    followModuleData: Arrayish;
    sig: SigRequest;
}
export interface FollowWithSigRequest {
    follower: string;
    profileIds: BigNumberish[];
    datas: Arrayish[];
    sig: SigRequest;
}
export interface ProfileResponse {
    pubCount: BigNumber;
    0: BigNumber;
    handle: string;
    1: string;
    followModule: string;
    2: string;
    followNFT: string;
    3: string;
}
export interface GetPubPointerResponse {
    result0: BigNumber;
    0: BigNumber;
    result1: BigNumber;
    1: BigNumber;
    length: 2;
}
export interface PublicationResponse {
    profileIdPointed: BigNumber;
    0: BigNumber;
    pubIdPointed: BigNumber;
    1: BigNumber;
    contentURI: string;
    2: string;
    referenceModule: string;
    3: string;
    collectModule: string;
    4: string;
    collectNFT: string;
    5: string;
}
export interface MirrorRequest {
    profileId: BigNumberish;
    profileIdPointed: BigNumberish;
    pubIdPointed: BigNumberish;
    referenceModule: string;
    referenceModuleData: Arrayish;
}
export interface MirrorWithSigRequest {
    profileId: BigNumberish;
    profileIdPointed: BigNumberish;
    pubIdPointed: BigNumberish;
    referenceModule: string;
    referenceModuleData: Arrayish;
    sig: SigRequest;
}
export interface PermitRequest {
    v: BigNumberish;
    r: Arrayish;
    s: Arrayish;
    deadline: BigNumberish;
}
export interface PermitForAllRequest {
    v: BigNumberish;
    r: Arrayish;
    s: Arrayish;
    deadline: BigNumberish;
}
export interface PostRequest {
    profileId: BigNumberish;
    contentURI: string;
    collectModule: string;
    collectModuleData: Arrayish;
    referenceModule: string;
    referenceModuleData: Arrayish;
}
export interface PostWithSigRequest {
    profileId: BigNumberish;
    contentURI: string;
    collectModule: string;
    collectModuleData: Arrayish;
    referenceModule: string;
    referenceModuleData: Arrayish;
    sig: SigRequest;
}
export interface SetFollowModuleWithSigRequest {
    profileId: BigNumberish;
    followModule: string;
    followModuleData: Arrayish;
    sig: SigRequest;
}
export interface PlaygroundContract {
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: constructor
     * @param followNFTImpl Type: address, Indexed: false
     * @param collectNFTImpl Type: address, Indexed: false
     */
    'new'(followNFTImpl: string, collectNFTImpl: string, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     */
    PERMITFORALL_TYPEHASH(overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     */
    PERMIT_TYPEHASH(overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param to Type: address, Indexed: false
     * @param tokenId Type: uint256, Indexed: false
     */
    approve(to: string, tokenId: BigNumberish, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param owner Type: address, Indexed: false
     */
    balanceOf(owner: string, overrides?: ContractCallOverrides): Promise<BigNumber>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     */
    burn(profileId: BigNumberish, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param pubId Type: uint256, Indexed: false
     * @param data Type: bytes, Indexed: false
     */
    collect(profileId: BigNumberish, pubId: BigNumberish, data: Arrayish, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    collectWithSig(vars: CollectWithSigRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    comment(vars: CommentRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    commentWithSig(vars: CommentWithSigRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param handle Type: string, Indexed: false
     * @param followModule Type: address, Indexed: false
     * @param followModuleData Type: bytes, Indexed: false
     */
    createProfile(handle: string, followModule: string, followModuleData: Arrayish, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    createProfileWithSig(vars: CreateProfileWithSigRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param pubId Type: uint256, Indexed: false
     * @param collectNFTId Type: uint256, Indexed: false
     * @param from Type: address, Indexed: false
     * @param to Type: address, Indexed: false
     */
    emitCollectNFTTransferEvent(profileId: BigNumberish, pubId: BigNumberish, collectNFTId: BigNumberish, from: string, to: string, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param followNFTId Type: uint256, Indexed: false
     * @param from Type: address, Indexed: false
     * @param to Type: address, Indexed: false
     */
    emitFollowNFTTransferEvent(profileId: BigNumberish, followNFTId: BigNumberish, from: string, to: string, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param profileIds Type: uint256[], Indexed: false
     * @param datas Type: bytes[], Indexed: false
     */
    follow(profileIds: BigNumberish[], datas: Arrayish[], overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    followWithSig(vars: FollowWithSigRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param tokenId Type: uint256, Indexed: false
     */
    getApproved(tokenId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param pubId Type: uint256, Indexed: false
     */
    getCollectModule(profileId: BigNumberish, pubId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param pubId Type: uint256, Indexed: false
     */
    getCollectNFT(profileId: BigNumberish, pubId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param pubId Type: uint256, Indexed: false
     */
    getContentURI(profileId: BigNumberish, pubId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     */
    getDomainSeparator(overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     */
    getFollowModule(profileId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     */
    getFollowNFT(profileId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     */
    getHandle(profileId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     */
    getProfile(profileId: BigNumberish, overrides?: ContractCallOverrides): Promise<ProfileResponse>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param handle Type: string, Indexed: false
     */
    getProfileIdByHandle(handle: string, overrides?: ContractCallOverrides): Promise<BigNumber>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     */
    getPubCount(profileId: BigNumberish, overrides?: ContractCallOverrides): Promise<BigNumber>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param pubId Type: uint256, Indexed: false
     */
    getPubPointer(profileId: BigNumberish, pubId: BigNumberish, overrides?: ContractCallOverrides): Promise<GetPubPointerResponse>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param pubId Type: uint256, Indexed: false
     */
    getPublication(profileId: BigNumberish, pubId: BigNumberish, overrides?: ContractCallOverrides): Promise<PublicationResponse>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param pubId Type: uint256, Indexed: false
     */
    getReferenceModule(profileId: BigNumberish, pubId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     */
    governance(overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param name Type: string, Indexed: false
     * @param symbol Type: string, Indexed: false
     * @param newGovernance Type: address, Indexed: false
     */
    initialize(name: string, symbol: string, newGovernance: string, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param owner Type: address, Indexed: false
     * @param operator Type: address, Indexed: false
     */
    isApprovedForAll(owner: string, operator: string, overrides?: ContractCallOverrides): Promise<boolean>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param collectModule Type: address, Indexed: false
     */
    isCollectModuleWhitelisted(collectModule: string, overrides?: ContractCallOverrides): Promise<boolean>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param followModule Type: address, Indexed: false
     */
    isFollowModuleWhitelisted(followModule: string, overrides?: ContractCallOverrides): Promise<boolean>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param referenceModule Type: address, Indexed: false
     */
    isReferenceModuleWhitelisted(referenceModule: string, overrides?: ContractCallOverrides): Promise<boolean>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    mirror(vars: MirrorRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    mirrorWithSig(vars: MirrorWithSigRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     */
    name(overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param tokenId Type: uint256, Indexed: false
     */
    ownerOf(tokenId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param spender Type: address, Indexed: false
     * @param tokenId Type: uint256, Indexed: false
     * @param sig Type: tuple, Indexed: false
     */
    permit(spender: string, tokenId: BigNumberish, sig: PermitRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param owner Type: address, Indexed: false
     * @param operator Type: address, Indexed: false
     * @param approved Type: bool, Indexed: false
     * @param sig Type: tuple, Indexed: false
     */
    permitForAll(owner: string, operator: string, approved: boolean, sig: PermitForAllRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    post(vars: PostRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    postWithSig(vars: PostWithSigRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param from Type: address, Indexed: false
     * @param to Type: address, Indexed: false
     * @param tokenId Type: uint256, Indexed: false
     */
    safeTransferFrom(from: string, to: string, tokenId: BigNumberish, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param from Type: address, Indexed: false
     * @param to Type: address, Indexed: false
     * @param tokenId Type: uint256, Indexed: false
     * @param _data Type: bytes, Indexed: false
     */
    safeTransferFrom(from: string, to: string, tokenId: BigNumberish, _data: Arrayish, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param operator Type: address, Indexed: false
     * @param approved Type: bool, Indexed: false
     */
    setApprovalForAll(operator: string, approved: boolean, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param profileId Type: uint256, Indexed: false
     * @param followModule Type: address, Indexed: false
     * @param followModuleData Type: bytes, Indexed: false
     */
    setFollowModule(profileId: BigNumberish, followModule: string, followModuleData: Arrayish, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param vars Type: tuple, Indexed: false
     */
    setFollowModuleWithSig(vars: SetFollowModuleWithSigRequest, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param newGovernance Type: address, Indexed: false
     */
    setGovernance(newGovernance: string, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param parameter0 Type: address, Indexed: false
     */
    sigNonces(parameter0: string, overrides?: ContractCallOverrides): Promise<BigNumber>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param interfaceId Type: bytes4, Indexed: false
     */
    supportsInterface(interfaceId: Arrayish, overrides?: ContractCallOverrides): Promise<boolean>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     */
    symbol(overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param index Type: uint256, Indexed: false
     */
    tokenByIndex(index: BigNumberish, overrides?: ContractCallOverrides): Promise<BigNumber>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param owner Type: address, Indexed: false
     * @param index Type: uint256, Indexed: false
     */
    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: ContractCallOverrides): Promise<BigNumber>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     * @param tokenId Type: uint256, Indexed: false
     */
    tokenURI(tokenId: BigNumberish, overrides?: ContractCallOverrides): Promise<string>;
    /**
     * Payable: false
     * Constant: true
     * StateMutability: view
     * Type: function
     */
    totalSupply(overrides?: ContractCallOverrides): Promise<BigNumber>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param from Type: address, Indexed: false
     * @param to Type: address, Indexed: false
     * @param tokenId Type: uint256, Indexed: false
     */
    transferFrom(from: string, to: string, tokenId: BigNumberish, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param collectModule Type: address, Indexed: false
     * @param whitelist Type: bool, Indexed: false
     */
    whitelistCollectModule(collectModule: string, whitelist: boolean, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param followModule Type: address, Indexed: false
     * @param whitelist Type: bool, Indexed: false
     */
    whitelistFollowModule(followModule: string, whitelist: boolean, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
    /**
     * Payable: false
     * Constant: false
     * StateMutability: nonpayable
     * Type: function
     * @param referenceModule Type: address, Indexed: false
     * @param whitelist Type: bool, Indexed: false
     */
    whitelistReferenceModule(referenceModule: string, whitelist: boolean, overrides?: ContractTransactionOverrides): Promise<ContractTransaction>;
}
