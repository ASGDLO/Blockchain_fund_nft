import { AbiItem } from '../abi-properties';
import { CommandTypes } from '../commands/enums/command-types';
import { HelpMessage } from '../commands/models/help-message';
import { ProgramOptions } from './models/program-options';
export default class Helpers {
    /**
     * Capitalize a string `hey` > `Hey`
     * @param str The value
     */
    static capitalize(str: string): string;
    /**
     * This will get all the program arguments
     */
    static getProgramArguments(): ProgramOptions;
    /**
     * Gets the help message by the command type
     * @param commandType The command type
     */
    static getHelpMessageByCommandType(commandType: CommandTypes): string;
    /**
     * Builds the help message up
     * @param helpMessage The help message object
     */
    static buildUpHelpMessage(helpMessage: HelpMessage): string;
    /**
     * Remove all white spaces
     * @param value The value
     */
    static removeAllWhiteSpace(value: string): string;
    /**
     * Deep clone a object
     * @param object The object
     */
    static deepClone<T>(object: T): T;
    /**
     * Return true if function described by abiItem never modify blockchain state
     * @param abiItem The AbiItem
     */
    static isNeverModifyBlockchainState(abiItem: AbiItem): boolean;
    /**
     * Return true if method described by abiItem accepts ether
     * @param abiItem The AbiItem
     */
    static isAcceptsEther(abiItem: AbiItem): boolean;
}
