{"version":3,"sources":["../lib/index.js"],"names":["ironStore","sealed","password","ttl","Array","isArray","Error","store","undefined","Iron","unseal","normalizePasswordForUnseal","defaults","persistent","flash","set","name","value","setFlash","unset","get","clear","seal","passwordForSeal","id","secret","startsWith","macPrefix","reduce","acc","currentPassword"],"mappings":"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","sourcesContent":["import Iron from \"@hapi/iron\";\nimport clone from \"clone\";\n\nexport default async function ironStore({ sealed, password, ttl = 0 }) {\n  if (typeof password !== \"string\" && !Array.isArray(password)) {\n    throw new Error(\n      \"iron-store: bad `password` format, expected string or array of objects\",\n    );\n  }\n\n  const store =\n    sealed !== undefined\n      ? await Iron.unseal(\n          sealed,\n          normalizePasswordForUnseal(sealed, password),\n          {\n            ...Iron.defaults,\n            ttl,\n          },\n        )\n      : { persistent: {}, flash: {} };\n\n  return {\n    set(name, value) {\n      return (store.persistent[name] = clone(value));\n    },\n    setFlash(name, value) {\n      return (store.flash[name] = clone(value));\n    },\n    unset(name) {\n      delete store.persistent[name];\n      delete store.flash[name];\n    },\n    get(name) {\n      if (name === undefined) {\n        const flash = store.flash;\n        store.flash = {};\n        return clone({\n          ...flash,\n          ...store.persistent,\n        });\n      }\n\n      if (store.flash[name] !== undefined) {\n        const value = store.flash[name];\n        delete store.flash[name];\n        return value; // no need to clone, as we already removed the reference from the flash store\n      } else {\n        return clone(store.persistent[name]);\n      }\n    },\n    clear() {\n      store.persistent = {};\n      store.flash = {};\n    },\n    seal() {\n      const passwordForSeal = Array.isArray(password)\n        ? {\n            id: password[0].id,\n            secret: password[0].password,\n          }\n        : {\n            id: 1,\n            secret: password,\n          };\n      return Iron.seal(store, passwordForSeal, { ...Iron.defaults, ttl });\n    },\n  };\n}\n\nfunction normalizePasswordForUnseal(sealed, password) {\n  if (typeof password === \"string\") {\n    // sealed data comes from a previous version of iron-store (<= 1.2.0)\n    if (sealed.startsWith(`${Iron.macPrefix}**`)) {\n      return password;\n    }\n\n    return { 1: password };\n  }\n\n  return password.reduce((acc, currentPassword) => {\n    return {\n      [currentPassword.id]: currentPassword.password,\n      ...acc,\n    };\n  }, {});\n}\n"],"file":"index.js"}