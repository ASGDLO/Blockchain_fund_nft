{"version":3,"sources":["../lib/index.js"],"names":["debug","timestampSkewSec","throwOnNoPassword","Error","throwOnNoCookieName","computeCookieMaxAge","ttl","getCookieOptions","userCookieOptions","defaultCookieOptions","httpOnly","secure","sameSite","path","maxAge","applySession","req","res","cookieName","password","cookieOptions","store","getOrCreateStore","sealed","cookie","parse","headers","session","set","get","unset","save","seal","cookieValue","serialize","length","existingSetCookie","getHeader","setHeader","destroy","clear","withIronSession","withIronSessionWrapperHandler","withIronSessionHandler","args","handlerType","ironSession","next","then","catch","err","message"],"mappings":"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","sourcesContent":["import ironStore from \"iron-store\";\nimport cookie from \"cookie\";\nimport createDebug from \"debug\";\nimport flat from \"array.prototype.flat\";\n\nconst debug = createDebug(\"next-iron-session\");\n\n// default time allowed to check for iron seal validity when ttl passed\n// see https://hapi.dev/family/iron/api/?v=6.0.0#options\nconst timestampSkewSec = 60;\n\nfunction throwOnNoPassword() {\n  throw new Error(\"next-iron-session: Missing parameter `password`\");\n}\n\nfunction throwOnNoCookieName() {\n  throw new Error(\"next-iron-session: Missing parameter `cookieName`\");\n}\n\nfunction computeCookieMaxAge(ttl) {\n  // The next line makes sure browser will expire cookies before seals are considered expired by the server.\n  // It also allows for clock difference of 60 seconds maximum between server and clients.\n  return (ttl === 0 ? 2147483647 : ttl) - timestampSkewSec;\n}\n\nfunction getCookieOptions({ userCookieOptions, ttl }) {\n  const defaultCookieOptions = {\n    httpOnly: true,\n    secure: true,\n    sameSite: \"lax\",\n    path: \"/\",\n  };\n\n  return {\n    ...defaultCookieOptions,\n    ...userCookieOptions,\n    maxAge: userCookieOptions.maxAge || computeCookieMaxAge(ttl),\n  };\n}\n\nexport async function applySession(\n  req,\n  res,\n  {\n    ttl = 15 * 24 * 3600,\n    cookieName = throwOnNoCookieName(),\n    password = throwOnNoPassword(),\n    cookieOptions: userCookieOptions = {},\n  },\n) {\n  const cookieOptions = getCookieOptions({ userCookieOptions, ttl });\n\n  const store = await getOrCreateStore({\n    sealed: cookie.parse(req.headers.cookie || \"\")[cookieName],\n    password,\n    ttl: ttl * 1000,\n  });\n\n  const session = {\n    set: store.set,\n    get: store.get,\n    unset: store.unset,\n    async save() {\n      const seal = await store.seal();\n      const cookieValue = cookie.serialize(cookieName, seal, cookieOptions);\n      if (cookieValue.length > 4096) {\n        throw new Error(\n          `next-iron-session: Cookie length is too big ${cookieValue.length}, browsers will refuse it`,\n        );\n      }\n      const existingSetCookie = flat([res.getHeader(\"set-cookie\") || []]);\n      res.setHeader(\"set-cookie\", [...existingSetCookie, cookieValue]);\n      return cookieValue;\n    },\n    destroy() {\n      store.clear();\n      const cookieValue = cookie.serialize(cookieName, \"\", {\n        ...cookieOptions,\n        maxAge: 0,\n      });\n      const existingSetCookie = flat([res.getHeader(\"set-cookie\") || []]);\n      res.setHeader(\"set-cookie\", [...existingSetCookie, cookieValue]);\n    },\n  };\n\n  req.session = session;\n}\n\nexport function withIronSession(\n  withIronSessionWrapperHandler,\n  {\n    ttl = 15 * 24 * 3600,\n    cookieName = throwOnNoCookieName(),\n    password = throwOnNoPassword(),\n    cookieOptions = {},\n  },\n) {\n  return async function withIronSessionHandler(...args) {\n    const handlerType = args[0] && args[1] ? \"api\" : \"ssr\";\n    const req = handlerType === \"api\" ? args[0] : args[0].req;\n    const res = handlerType === \"api\" ? args[1] : args[0].res;\n\n    await applySession(req, res, { ttl, cookieName, password, cookieOptions });\n\n    return withIronSessionWrapperHandler(...args);\n  };\n}\n\nexport function ironSession({\n  ttl = 15 * 24 * 3600,\n  cookieName = throwOnNoCookieName(),\n  password = throwOnNoPassword(),\n  cookieOptions = {},\n}) {\n  return function (req, res, next) {\n    applySession(req, res, { ttl, cookieName, password, cookieOptions })\n      .then(() => {\n        next();\n      })\n      .catch(next);\n  };\n}\n\nasync function getOrCreateStore({ sealed, password, ttl }) {\n  try {\n    return await ironStore({\n      sealed,\n      password,\n      ttl,\n    });\n  } catch (err) {\n    if (\n      err.message === \"Expired seal\" ||\n      err.message === \"Bad hmac value\" ||\n      err.message === \"Cannot find password: \"\n    ) {\n      debug(\n        \"Received error from Iron: %s, session was automatically restarted\",\n        err.message,\n      );\n      // if seal expires or\n      // if seal is not valid (encrypted using a different password, when passwords are updated) or\n      // if we can't find back the password in the seal\n      // then we just start a new session over\n      return await ironStore({ password, ttl });\n    }\n\n    throw err;\n  }\n}\n"],"file":"index.js"}